{
    "created": 1683231594.7144854,
    "duration": 265.00159525871277,
    "exitcode": 1,
    "root": "/home/frasermince/portability",
    "environment": {
        "Python": "3.10.10",
        "Platform": "Linux-4.19.0-20-cloud-amd64-x86_64-with-glibc2.28",
        "Packages": {
            "pytest": "7.2.2",
            "pluggy": "1.0.0"
        },
        "Plugins": {
            "forked": "1.6.0",
            "timeout": "2.1.0",
            "xdist": "3.2.1",
            "json-report": "1.5.0",
            "metadata": "2.0.4",
            "hypothesis": "6.70.2"
        }
    },
    "summary": {
        "passed": 1040,
        "skipped": 2,
        "failed": 140,
        "total": 1182,
        "collected": 1182
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/__init__.py",
                    "type": "Package"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/PRNGKey_test.py::PrngTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/PRNGKey_test.py::PrngTest::testPRNGValues",
                    "type": "TestCaseFunction",
                    "lineno": 65
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/PRNGKey_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/PRNGKey_test.py::PrngTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/PRNG_test.py::PrngTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/PRNG_test.py::PrngTest::testPRNGValues",
                    "type": "TestCaseFunction",
                    "lineno": 72
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/PRNG_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/PRNG_test.py::PrngTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp0",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp1",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp2",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp3",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp4",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp5",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp6",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp7",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp8",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp9",
                    "type": "TestCaseFunction",
                    "lineno": 158
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/add_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/all_gather_test.py::APITest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/all_gather_test.py::APITest::test_xla_computation_lower_fun_axis_env",
                    "type": "TestCaseFunction",
                    "lineno": 90
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/all_gather_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/all_gather_test.py::APITest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial0",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial1",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial2",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial3",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial4",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial5",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial6",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial7",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial8",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial9",
                    "type": "TestCaseFunction",
                    "lineno": 148
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/all_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/arange_test.py::APITest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/arange_test.py::APITest::test_arange_jit",
                    "type": "TestCaseFunction",
                    "lineno": 83
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/arange_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/arange_test.py::APITest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/array_test.py::JaxArrayTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/array_test.py::JaxArrayTest::test_jnp_array",
                    "type": "TestCaseFunction",
                    "lineno": 84
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/array_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/array_test.py::JaxArrayTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage0",
                    "type": "TestCaseFunction",
                    "lineno": 295
                },
                {
                    "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage1",
                    "type": "TestCaseFunction",
                    "lineno": 295
                },
                {
                    "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage2",
                    "type": "TestCaseFunction",
                    "lineno": 295
                },
                {
                    "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage3",
                    "type": "TestCaseFunction",
                    "lineno": 295
                },
                {
                    "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage4",
                    "type": "TestCaseFunction",
                    "lineno": 295
                },
                {
                    "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage5",
                    "type": "TestCaseFunction",
                    "lineno": 295
                },
                {
                    "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage6",
                    "type": "TestCaseFunction",
                    "lineno": 295
                },
                {
                    "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage7",
                    "type": "TestCaseFunction",
                    "lineno": 295
                },
                {
                    "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage8",
                    "type": "TestCaseFunction",
                    "lineno": 295
                },
                {
                    "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage9",
                    "type": "TestCaseFunction",
                    "lineno": 295
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/average_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp0",
                    "type": "TestCaseFunction",
                    "lineno": 191
                },
                {
                    "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp1",
                    "type": "TestCaseFunction",
                    "lineno": 191
                },
                {
                    "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp2",
                    "type": "TestCaseFunction",
                    "lineno": 191
                },
                {
                    "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp3",
                    "type": "TestCaseFunction",
                    "lineno": 191
                },
                {
                    "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp4",
                    "type": "TestCaseFunction",
                    "lineno": 191
                },
                {
                    "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp5",
                    "type": "TestCaseFunction",
                    "lineno": 191
                },
                {
                    "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp6",
                    "type": "TestCaseFunction",
                    "lineno": 191
                },
                {
                    "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp7",
                    "type": "TestCaseFunction",
                    "lineno": 191
                },
                {
                    "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp8",
                    "type": "TestCaseFunction",
                    "lineno": 191
                },
                {
                    "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp9",
                    "type": "TestCaseFunction",
                    "lineno": 191
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/bitwise_and_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf0",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf1",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf2",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf3",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf4",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf5",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf6",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf7",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf8",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf9",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf0",
                    "type": "TestCaseFunction",
                    "lineno": 95
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf1",
                    "type": "TestCaseFunction",
                    "lineno": 95
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf2",
                    "type": "TestCaseFunction",
                    "lineno": 95
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf3",
                    "type": "TestCaseFunction",
                    "lineno": 95
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf4",
                    "type": "TestCaseFunction",
                    "lineno": 95
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf5",
                    "type": "TestCaseFunction",
                    "lineno": 95
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf6",
                    "type": "TestCaseFunction",
                    "lineno": 95
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf7",
                    "type": "TestCaseFunction",
                    "lineno": 95
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf8",
                    "type": "TestCaseFunction",
                    "lineno": 95
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf9",
                    "type": "TestCaseFunction",
                    "lineno": 95
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf0",
                    "type": "TestCaseFunction",
                    "lineno": 113
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf1",
                    "type": "TestCaseFunction",
                    "lineno": 113
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf2",
                    "type": "TestCaseFunction",
                    "lineno": 113
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf3",
                    "type": "TestCaseFunction",
                    "lineno": 113
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf4",
                    "type": "TestCaseFunction",
                    "lineno": 113
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf5",
                    "type": "TestCaseFunction",
                    "lineno": 113
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf6",
                    "type": "TestCaseFunction",
                    "lineno": 113
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf7",
                    "type": "TestCaseFunction",
                    "lineno": 113
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf8",
                    "type": "TestCaseFunction",
                    "lineno": 113
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf9",
                    "type": "TestCaseFunction",
                    "lineno": 113
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf0",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf1",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf2",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf3",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf4",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf5",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf6",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf7",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf8",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf9",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf0",
                    "type": "TestCaseFunction",
                    "lineno": 131
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf1",
                    "type": "TestCaseFunction",
                    "lineno": 131
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf2",
                    "type": "TestCaseFunction",
                    "lineno": 131
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf3",
                    "type": "TestCaseFunction",
                    "lineno": 131
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf4",
                    "type": "TestCaseFunction",
                    "lineno": 131
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf5",
                    "type": "TestCaseFunction",
                    "lineno": 131
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf6",
                    "type": "TestCaseFunction",
                    "lineno": 131
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf7",
                    "type": "TestCaseFunction",
                    "lineno": 131
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf8",
                    "type": "TestCaseFunction",
                    "lineno": 131
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf9",
                    "type": "TestCaseFunction",
                    "lineno": 131
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf0",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf1",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf2",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf3",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf4",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf5",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf6",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf7",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf8",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf9",
                    "type": "TestCaseFunction",
                    "lineno": 148
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf0",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf1",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf2",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf3",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf4",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf5",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf6",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf7",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf8",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf9",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf0",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf1",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf2",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf3",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf4",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf5",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf6",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf7",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf8",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf9",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf0",
                    "type": "TestCaseFunction",
                    "lineno": 231
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf1",
                    "type": "TestCaseFunction",
                    "lineno": 231
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf2",
                    "type": "TestCaseFunction",
                    "lineno": 231
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf3",
                    "type": "TestCaseFunction",
                    "lineno": 231
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf4",
                    "type": "TestCaseFunction",
                    "lineno": 231
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf5",
                    "type": "TestCaseFunction",
                    "lineno": 231
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf6",
                    "type": "TestCaseFunction",
                    "lineno": 231
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf7",
                    "type": "TestCaseFunction",
                    "lineno": 231
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf8",
                    "type": "TestCaseFunction",
                    "lineno": 231
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf9",
                    "type": "TestCaseFunction",
                    "lineno": 231
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf0",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf1",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf2",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf3",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf4",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf5",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf6",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf7",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf8",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf9",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf0",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf1",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf2",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf3",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf4",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf5",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf6",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf7",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf8",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf9",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf0",
                    "type": "TestCaseFunction",
                    "lineno": 271
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf1",
                    "type": "TestCaseFunction",
                    "lineno": 271
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf2",
                    "type": "TestCaseFunction",
                    "lineno": 271
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf3",
                    "type": "TestCaseFunction",
                    "lineno": 271
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf4",
                    "type": "TestCaseFunction",
                    "lineno": 271
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf5",
                    "type": "TestCaseFunction",
                    "lineno": 271
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf6",
                    "type": "TestCaseFunction",
                    "lineno": 271
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf7",
                    "type": "TestCaseFunction",
                    "lineno": 271
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf8",
                    "type": "TestCaseFunction",
                    "lineno": 271
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf9",
                    "type": "TestCaseFunction",
                    "lineno": 271
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf0",
                    "type": "TestCaseFunction",
                    "lineno": 252
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf1",
                    "type": "TestCaseFunction",
                    "lineno": 252
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf2",
                    "type": "TestCaseFunction",
                    "lineno": 252
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf3",
                    "type": "TestCaseFunction",
                    "lineno": 252
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf4",
                    "type": "TestCaseFunction",
                    "lineno": 252
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf5",
                    "type": "TestCaseFunction",
                    "lineno": 252
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf6",
                    "type": "TestCaseFunction",
                    "lineno": 252
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf7",
                    "type": "TestCaseFunction",
                    "lineno": 252
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf8",
                    "type": "TestCaseFunction",
                    "lineno": 252
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf9",
                    "type": "TestCaseFunction",
                    "lineno": 252
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress0",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress1",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress2",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress3",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress4",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress5",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress6",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress7",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress8",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress9",
                    "type": "TestCaseFunction",
                    "lineno": 189
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/compress_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D0",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D1",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D2",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D3",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D4",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D5",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D6",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D7",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D8",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D9",
                    "type": "TestCaseFunction",
                    "lineno": 74
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_2d_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions0",
                    "type": "TestCaseFunction",
                    "lineno": 186
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions1",
                    "type": "TestCaseFunction",
                    "lineno": 186
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions2",
                    "type": "TestCaseFunction",
                    "lineno": 186
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions3",
                    "type": "TestCaseFunction",
                    "lineno": 186
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions4",
                    "type": "TestCaseFunction",
                    "lineno": 186
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions5",
                    "type": "TestCaseFunction",
                    "lineno": 186
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions6",
                    "type": "TestCaseFunction",
                    "lineno": 186
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions7",
                    "type": "TestCaseFunction",
                    "lineno": 186
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions8",
                    "type": "TestCaseFunction",
                    "lineno": 186
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions9",
                    "type": "TestCaseFunction",
                    "lineno": 186
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp0",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp1",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp2",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp3",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp4",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp5",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp6",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp7",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp8",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp9",
                    "type": "TestCaseFunction",
                    "lineno": 158
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/cos_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray0",
                    "type": "TestCaseFunction",
                    "lineno": 233
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray1",
                    "type": "TestCaseFunction",
                    "lineno": 233
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray2",
                    "type": "TestCaseFunction",
                    "lineno": 233
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray3",
                    "type": "TestCaseFunction",
                    "lineno": 233
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray4",
                    "type": "TestCaseFunction",
                    "lineno": 233
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray5",
                    "type": "TestCaseFunction",
                    "lineno": 233
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray6",
                    "type": "TestCaseFunction",
                    "lineno": 233
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray7",
                    "type": "TestCaseFunction",
                    "lineno": 233
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray8",
                    "type": "TestCaseFunction",
                    "lineno": 233
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray9",
                    "type": "TestCaseFunction",
                    "lineno": 233
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger0",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger1",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger2",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger3",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger4",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger5",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger6",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger7",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger8",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger9",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray0",
                    "type": "TestCaseFunction",
                    "lineno": 255
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray1",
                    "type": "TestCaseFunction",
                    "lineno": 255
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray2",
                    "type": "TestCaseFunction",
                    "lineno": 255
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray3",
                    "type": "TestCaseFunction",
                    "lineno": 255
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray4",
                    "type": "TestCaseFunction",
                    "lineno": 255
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray5",
                    "type": "TestCaseFunction",
                    "lineno": 255
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray6",
                    "type": "TestCaseFunction",
                    "lineno": 255
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray7",
                    "type": "TestCaseFunction",
                    "lineno": 255
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray8",
                    "type": "TestCaseFunction",
                    "lineno": 255
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray9",
                    "type": "TestCaseFunction",
                    "lineno": 255
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice0",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice1",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice2",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice3",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice4",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice5",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice6",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice7",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice8",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice9",
                    "type": "TestCaseFunction",
                    "lineno": 213
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/disable_jit_test.py::CPPJitTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/disable_jit_test.py::CPPJitTest::test_disable_jit",
                    "type": "TestCaseFunction",
                    "lineno": 104
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/disable_jit_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/disable_jit_test.py::CPPJitTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig0",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig1",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig2",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig3",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig4",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig5",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig6",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig7",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig8",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig9",
                    "type": "TestCaseFunction",
                    "lineno": 49
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/eig_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/einsum_path_test.py::EinsumTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/einsum_path_test.py::EinsumTest::test_einsum_kpmurphy_example",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/einsum_path_test.py::EinsumTest::test_einsum_path",
                    "type": "TestCaseFunction",
                    "lineno": 32
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/einsum_path_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/einsum_path_test.py::EinsumTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad0",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad1",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad2",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad3",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad4",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad5",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad6",
                    "type": "TestCaseFunction",
                    "lineno": 89
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/erf_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/eval_context_test.py::APITest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/eval_context_test.py::APITest::test_eval_context",
                    "type": "TestCaseFunction",
                    "lineno": 83
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/eval_context_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/eval_context_test.py::APITest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp0",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp1",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp2",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp3",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp4",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp5",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp6",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp7",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp8",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp9",
                    "type": "TestCaseFunction",
                    "lineno": 158
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/exp_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip0",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip1",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip2",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip3",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip4",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip5",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip6",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip7",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip8",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip9",
                    "type": "TestCaseFunction",
                    "lineno": 203
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/flip_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr0",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr1",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr2",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr3",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr4",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr5",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr6",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr7",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr8",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr9",
                    "type": "TestCaseFunction",
                    "lineno": 203
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/fliplr_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun0",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun1",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun2",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun3",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun4",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun5",
                    "type": "TestCaseFunction",
                    "lineno": 73
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/gammaln_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/ge_test.py::LaxTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/ge_test.py::LaxTest::test_ops_do_not_accept_complex_dtypes0",
                    "type": "TestCaseFunction",
                    "lineno": 101
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/ge_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/ge_test.py::LaxTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_comparing_var",
                    "type": "TestCaseFunction",
                    "lineno": 357
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_concrete_array_string_representation",
                    "type": "TestCaseFunction",
                    "lineno": 387
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_input_residual_forwarding",
                    "type": "TestCaseFunction",
                    "lineno": 394
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_0",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_1",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_10",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_100",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_101",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_102",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_103",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_104",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_105",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_106",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_107",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_108",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_109",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_11",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_12",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_13",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_14",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_15",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_16",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_17",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_18",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_19",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_2",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_20",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_21",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_22",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_23",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_24",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_25",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_26",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_27",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_28",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_29",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_3",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_30",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_31",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_32",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_33",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_34",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_35",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_36",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_37",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_38",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_39",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_4",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_40",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_41",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_42",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_43",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_44",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_45",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_46",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_47",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_48",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_49",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_5",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_50",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_51",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_52",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_53",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_54",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_55",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_56",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_57",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_58",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_59",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_6",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_60",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_61",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_62",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_63",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_64",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_65",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_66",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_67",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_68",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_69",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_7",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_70",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_71",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_72",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_73",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_74",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_75",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_76",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_77",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_78",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_79",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_8",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_80",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_81",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_82",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_83",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_84",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_85",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_86",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_87",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_88",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_89",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_9",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_90",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_91",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_92",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_93",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_94",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_95",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_96",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_97",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_98",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_99",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_closure",
                    "type": "TestCaseFunction",
                    "lineno": 268
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_0",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_1",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_10",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_100",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_101",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_102",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_103",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_104",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_105",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_106",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_107",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_108",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_109",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_11",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_12",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_13",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_14",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_15",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_16",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_17",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_18",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_19",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_2",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_20",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_21",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_22",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_23",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_24",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_25",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_26",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_27",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_28",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_29",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_3",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_30",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_31",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_32",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_33",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_34",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_35",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_36",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_37",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_38",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_39",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_4",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_40",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_41",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_42",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_43",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_44",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_45",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_46",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_47",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_48",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_49",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_5",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_50",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_51",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_52",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_53",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_54",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_55",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_56",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_57",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_58",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_59",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_6",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_60",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_61",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_62",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_63",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_64",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_65",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_66",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_67",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_68",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_69",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_7",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_70",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_71",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_72",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_73",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_74",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_75",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_76",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_77",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_78",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_79",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_8",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_80",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_81",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_82",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_83",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_84",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_85",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_86",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_87",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_88",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_89",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_9",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_90",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_91",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_92",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_93",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_94",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_95",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_96",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_97",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_98",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_99",
                    "type": "TestCaseFunction",
                    "lineno": 227
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_closure",
                    "type": "TestCaseFunction",
                    "lineno": 258
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized0",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized1",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized10",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized100",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized101",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized102",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized103",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized104",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized105",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized106",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized107",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized108",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized109",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized11",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized12",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized13",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized14",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized15",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized16",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized17",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized18",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized19",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized2",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized20",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized21",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized22",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized23",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized24",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized25",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized26",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized27",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized28",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized29",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized3",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized30",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized31",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized32",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized33",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized34",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized35",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized36",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized37",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized38",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized39",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized4",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized40",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized41",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized42",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized43",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized44",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized45",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized46",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized47",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized48",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized49",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized5",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized50",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized51",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized52",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized53",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized54",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized55",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized56",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized57",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized58",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized59",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized6",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized60",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized61",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized62",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized63",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized64",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized65",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized66",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized67",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized68",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized69",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized7",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized70",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized71",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized72",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized73",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized74",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized75",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized76",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized77",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized78",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized79",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized8",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized80",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized81",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized82",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized83",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized84",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized85",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized86",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized87",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized88",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized89",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized9",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized90",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized91",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized92",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized93",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized94",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized95",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized96",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized97",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized98",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized99",
                    "type": "TestCaseFunction",
                    "lineno": 242
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_repeated_fwd",
                    "type": "TestCaseFunction",
                    "lineno": 314
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_zeros",
                    "type": "TestCaseFunction",
                    "lineno": 233
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_product_jit",
                    "type": "TestCaseFunction",
                    "lineno": 298
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_reference_cycles",
                    "type": "TestCaseFunction",
                    "lineno": 323
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_reference_cycles_jit",
                    "type": "TestCaseFunction",
                    "lineno": 340
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_simple_jit",
                    "type": "TestCaseFunction",
                    "lineno": 278
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_tree_flatten",
                    "type": "TestCaseFunction",
                    "lineno": 209
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_tree_map",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_tree_unflatten",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_var_compared_by_identity",
                    "type": "TestCaseFunction",
                    "lineno": 374
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_var_ordering",
                    "type": "TestCaseFunction",
                    "lineno": 366
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_var_tree_flatten",
                    "type": "TestCaseFunction",
                    "lineno": 380
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_0",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_1",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_10",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_100",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_101",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_102",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_103",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_104",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_105",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_106",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_107",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_108",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_109",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_11",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_12",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_13",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_14",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_15",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_16",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_17",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_18",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_19",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_2",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_20",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_21",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_22",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_23",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_24",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_25",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_26",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_27",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_28",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_29",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_3",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_30",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_31",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_32",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_33",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_34",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_35",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_36",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_37",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_38",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_39",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_4",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_40",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_41",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_42",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_43",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_44",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_45",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_46",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_47",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_48",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_49",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_5",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_50",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_51",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_52",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_53",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_54",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_55",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_56",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_57",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_58",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_59",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_6",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_60",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_61",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_62",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_63",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_64",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_65",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_66",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_67",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_68",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_69",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_7",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_70",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_71",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_72",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_73",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_74",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_75",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_76",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_77",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_78",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_79",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_8",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_80",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_81",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_82",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_83",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_84",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_85",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_86",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_87",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_88",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_89",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_9",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_90",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_91",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_92",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_93",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_94",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_95",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_96",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_97",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_98",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_99",
                    "type": "TestCaseFunction",
                    "lineno": 246
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::JaxprTypeChecks",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::JaxprTypeChecks::test_raise_to_shaped_weak_type0",
                    "type": "TestCaseFunction",
                    "lineno": 414
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::JaxprTypeChecks::test_raise_to_shaped_weak_type1",
                    "type": "TestCaseFunction",
                    "lineno": 414
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::JaxprTypeChecks::test_raise_to_shaped_weak_type2",
                    "type": "TestCaseFunction",
                    "lineno": 414
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py::JaxprTypeChecks",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp0",
                    "type": "TestCaseFunction",
                    "lineno": 210
                },
                {
                    "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp1",
                    "type": "TestCaseFunction",
                    "lineno": 210
                },
                {
                    "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp2",
                    "type": "TestCaseFunction",
                    "lineno": 210
                },
                {
                    "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp3",
                    "type": "TestCaseFunction",
                    "lineno": 210
                },
                {
                    "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp4",
                    "type": "TestCaseFunction",
                    "lineno": 210
                },
                {
                    "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp5",
                    "type": "TestCaseFunction",
                    "lineno": 210
                },
                {
                    "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp6",
                    "type": "TestCaseFunction",
                    "lineno": 210
                },
                {
                    "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp7",
                    "type": "TestCaseFunction",
                    "lineno": 210
                },
                {
                    "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp8",
                    "type": "TestCaseFunction",
                    "lineno": 210
                },
                {
                    "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp9",
                    "type": "TestCaseFunction",
                    "lineno": 210
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/i0_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/infeed_test.py::InfeedTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/infeed_test.py::InfeedTest::testInfeed",
                    "type": "TestCaseFunction",
                    "lineno": 39
                },
                {
                    "nodeid": "src/jax_tests_reduced/infeed_test.py::InfeedTest::testInfeedPytree",
                    "type": "TestCaseFunction",
                    "lineno": 71
                },
                {
                    "nodeid": "src/jax_tests_reduced/infeed_test.py::InfeedTest::testInfeedThenOutfeed",
                    "type": "TestCaseFunction",
                    "lineno": 92
                },
                {
                    "nodeid": "src/jax_tests_reduced/infeed_test.py::InfeedTest::testInfeedThenOutfeedInALoop",
                    "type": "TestCaseFunction",
                    "lineno": 117
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/infeed_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/infeed_test.py::InfeedTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/integer_pow_test.py::SparsifyTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/integer_pow_test.py::SparsifyTest::testUnaryOperationsNonUniqueIndices_integer_pow_BCOO",
                    "type": "TestCaseFunction",
                    "lineno": 60
                },
                {
                    "nodeid": "src/jax_tests_reduced/integer_pow_test.py::SparsifyTest::testUnaryOperationsNonUniqueIndices_integer_pow_BCSR",
                    "type": "TestCaseFunction",
                    "lineno": 60
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/integer_pow_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/integer_pow_test.py::SparsifyTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/isscalar_test.py::APITest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/isscalar_test.py::APITest::test_dunder_jax_array",
                    "type": "TestCaseFunction",
                    "lineno": 90
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/isscalar_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/isscalar_test.py::APITest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/log_test.py::IndexingTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/log_test.py::IndexingTest::testIndexApply0",
                    "type": "TestCaseFunction",
                    "lineno": 55
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/log_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/log_test.py::IndexingTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu0",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu1",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu2",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu3",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu4",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu5",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu6",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu7",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuBatching0",
                    "type": "TestCaseFunction",
                    "lineno": 93
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuBatching1",
                    "type": "TestCaseFunction",
                    "lineno": 93
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuCPUBackendOnGPU",
                    "type": "TestCaseFunction",
                    "lineno": 115
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad0",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad1",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad2",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad3",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad4",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad5",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad6",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad7",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad8",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad9",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuOfSingularMatrix",
                    "type": "TestCaseFunction",
                    "lineno": 75
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/make_jax_pr_test.py::CustomTransposeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/make_jax_pr_test.py::CustomTransposeTest::test_make_jaxpr",
                    "type": "TestCaseFunction",
                    "lineno": 113
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/make_jax_pr_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/make_jax_pr_test.py::CustomTransposeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerBadInitial0",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial0",
                    "type": "TestCaseFunction",
                    "lineno": 176
                },
                {
                    "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial1",
                    "type": "TestCaseFunction",
                    "lineno": 176
                },
                {
                    "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial2",
                    "type": "TestCaseFunction",
                    "lineno": 176
                },
                {
                    "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial3",
                    "type": "TestCaseFunction",
                    "lineno": 176
                },
                {
                    "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial4",
                    "type": "TestCaseFunction",
                    "lineno": 176
                },
                {
                    "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial5",
                    "type": "TestCaseFunction",
                    "lineno": 176
                },
                {
                    "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial6",
                    "type": "TestCaseFunction",
                    "lineno": 176
                },
                {
                    "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial7",
                    "type": "TestCaseFunction",
                    "lineno": 176
                },
                {
                    "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial8",
                    "type": "TestCaseFunction",
                    "lineno": 176
                },
                {
                    "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial9",
                    "type": "TestCaseFunction",
                    "lineno": 176
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/max_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer0",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer1",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer2",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer3",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer4",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer5",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer6",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer7",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer8",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer9",
                    "type": "TestCaseFunction",
                    "lineno": 183
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/mean_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/named_call_test.py::HostCallbackTapTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/named_call_test.py::HostCallbackTapTest::test_tap_named_call",
                    "type": "TestCaseFunction",
                    "lineno": 261
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/named_call_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/named_call_test.py::HostCallbackTapTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun0",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun1",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun2",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun3",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun4",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun5",
                    "type": "TestCaseFunction",
                    "lineno": 73
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/ndtr_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/one_hot_test.py::NNFunctionsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/one_hot_test.py::NNFunctionsTest::testOneHot",
                    "type": "TestCaseFunction",
                    "lineno": 36
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/one_hot_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/one_hot_test.py::NNFunctionsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes0",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes1",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes2",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes3",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes4",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes5",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes6",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes7",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes8",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes9",
                    "type": "TestCaseFunction",
                    "lineno": 188
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/ones_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/partial_test.py::TreeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/partial_test.py::TreeTest::testPartialDoesNotMergeWithOtherPartials",
                    "type": "TestCaseFunction",
                    "lineno": 218
                },
                {
                    "nodeid": "src/jax_tests_reduced/partial_test.py::TreeTest::testPartialFuncAttributeHasStableHash",
                    "type": "TestCaseFunction",
                    "lineno": 229
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/partial_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/partial_test.py::TreeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/partial_val_test.py::CoreTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/partial_val_test.py::CoreTest::test_dropvar_avals",
                    "type": "TestCaseFunction",
                    "lineno": 203
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/partial_val_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/partial_val_test.py::CoreTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=i_collective_names=i",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ij_collective_names=i",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ij_collective_names=ij",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ij_collective_names=j",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ij_collective_names=ji",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=i",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ij",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ijk",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ik",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ikj",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=j",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ji",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=jik",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=jk",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=jki",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=k",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ki",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=kij",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=kj",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=kji",
                    "type": "TestCaseFunction",
                    "lineno": 48
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp0",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp1",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp10",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp11",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp12",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp13",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp14",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp15",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp16",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp17",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp18",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp19",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp2",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp3",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp4",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp5",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp6",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp7",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp8",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp9",
                    "type": "TestCaseFunction",
                    "lineno": 167
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer0",
                    "type": "TestCaseFunction",
                    "lineno": 194
                },
                {
                    "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer1",
                    "type": "TestCaseFunction",
                    "lineno": 194
                },
                {
                    "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer2",
                    "type": "TestCaseFunction",
                    "lineno": 194
                },
                {
                    "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer3",
                    "type": "TestCaseFunction",
                    "lineno": 194
                },
                {
                    "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer4",
                    "type": "TestCaseFunction",
                    "lineno": 194
                },
                {
                    "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer5",
                    "type": "TestCaseFunction",
                    "lineno": 194
                },
                {
                    "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer6",
                    "type": "TestCaseFunction",
                    "lineno": 194
                },
                {
                    "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer7",
                    "type": "TestCaseFunction",
                    "lineno": 194
                },
                {
                    "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer8",
                    "type": "TestCaseFunction",
                    "lineno": 194
                },
                {
                    "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer9",
                    "type": "TestCaseFunction",
                    "lineno": 194
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/prod_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation0",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation1",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation2",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation3",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation4",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation5",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation6",
                    "type": "TestCaseFunction",
                    "lineno": 46
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/reshape_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad0",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad1",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad2",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad3",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad4",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad5",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad6",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad7",
                    "type": "TestCaseFunction",
                    "lineno": 189
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/save_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/size_test.py::APITest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/size_test.py::APITest::test_dunder_jax_array",
                    "type": "TestCaseFunction",
                    "lineno": 83
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/size_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/size_test.py::APITest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition0",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition1",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition2",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition3",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition4",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition5",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition6",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition7",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition8",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition9",
                    "type": "TestCaseFunction",
                    "lineno": 189
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt0",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt1",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt2",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt3",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt4",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt5",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt6",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt7",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt8",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt9",
                    "type": "TestCaseFunction",
                    "lineno": 189
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/split_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp0",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp1",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp2",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp3",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp4",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp5",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp6",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp7",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp8",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp9",
                    "type": "TestCaseFunction",
                    "lineno": 156
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/sqrt_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack0",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack1",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack2",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack3",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack4",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack5",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack6",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack7",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack8",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack9",
                    "type": "TestCaseFunction",
                    "lineno": 189
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/stack_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/stop_gradient_test.py::CustomLinearSolveTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/stop_gradient_test.py::CustomLinearSolveTest::test_custom_linear_solve_nonsymmetric",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/jax_tests_reduced/stop_gradient_test.py::CustomLinearSolveTest::test_custom_linear_solve_symmetric",
                    "type": "TestCaseFunction",
                    "lineno": 89
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/stop_gradient_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/stop_gradient_test.py::CustomLinearSolveTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer0",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer1",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer2",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer3",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer4",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer5",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer6",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer7",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer8",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer9",
                    "type": "TestCaseFunction",
                    "lineno": 149
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/sum_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnTinyElement0",
                    "type": "TestCaseFunction",
                    "lineno": 168
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnTinyElement1",
                    "type": "TestCaseFunction",
                    "lineno": 168
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnTinyElement2",
                    "type": "TestCaseFunction",
                    "lineno": 168
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero0",
                    "type": "TestCaseFunction",
                    "lineno": 150
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero1",
                    "type": "TestCaseFunction",
                    "lineno": 150
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero2",
                    "type": "TestCaseFunction",
                    "lineno": 150
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero3",
                    "type": "TestCaseFunction",
                    "lineno": 150
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero4",
                    "type": "TestCaseFunction",
                    "lineno": 150
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero5",
                    "type": "TestCaseFunction",
                    "lineno": 150
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero6",
                    "type": "TestCaseFunction",
                    "lineno": 150
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero7",
                    "type": "TestCaseFunction",
                    "lineno": 150
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero8",
                    "type": "TestCaseFunction",
                    "lineno": 150
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero9",
                    "type": "TestCaseFunction",
                    "lineno": 150
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput0",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput1",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput2",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput3",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput4",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput5",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput6",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput7",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput8",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput9",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput0",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput1",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput2",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput3",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput4",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput5",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput6",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput7",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput8",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput9",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithSkinnyTallInput0",
                    "type": "TestCaseFunction",
                    "lineno": 104
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithSkinnyTallInput1",
                    "type": "TestCaseFunction",
                    "lineno": 104
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK0",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK1",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK2",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK3",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK4",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK5",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK6",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK7",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK8",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK9",
                    "type": "TestCaseFunction",
                    "lineno": 90
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/top_k_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/trace_to_jax_pr_dynamic_test.py::DynamicShapesTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/trace_to_jax_pr_dynamic_test.py::DynamicShapesTest::test_staging_basic",
                    "type": "TestCaseFunction",
                    "lineno": 196
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/trace_to_jax_pr_dynamic_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/trace_to_jax_pr_dynamic_test.py::DynamicShapesTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/tree_map_test.py::CoreTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/tree_map_test.py::CoreTest::test_tree_map",
                    "type": "TestCaseFunction",
                    "lineno": 195
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/tree_map_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/tree_map_test.py::CoreTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/tree_unflatten_test.py::CoreTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/tree_unflatten_test.py::CoreTest::test_tree_unflatten",
                    "type": "TestCaseFunction",
                    "lineno": 181
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/tree_unflatten_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/tree_unflatten_test.py::CoreTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom0",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom1",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom2",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom3",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom4",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom5",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom6",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom7",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom8",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom9",
                    "type": "TestCaseFunction",
                    "lineno": 189
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU0",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU1",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU2",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU3",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU4",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU5",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU6",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU7",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU8",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU9",
                    "type": "TestCaseFunction",
                    "lineno": 189
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices0",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices1",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices2",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices3",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices4",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices5",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices6",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices7",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices8",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices9",
                    "type": "TestCaseFunction",
                    "lineno": 189
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/triu_indices_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial0",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial1",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial2",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial3",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial4",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial5",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial6",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial7",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial8",
                    "type": "TestCaseFunction",
                    "lineno": 183
                },
                {
                    "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial9",
                    "type": "TestCaseFunction",
                    "lineno": 183
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/var_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_0",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_1",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_10",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_100",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_101",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_102",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_103",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_104",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_105",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_106",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_107",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_108",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_109",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_11",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_12",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_13",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_14",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_15",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_16",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_17",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_18",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_19",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_2",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_20",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_21",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_22",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_23",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_24",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_25",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_26",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_27",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_28",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_29",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_3",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_30",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_31",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_32",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_33",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_34",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_35",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_36",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_37",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_38",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_39",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_4",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_40",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_41",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_42",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_43",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_44",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_45",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_46",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_47",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_48",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_49",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_5",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_50",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_51",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_52",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_53",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_54",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_55",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_56",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_57",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_58",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_59",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_6",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_60",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_61",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_62",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_63",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_64",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_65",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_66",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_67",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_68",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_69",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_7",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_70",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_71",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_72",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_73",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_74",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_75",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_76",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_77",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_78",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_79",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_8",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_80",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_81",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_82",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_83",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_84",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_85",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_86",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_87",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_88",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_89",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_9",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_90",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_91",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_92",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_93",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_94",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_95",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_96",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_97",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_98",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_99",
                    "type": "TestCaseFunction",
                    "lineno": 195
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes0",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes1",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes2",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes3",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes4",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes5",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes6",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes7",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes8",
                    "type": "TestCaseFunction",
                    "lineno": 189
                },
                {
                    "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes9",
                    "type": "TestCaseFunction",
                    "lineno": 189
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/zeros_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/jax_tests_reduced/__init__.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/jax_tests_reduced/PRNGKey_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/PRNG_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/add_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/all_gather_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/all_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/arange_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/array_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/average_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/bitwise_and_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/cdf_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/compress_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_2d_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/convolve_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/cos_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/delete_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/disable_jit_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/eig_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/einsum_path_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/erf_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/eval_context_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/exp_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/flip_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/fliplr_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/gammaln_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/ge_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/get_aval_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/i0_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/infeed_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/integer_pow_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/isscalar_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/log_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/lu_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/make_jax_pr_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/max_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/mean_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/named_call_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/ndtr_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/one_hot_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/ones_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/partial_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/partial_val_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/pmax_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/power_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/prod_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/reshape_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/save_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/size_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/split_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/sqrt_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/stack_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/stop_gradient_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/sum_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/svd_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/top_k_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/trace_to_jax_pr_dynamic_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/tree_map_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/tree_unflatten_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/tril_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/triu_indices_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/var_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/vjp_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/jax_tests_reduced/zeros_test.py",
                    "type": "Module"
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "src/jax_tests_reduced/PRNGKey_test.py::PrngTest::testPRNGValues",
            "lineno": 65,
            "outcome": "passed",
            "setup": {
                "duration": 0.001074759999937669,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.738129407000088,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPRNGValues>\n"
            },
            "teardown": {
                "duration": 0.0004914369999369228,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/PRNG_test.py::PrngTest::testPRNGValues",
            "lineno": 72,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008962690001226292,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06152685800020663,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPRNGValues>\n"
            },
            "teardown": {
                "duration": 0.0003325919999497273,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp0",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006958709998343693,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16940486699991197,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp0>\n"
            },
            "teardown": {
                "duration": 0.000627896999958466,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp1",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006906680000611232,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08716664700000365,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp1>\n"
            },
            "teardown": {
                "duration": 0.00040255099997921207,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp2",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005023829999117879,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11554708399989977,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp2>\n"
            },
            "teardown": {
                "duration": 0.0004397010000047885,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp3",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004923270000745106,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1594992990001174,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp3>\n"
            },
            "teardown": {
                "duration": 0.00042690600002970314,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp4",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046944399991843966,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.050925817000006646,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp4>\n"
            },
            "teardown": {
                "duration": 0.0003582309998364508,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp5",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005117069999869273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20916458400006377,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp5>\n"
            },
            "teardown": {
                "duration": 0.0004410809999626508,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp6",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046823000002405024,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11653142399995886,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp6>\n"
            },
            "teardown": {
                "duration": 0.0004586239999753161,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp7",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005029110000123183,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14663231899999118,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp7>\n"
            },
            "teardown": {
                "duration": 0.000606755000035264,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp8",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005930380000336299,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12310396999987461,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp8>\n"
            },
            "teardown": {
                "duration": 0.0005020450000756682,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/add_test.py::JaxNumpyOperatorTests::testOp9",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007817800001248543,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13202488999991147,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp9>\n"
            },
            "teardown": {
                "duration": 0.0008081260000381008,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/all_gather_test.py::APITest::test_xla_computation_lower_fun_axis_env",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007248919998801284,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10832299899993814,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_xla_computation_lower_fun_axis_env>\n"
            },
            "teardown": {
                "duration": 0.0004766520000885066,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial0",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007629490000908845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2819760849999966,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial0>\n"
            },
            "teardown": {
                "duration": 0.0006506849999823316,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial1",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007860779999191436,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12446467800009486,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial1>\n"
            },
            "teardown": {
                "duration": 0.00043648999985634873,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial2",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.000452334999863524,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.27884505099996204,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial2>\n"
            },
            "teardown": {
                "duration": 0.0006118429998878128,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial3",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005212670000673825,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2891090059999897,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial3>\n"
            },
            "teardown": {
                "duration": 0.0004124910001337412,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial4",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045821499998055515,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10009674599996288,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial4>\n"
            },
            "teardown": {
                "duration": 0.00043222199997217103,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial5",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005813519999264827,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0769565230000353,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial5>\n"
            },
            "teardown": {
                "duration": 0.0004127540000808949,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial6",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004851740000049176,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3170352639999692,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial6>\n"
            },
            "teardown": {
                "duration": 0.0011221780000596482,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial7",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008160360000601941,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11576155400007337,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial7>\n"
            },
            "teardown": {
                "duration": 0.0009136809999290563,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial8",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0013815900001645787,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.31799756200007323,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial8>\n"
            },
            "teardown": {
                "duration": 0.0005931099999543221,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/all_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial9",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006455359998653876,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20677838999995402,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial9>\n"
            },
            "teardown": {
                "duration": 0.001153982999994696,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/arange_test.py::APITest::test_arange_jit",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0012143550000018877,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.48030112100013866,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_arange_jit>\n"
            },
            "teardown": {
                "duration": 0.0006572949998826516,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/array_test.py::JaxArrayTest::test_jnp_array",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011047340001368866,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015990619999683986,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jnp_array>\n"
            },
            "teardown": {
                "duration": 0.0003942959999676532,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage0",
            "lineno": 295,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007420409999667754,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.37702841700001954,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverage0>\n"
            },
            "teardown": {
                "duration": 0.0006885410000450065,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage1",
            "lineno": 295,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009857590000592609,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.29357202800019877,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverage1>\n"
            },
            "teardown": {
                "duration": 0.0006096509998769761,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage2",
            "lineno": 295,
            "outcome": "passed",
            "setup": {
                "duration": 0.000688797000066188,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.25180157499994493,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverage2>\n"
            },
            "teardown": {
                "duration": 0.00041603500017117767,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage3",
            "lineno": 295,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004413120000208437,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09013154699982806,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testAverage3>\n",
                "longrepr": "('/home/frasermince/portability/src/jax_tests_reduced/average_test.py', 296, \"Skipped: don't support checking for ZeroDivisionError\")"
            },
            "teardown": {
                "duration": 0.0004288129998712975,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage4",
            "lineno": 295,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004774989999987156,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09357788000011169,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverage4>\n"
            },
            "teardown": {
                "duration": 0.0004159909999543743,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage5",
            "lineno": 295,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004800019999038341,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15085502399983852,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverage5>\n"
            },
            "teardown": {
                "duration": 0.0005520229999547155,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage6",
            "lineno": 295,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005002970001442009,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3818716169998879,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverage6>\n"
            },
            "teardown": {
                "duration": 0.00043080700015707407,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage7",
            "lineno": 295,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004591050001181429,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6499147219999486,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverage7>\n"
            },
            "teardown": {
                "duration": 0.0004170199999862234,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage8",
            "lineno": 295,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004719720000139205,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09431841000014174,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverage8>\n"
            },
            "teardown": {
                "duration": 0.00040494799986845464,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/average_test.py::JaxNumpyReducerTests::testAverage9",
            "lineno": 295,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048736899998402805,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09834608500000286,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverage9>\n"
            },
            "teardown": {
                "duration": 0.0005246539999461675,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp0",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007807169999978214,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16415029700010564,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBitwiseOp0>\n"
            },
            "teardown": {
                "duration": 0.0005840349999743921,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp1",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005807960001220636,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.049582930000042325,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBitwiseOp1>\n"
            },
            "teardown": {
                "duration": 0.0004150310001023172,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp2",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005133770000611548,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10752239500016003,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBitwiseOp2>\n"
            },
            "teardown": {
                "duration": 0.0005502150002030248,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp3",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004896030000054452,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023832808999941335,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBitwiseOp3>\n"
            },
            "teardown": {
                "duration": 0.00044925099996362405,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp4",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004204049998861592,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10410064100005911,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBitwiseOp4>\n"
            },
            "teardown": {
                "duration": 0.0004285770000933553,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp5",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004686579998178786,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1809956609999972,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBitwiseOp5>\n"
            },
            "teardown": {
                "duration": 0.0004592440000124043,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp6",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005205929999192449,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10864905199991881,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBitwiseOp6>\n"
            },
            "teardown": {
                "duration": 0.0005742359999203472,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp7",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.000527639999972962,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025815537999960725,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBitwiseOp7>\n"
            },
            "teardown": {
                "duration": 0.00048614399997859437,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp8",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004232849998970778,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08665770400011752,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBitwiseOp8>\n"
            },
            "teardown": {
                "duration": 0.0006309639998107741,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/bitwise_and_test.py::JaxNumpyOperatorTests::testBitwiseOp9",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006169309999677353,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1822112569998353,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBitwiseOp9>\n"
            },
            "teardown": {
                "duration": 0.0007678649999434128,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf0",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007260949998908472,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6903639340000609,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBernoulliCdf0>\n"
            },
            "teardown": {
                "duration": 0.00044049899997844477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf1",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005036540001128742,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.5264445770001203,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBernoulliCdf1>\n"
            },
            "teardown": {
                "duration": 0.0005646189999879425,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf2",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005983109999760927,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4095033229998535,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBernoulliCdf2>\n"
            },
            "teardown": {
                "duration": 0.00039579999997840787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf3",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044765500001631153,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6648651949999476,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBernoulliCdf3>\n"
            },
            "teardown": {
                "duration": 0.0004522729998370778,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf4",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048515399998905195,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8717247040001439,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBernoulliCdf4>\n"
            },
            "teardown": {
                "duration": 0.00042171799987045233,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf5",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046877299996594957,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3541245390001677,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBernoulliCdf5>\n"
            },
            "teardown": {
                "duration": 0.00039315599997280515,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf6",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005020549999699142,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5843872699999793,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBernoulliCdf6>\n"
            },
            "teardown": {
                "duration": 0.00043115299990859057,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf7",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005107859999498032,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1268835770001715,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBernoulliCdf7>\n"
            },
            "teardown": {
                "duration": 0.00041058300007534854,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf8",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046418200008702115,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08905712300020241,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBernoulliCdf8>\n"
            },
            "teardown": {
                "duration": 0.0004154409998591291,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBernoulliCdf9",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004324090000409342,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.27924391000010473,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBernoulliCdf9>\n"
            },
            "teardown": {
                "duration": 0.00042098100016119133,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf0",
            "lineno": 95,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004505550000430958,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.822128480000174,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBetaLogCdf0>\n"
            },
            "teardown": {
                "duration": 0.0004192270000658027,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf1",
            "lineno": 95,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005426840000382072,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7386931940000068,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBetaLogCdf1>\n"
            },
            "teardown": {
                "duration": 0.0004585629999382945,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf2",
            "lineno": 95,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005160160001196346,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8016255830000318,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBetaLogCdf2>\n"
            },
            "teardown": {
                "duration": 0.00045538100016528915,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf3",
            "lineno": 95,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005086730000130046,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5735009049999462,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBetaLogCdf3>\n"
            },
            "teardown": {
                "duration": 0.0004737839999506832,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf4",
            "lineno": 95,
            "outcome": "passed",
            "setup": {
                "duration": 0.000504270000192264,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8762545829999908,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBetaLogCdf4>\n"
            },
            "teardown": {
                "duration": 0.00044984700002714817,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf5",
            "lineno": 95,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004890720001640148,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7355858109999645,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBetaLogCdf5>\n"
            },
            "teardown": {
                "duration": 0.00047719100007270754,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf6",
            "lineno": 95,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005152060000455094,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6062868460001027,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBetaLogCdf6>\n"
            },
            "teardown": {
                "duration": 0.00045407899983729294,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf7",
            "lineno": 95,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004703479999079718,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10607305600001382,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBetaLogCdf7>\n"
            },
            "teardown": {
                "duration": 0.000494717000037781,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf8",
            "lineno": 95,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005013249999592517,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6907078469998851,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBetaLogCdf8>\n"
            },
            "teardown": {
                "duration": 0.0006228229999578616,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testBetaLogCdf9",
            "lineno": 95,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006040499999926396,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5070721009999488,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBetaLogCdf9>\n"
            },
            "teardown": {
                "duration": 0.0004698430000189546,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf0",
            "lineno": 113,
            "outcome": "passed",
            "setup": {
                "duration": 0.000874331999966671,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4693458049998753,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCauchyLogCdf0>\n"
            },
            "teardown": {
                "duration": 0.0006629800000155228,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf1",
            "lineno": 113,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009090060000289668,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5555913160001182,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCauchyLogCdf1>\n"
            },
            "teardown": {
                "duration": 0.0006529449999561621,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf2",
            "lineno": 113,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006510700000035285,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.40022226599990063,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCauchyLogCdf2>\n"
            },
            "teardown": {
                "duration": 0.0005602410001301905,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf3",
            "lineno": 113,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005006010001125105,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.306883980000066,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCauchyLogCdf3>\n"
            },
            "teardown": {
                "duration": 0.00036332200011202076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf4",
            "lineno": 113,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007539950001955731,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005462440999963292,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCauchyLogCdf4>\n"
            },
            "teardown": {
                "duration": 0.00033496199989713205,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf5",
            "lineno": 113,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004235010001139017,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.30394177999983185,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCauchyLogCdf5>\n"
            },
            "teardown": {
                "duration": 0.0006132070000148815,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf6",
            "lineno": 113,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005243000000518805,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11587825699984933,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCauchyLogCdf6>\n"
            },
            "teardown": {
                "duration": 0.0003948920000311773,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf7",
            "lineno": 113,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004348349998508638,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0946749350000573,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCauchyLogCdf7>\n"
            },
            "teardown": {
                "duration": 0.0006110710000939434,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf8",
            "lineno": 113,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005727230000047712,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09010428199985654,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCauchyLogCdf8>\n"
            },
            "teardown": {
                "duration": 0.0005828079999901092,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testCauchyLogCdf9",
            "lineno": 113,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005654619999404531,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0045292650002011214,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCauchyLogCdf9>\n"
            },
            "teardown": {
                "duration": 0.0003147549998629984,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf0",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044219199980943813,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5967960410000615,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testChi2LogCdf0>\n"
            },
            "teardown": {
                "duration": 0.0006295000000591244,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf1",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006610200000523037,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6877571610000359,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testChi2LogCdf1>\n"
            },
            "teardown": {
                "duration": 0.00041672299994388595,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf2",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004596349999701488,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7738610069998231,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testChi2LogCdf2>\n"
            },
            "teardown": {
                "duration": 0.0004614310000761179,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf3",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004729520001092169,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6035787090002032,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testChi2LogCdf3>\n"
            },
            "teardown": {
                "duration": 0.0004199420000077225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf4",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004706479999185831,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6813559590000295,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testChi2LogCdf4>\n"
            },
            "teardown": {
                "duration": 0.0004622050000762101,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf5",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004847420000260172,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006706948000100965,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testChi2LogCdf5>\n"
            },
            "teardown": {
                "duration": 0.00031558599994241376,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf6",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042462700002943166,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5943808340000487,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testChi2LogCdf6>\n"
            },
            "teardown": {
                "duration": 0.00042834999999286083,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf7",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005019519999223121,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5367570260000321,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testChi2LogCdf7>\n"
            },
            "teardown": {
                "duration": 0.0004527769999640441,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf8",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.000505076999843368,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03798687299990888,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testChi2LogCdf8>\n"
            },
            "teardown": {
                "duration": 0.0004158080000706832,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testChi2LogCdf9",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046126600000206963,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5142119939998793,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testChi2LogCdf9>\n"
            },
            "teardown": {
                "duration": 0.0004745530000036524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf0",
            "lineno": 131,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005196319998503895,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0071526489998632314,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGammaLogCdf0>\n"
            },
            "teardown": {
                "duration": 0.0003478250000625849,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf1",
            "lineno": 131,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044254100021134946,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0061542500000086875,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGammaLogCdf1>\n"
            },
            "teardown": {
                "duration": 0.0003438359999563545,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf2",
            "lineno": 131,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044062400002076174,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005695831999901202,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGammaLogCdf2>\n"
            },
            "teardown": {
                "duration": 0.00035155499995198625,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf3",
            "lineno": 131,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041246399996452965,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006048192999969615,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGammaLogCdf3>\n"
            },
            "teardown": {
                "duration": 0.0003474760001154209,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf4",
            "lineno": 131,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004627249998065963,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0063570320000962965,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGammaLogCdf4>\n"
            },
            "teardown": {
                "duration": 0.00033035000001291337,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf5",
            "lineno": 131,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004237159998865536,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006272975999991104,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGammaLogCdf5>\n"
            },
            "teardown": {
                "duration": 0.000311085000021194,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf6",
            "lineno": 131,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004298700000617828,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005599270999937289,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGammaLogCdf6>\n"
            },
            "teardown": {
                "duration": 0.00030502999993586855,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf7",
            "lineno": 131,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003716440000971488,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005951278999873466,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGammaLogCdf7>\n"
            },
            "teardown": {
                "duration": 0.00033181000003423833,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf8",
            "lineno": 131,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040173499996853934,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005010565000020506,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGammaLogCdf8>\n"
            },
            "teardown": {
                "duration": 0.00032980800006043864,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGammaLogCdf9",
            "lineno": 131,
            "outcome": "passed",
            "setup": {
                "duration": 0.000402462000010928,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006043632999990223,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGammaLogCdf9>\n"
            },
            "teardown": {
                "duration": 0.0003111890000582207,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf0",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003863169999931415,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7558027239999774,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGenNormCdf0>\n"
            },
            "teardown": {
                "duration": 0.000501964000022781,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf1",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005401949999850331,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9249476449999747,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGenNormCdf1>\n"
            },
            "teardown": {
                "duration": 0.00043807599990941526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf2",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005243969999355613,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9146482000001015,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGenNormCdf2>\n"
            },
            "teardown": {
                "duration": 0.0005271530001209612,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf3",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004975849999482307,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7494207950001055,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGenNormCdf3>\n"
            },
            "teardown": {
                "duration": 0.00043543399988266174,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf4",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005269069999940257,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8664754349999839,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGenNormCdf4>\n"
            },
            "teardown": {
                "duration": 0.0006317800000488205,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf5",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005444910000278469,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6216614859999936,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGenNormCdf5>\n"
            },
            "teardown": {
                "duration": 0.0004267150000032416,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf6",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004717860001619556,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4650526639998134,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGenNormCdf6>\n"
            },
            "teardown": {
                "duration": 0.0005968180000763823,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf7",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005505030001131672,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14266489100009494,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGenNormCdf7>\n"
            },
            "teardown": {
                "duration": 0.0004628250001132983,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf8",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005492469999808236,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6976452110000082,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGenNormCdf8>\n"
            },
            "teardown": {
                "duration": 0.00045024999985798786,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testGenNormCdf9",
            "lineno": 148,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004958009999427304,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2288037499999973,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGenNormCdf9>\n"
            },
            "teardown": {
                "duration": 0.00046314499991240154,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf0",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048589299990453583,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.27911244799997803,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLaplaceCdf0>\n"
            },
            "teardown": {
                "duration": 0.00045810799997525464,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf1",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004929740000534366,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2892904840000483,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLaplaceCdf1>\n"
            },
            "teardown": {
                "duration": 0.00040078600000015285,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf2",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004544149999219371,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2916249699999298,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLaplaceCdf2>\n"
            },
            "teardown": {
                "duration": 0.0004227250001349603,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf3",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004458930000055261,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2813318869998511,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLaplaceCdf3>\n"
            },
            "teardown": {
                "duration": 0.0004107249999378837,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf4",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004473569999845495,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005986745999962295,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLaplaceCdf4>\n"
            },
            "teardown": {
                "duration": 0.00030686599984619534,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf5",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003971119999732764,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.37157993100004205,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLaplaceCdf5>\n"
            },
            "teardown": {
                "duration": 0.000411652000138929,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf6",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047045499991327233,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005533947999992961,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLaplaceCdf6>\n"
            },
            "teardown": {
                "duration": 0.00029666500017810904,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf7",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003885389999140898,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005382259000043632,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLaplaceCdf7>\n"
            },
            "teardown": {
                "duration": 0.0002896309999869118,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf8",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038906100007807254,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005724216999851706,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLaplaceCdf8>\n"
            },
            "teardown": {
                "duration": 0.0002982480000355281,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLaplaceCdf9",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040504899993720755,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005102119999946808,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLaplaceCdf9>\n"
            },
            "teardown": {
                "duration": 0.0002989680001519446,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf0",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003690139999434905,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12614113699987684,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLogisticCdf0>\n"
            },
            "teardown": {
                "duration": 0.00043265800013614353,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf1",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.000436835000073188,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1305612700000438,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLogisticCdf1>\n"
            },
            "teardown": {
                "duration": 0.0003993120001268835,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf2",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004734520000511111,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12730027199995675,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLogisticCdf2>\n"
            },
            "teardown": {
                "duration": 0.0004306369999085291,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf3",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048244699996757845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12823931499997343,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLogisticCdf3>\n"
            },
            "teardown": {
                "duration": 0.00043436000009933196,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf4",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004555150001124275,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004022160000204167,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLogisticCdf4>\n"
            },
            "teardown": {
                "duration": 0.0003408069999295549,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf5",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042308299998694565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1256390089999968,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLogisticCdf5>\n"
            },
            "teardown": {
                "duration": 0.00044034300003659155,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf6",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006429510001453309,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0034161690000473754,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLogisticCdf6>\n"
            },
            "teardown": {
                "duration": 0.0002884139998968749,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf7",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003878719999192981,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0032445560000269325,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLogisticCdf7>\n"
            },
            "teardown": {
                "duration": 0.00026700900002651906,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf8",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034513699984017876,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003670078999903126,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLogisticCdf8>\n"
            },
            "teardown": {
                "duration": 0.0002637289999256609,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testLogisticCdf9",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042020800015052373,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0028078790001018206,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLogisticCdf9>\n"
            },
            "teardown": {
                "duration": 0.00029036499995527265,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf0",
            "lineno": 231,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004213439999602997,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2252767560000848,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormCdf0>\n"
            },
            "teardown": {
                "duration": 0.0005594459998974344,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf1",
            "lineno": 231,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047734999998283456,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3176917240000421,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormCdf1>\n"
            },
            "teardown": {
                "duration": 0.000622886999963157,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf2",
            "lineno": 231,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004984949998743105,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.231389788000115,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormCdf2>\n"
            },
            "teardown": {
                "duration": 0.0005762069999946107,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf3",
            "lineno": 231,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006259889999000734,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.31080292499996176,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormCdf3>\n"
            },
            "teardown": {
                "duration": 0.0005634149999877991,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf4",
            "lineno": 231,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005410049998317845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008371075000013661,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormCdf4>\n"
            },
            "teardown": {
                "duration": 0.00029291800001374213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf5",
            "lineno": 231,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004273629999715922,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5595467050000025,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormCdf5>\n"
            },
            "teardown": {
                "duration": 0.0004282109998712258,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf6",
            "lineno": 231,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004726820000087173,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007543940999994447,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormCdf6>\n"
            },
            "teardown": {
                "duration": 0.00029346199994506605,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf7",
            "lineno": 231,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004354909999619849,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007610114000044632,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormCdf7>\n"
            },
            "teardown": {
                "duration": 0.0002818839998326439,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf8",
            "lineno": 231,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003622050001013122,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008024317000035808,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormCdf8>\n"
            },
            "teardown": {
                "duration": 0.0003418530000089959,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormCdf9",
            "lineno": 231,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003530190001583833,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007448845999988407,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormCdf9>\n"
            },
            "teardown": {
                "duration": 0.00041013999998540385,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf0",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040256699981000565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2753182010001183,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormLogCdf0>\n"
            },
            "teardown": {
                "duration": 0.0004413060000842961,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf1",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004632769998806907,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6133123820000037,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormLogCdf1>\n"
            },
            "teardown": {
                "duration": 0.0004117739999855985,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf2",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044403000015336147,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4381953810000141,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormLogCdf2>\n"
            },
            "teardown": {
                "duration": 0.0005382499998631829,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf3",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005001329998322035,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.43063660699999673,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormLogCdf3>\n"
            },
            "teardown": {
                "duration": 0.000642915000071298,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf4",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005140989999290468,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024817607999921165,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormLogCdf4>\n"
            },
            "teardown": {
                "duration": 0.00043507999998837477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf5",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047396600007232337,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6727886280000348,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormLogCdf5>\n"
            },
            "teardown": {
                "duration": 0.0008282850001251063,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf6",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006148800000573829,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024825121000048966,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormLogCdf6>\n"
            },
            "teardown": {
                "duration": 0.0004242889999659383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf7",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003961299998991308,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02435816800016255,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormLogCdf7>\n"
            },
            "teardown": {
                "duration": 0.00039652500004194735,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf8",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003747670000393555,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025875023000025976,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormLogCdf8>\n"
            },
            "teardown": {
                "duration": 0.00040897500002756715,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testNormLogCdf9",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003996480002115277,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027050464000012653,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormLogCdf9>\n"
            },
            "teardown": {
                "duration": 0.00044393500002115616,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf0",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003979279999839491,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.48510909499987065,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPoissonCdf0>\n"
            },
            "teardown": {
                "duration": 0.00045876899980612507,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf1",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044516699995256204,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5569399290000092,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPoissonCdf1>\n"
            },
            "teardown": {
                "duration": 0.0004172599999492377,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf2",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.000544245000128285,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5440296780000153,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPoissonCdf2>\n"
            },
            "teardown": {
                "duration": 0.0004245069999342377,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf3",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004912639999474777,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4597976780000863,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPoissonCdf3>\n"
            },
            "teardown": {
                "duration": 0.0004220739999709622,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf4",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047785199990357796,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5225950779999948,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPoissonCdf4>\n"
            },
            "teardown": {
                "duration": 0.0004427679998570966,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf5",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005052779999914492,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5803339290000622,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPoissonCdf5>\n"
            },
            "teardown": {
                "duration": 0.0006607000000258267,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf6",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006181030000789178,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5667791309999757,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPoissonCdf6>\n"
            },
            "teardown": {
                "duration": 0.00044420000017453276,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf7",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005496490000496124,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006151483999929042,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPoissonCdf7>\n"
            },
            "teardown": {
                "duration": 0.00033362399994985026,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf8",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004363450000255398,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09801926199997979,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPoissonCdf8>\n"
            },
            "teardown": {
                "duration": 0.0005927800000335992,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testPoissonCdf9",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005896590000702417,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.560910505000038,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPoissonCdf9>\n"
            },
            "teardown": {
                "duration": 0.00041015099986907444,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf0",
            "lineno": 271,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004903149999790912,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.5109963940001307,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormCdf0>\n"
            },
            "teardown": {
                "duration": 0.0005433870001070318,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf1",
            "lineno": 271,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004946469998685643,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.029306997999811,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormCdf1>\n"
            },
            "teardown": {
                "duration": 0.00041661000000203785,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf2",
            "lineno": 271,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046026999984860595,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.927519946000075,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormCdf2>\n"
            },
            "teardown": {
                "duration": 0.0005823840001539793,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf3",
            "lineno": 271,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004892370000106894,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5157323660000657,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormCdf3>\n"
            },
            "teardown": {
                "duration": 0.0006044930000825843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf4",
            "lineno": 271,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006744119998529641,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.3399222230000305,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormCdf4>\n"
            },
            "teardown": {
                "duration": 0.00044272800005273893,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf5",
            "lineno": 271,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004838649999783229,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.470670551000012,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormCdf5>\n"
            },
            "teardown": {
                "duration": 0.00041565500009710377,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf6",
            "lineno": 271,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005187100000512146,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.49994669700004124,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormCdf6>\n"
            },
            "teardown": {
                "duration": 0.0005660430001626082,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf7",
            "lineno": 271,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005199130000619334,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.521542658000044,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormCdf7>\n"
            },
            "teardown": {
                "duration": 0.00042341499988651776,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf8",
            "lineno": 271,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004468250001536944,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.0782332300000235,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormCdf8>\n"
            },
            "teardown": {
                "duration": 0.0006608940000205621,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormCdf9",
            "lineno": 271,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005800100000215025,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.871025459999828,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormCdf9>\n"
            },
            "teardown": {
                "duration": 0.0005698500001471984,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf0",
            "lineno": 252,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005165610000403831,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5164137159999882,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormLogCdf0>\n"
            },
            "teardown": {
                "duration": 0.0004609129998698336,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf1",
            "lineno": 252,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005491049998909148,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4950313960000585,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormLogCdf1>\n"
            },
            "teardown": {
                "duration": 0.0003950630000417732,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf2",
            "lineno": 252,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044803800005865924,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5013268620000417,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormLogCdf2>\n"
            },
            "teardown": {
                "duration": 0.0004133780000756815,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf3",
            "lineno": 252,
            "outcome": "passed",
            "setup": {
                "duration": 0.000485796000020855,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5089435099998809,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormLogCdf3>\n"
            },
            "teardown": {
                "duration": 0.00043780900000456313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf4",
            "lineno": 252,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005030960001022322,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5053819070001282,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormLogCdf4>\n"
            },
            "teardown": {
                "duration": 0.0004715129998658085,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf5",
            "lineno": 252,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004710139999133389,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5162981999999374,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormLogCdf5>\n"
            },
            "teardown": {
                "duration": 0.00040281800011143787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf6",
            "lineno": 252,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004535529999429855,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4949031209998793,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormLogCdf6>\n"
            },
            "teardown": {
                "duration": 0.0004308000000037282,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf7",
            "lineno": 252,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044101699995735544,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5009177899999031,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormLogCdf7>\n"
            },
            "teardown": {
                "duration": 0.0003908460000729974,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf8",
            "lineno": 252,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046556799998143106,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.49669291100008195,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormLogCdf8>\n"
            },
            "teardown": {
                "duration": 0.0004128890000174579,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cdf_test.py::LaxBackedScipyStatsTests::testTruncnormLogCdf9",
            "lineno": 252,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004417669999838836,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4948158909999165,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTruncnormLogCdf9>\n"
            },
            "teardown": {
                "duration": 0.0017604659999506111,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress0",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006284799999320967,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.37707968999984587,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCompress0>\n"
            },
            "teardown": {
                "duration": 0.00045842999998058076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress1",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.000503815999991275,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09196026199992957,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCompress1>\n"
            },
            "teardown": {
                "duration": 0.00043885000013688114,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress2",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047791999986657174,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20137547499984976,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCompress2>\n"
            },
            "teardown": {
                "duration": 0.00040356699992116774,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress3",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005131329999130685,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.157320916000117,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCompress3>\n"
            },
            "teardown": {
                "duration": 0.00040272199998980795,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress4",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004478480000216223,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1708792879999237,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCompress4>\n"
            },
            "teardown": {
                "duration": 0.0004084549998424336,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress5",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044998799990025873,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005188268999972934,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCompress5>\n"
            },
            "teardown": {
                "duration": 0.0003003049998824281,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress6",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039956800014806504,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027266213000075368,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCompress6>\n"
            },
            "teardown": {
                "duration": 0.00030264199995144736,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress7",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038427800018325797,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004598789000056058,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCompress7>\n"
            },
            "teardown": {
                "duration": 0.00029334900000321795,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress8",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004051250000429718,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07343530299999657,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCompress8>\n"
            },
            "teardown": {
                "duration": 0.0004062329999214853,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/compress_test.py::LaxBackedNumpyTests::testCompress9",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004377830000521499,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08751635199996599,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCompress9>\n"
            },
            "teardown": {
                "duration": 0.0005752760000632406,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D0",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007816769998498785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1474441380000826,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions2D0>\n"
            },
            "teardown": {
                "duration": 0.00039731599986225774,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D1",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046672799999214476,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.20193905300016,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions2D1>\n"
            },
            "teardown": {
                "duration": 0.000407503000133147,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D2",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004486129998895194,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.35123443199995563,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions2D2>\n"
            },
            "teardown": {
                "duration": 0.0005900289997953223,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D3",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006559670000569895,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15286667800000941,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions2D3>\n"
            },
            "teardown": {
                "duration": 0.0005694709998351755,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D4",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045875999990130367,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23158509699987917,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions2D4>\n"
            },
            "teardown": {
                "duration": 0.0004135379999752331,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D5",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006921460001194646,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3942063370000142,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions2D5>\n"
            },
            "teardown": {
                "duration": 0.0005570260000240523,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D6",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005159060001460603,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11327451200008909,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions2D6>\n"
            },
            "teardown": {
                "duration": 0.00041815800000222225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D7",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004831839999042131,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07813913899985891,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions2D7>\n"
            },
            "teardown": {
                "duration": 0.0005321349999576341,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D8",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005500439999650553,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21170407700014948,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions2D8>\n"
            },
            "teardown": {
                "duration": 0.00041533600006005145,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_2d_test.py::LaxBackedScipySignalTests::testConvolutions2D9",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004555279999749473,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10022243899993555,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions2D9>\n"
            },
            "teardown": {
                "duration": 0.0006711949999953504,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions0",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006588969999938854,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3385393420001037,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions0>\n"
            },
            "teardown": {
                "duration": 0.0003867620000619354,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions1",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045478999982151436,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0061445180001555855,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions1>\n"
            },
            "teardown": {
                "duration": 0.0004039590000957105,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions2",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004375089999939519,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15551652799990734,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions2>\n"
            },
            "teardown": {
                "duration": 0.00040808300013850385,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions3",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.000447613000005731,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1760427310000523,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions3>\n"
            },
            "teardown": {
                "duration": 0.0004879479999999603,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions4",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007194029999482154,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.29337283299992123,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions4>\n"
            },
            "teardown": {
                "duration": 0.00038960999995651946,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions5",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004925210000692459,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005171203999907448,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions5>\n"
            },
            "teardown": {
                "duration": 0.0002928270000666089,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions6",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003965050000260817,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15634824400012803,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions6>\n"
            },
            "teardown": {
                "duration": 0.0004251109999131586,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions7",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004795390000253974,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22092185699989386,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions7>\n"
            },
            "teardown": {
                "duration": 0.00043475200004650105,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions8",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048417799985145393,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24162793400000737,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions8>\n"
            },
            "teardown": {
                "duration": 0.0004138819999752741,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/convolve_test.py::LaxBackedNumpyTests::testConvolutions9",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.000494224000021859,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3399739269998463,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutions9>\n"
            },
            "teardown": {
                "duration": 0.0007675230001495947,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp0",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007853350000459614,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2181894549999015,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp0>\n"
            },
            "teardown": {
                "duration": 0.00044586900003196206,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp1",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004976650000116933,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.143190112999946,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp1>\n"
            },
            "teardown": {
                "duration": 0.0005973170000288519,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp2",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005279229999359814,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15978258199993434,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp2>\n"
            },
            "teardown": {
                "duration": 0.0005715000002055604,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp3",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005577980000452953,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.047958194000102594,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp3>\n"
            },
            "teardown": {
                "duration": 0.0009148679998816078,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp4",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043678600013663527,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22816760099999556,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp4>\n"
            },
            "teardown": {
                "duration": 0.0004229450000821089,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp5",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046268000005511567,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08450658999981897,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp5>\n"
            },
            "teardown": {
                "duration": 0.00039366199985124695,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp6",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004430300000421994,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1401324549999572,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp6>\n"
            },
            "teardown": {
                "duration": 0.0004266040000402427,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp7",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045571300006486126,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21974853999995503,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp7>\n"
            },
            "teardown": {
                "duration": 0.0004412660000525648,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp8",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004487349999635626,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05326752799987844,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp8>\n"
            },
            "teardown": {
                "duration": 0.00045827799999642593,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/cos_test.py::JaxNumpyOperatorTests::testOp9",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043614800006253063,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1400588610001705,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp9>\n"
            },
            "teardown": {
                "duration": 0.000550674999885814,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray0",
            "lineno": 233,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007221010000648675,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010938419998183235,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteIndexArray0>\n"
            },
            "teardown": {
                "duration": 0.00028642500001296867,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray1",
            "lineno": 233,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003970029999891267,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010765219999484543,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteIndexArray1>\n"
            },
            "teardown": {
                "duration": 0.00029053499997644394,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray2",
            "lineno": 233,
            "outcome": "passed",
            "setup": {
                "duration": 0.000404355000000578,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011107400000582857,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteIndexArray2>\n"
            },
            "teardown": {
                "duration": 0.00029584499998236424,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray3",
            "lineno": 233,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003589509999528673,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009621869999136834,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteIndexArray3>\n"
            },
            "teardown": {
                "duration": 0.0003033539999250934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray4",
            "lineno": 233,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003547910000634147,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009518009999283095,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteIndexArray4>\n"
            },
            "teardown": {
                "duration": 0.00028748499994435406,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray5",
            "lineno": 233,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003643029999693681,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009962659999018797,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteIndexArray5>\n"
            },
            "teardown": {
                "duration": 0.00028643599989663926,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray6",
            "lineno": 233,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035687399986272794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009575920000770566,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteIndexArray6>\n"
            },
            "teardown": {
                "duration": 0.0002906770000663528,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray7",
            "lineno": 233,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004005509999842616,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08939551399998891,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteIndexArray7>\n"
            },
            "teardown": {
                "duration": 0.00043962099994132586,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray8",
            "lineno": 233,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004523179998159321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025243624000040654,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteIndexArray8>\n"
            },
            "teardown": {
                "duration": 0.00033970599997701356,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteIndexArray9",
            "lineno": 233,
            "outcome": "passed",
            "setup": {
                "duration": 0.000593146000028355,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02735065100000611,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteIndexArray9>\n"
            },
            "teardown": {
                "duration": 0.00036278900006436743,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger0",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043158700009371387,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08467075199996543,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteInteger0>\n"
            },
            "teardown": {
                "duration": 0.0005499559999861958,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger1",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005228180000358407,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08547936700006176,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteInteger1>\n"
            },
            "teardown": {
                "duration": 0.00045559500017589016,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger2",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005709730000944546,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08877391199985141,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteInteger2>\n"
            },
            "teardown": {
                "duration": 0.0005469329998959438,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger3",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005190370000036637,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023083878000079494,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteInteger3>\n"
            },
            "teardown": {
                "duration": 0.0003215960000488849,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger4",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004278169999452075,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08670827099990674,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteInteger4>\n"
            },
            "teardown": {
                "duration": 0.0003945789999306726,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger5",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046440200003416976,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023806913000044005,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteInteger5>\n"
            },
            "teardown": {
                "duration": 0.0004592860000229848,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger6",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004789350000464765,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023847007000085796,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteInteger6>\n"
            },
            "teardown": {
                "duration": 0.00035060200002590136,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger7",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046031199985918647,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09044065399984902,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteInteger7>\n"
            },
            "teardown": {
                "duration": 0.0005567629998495249,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger8",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004935959998420003,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0871620460000031,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteInteger8>\n"
            },
            "teardown": {
                "duration": 0.0005392179998580104,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteInteger9",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005434619999959978,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025033036000195352,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteInteger9>\n"
            },
            "teardown": {
                "duration": 0.00046928400001888804,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray0",
            "lineno": 255,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045233800005917146,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011086140000315936,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteMaskArray0>\n"
            },
            "teardown": {
                "duration": 0.0002921119998973154,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray1",
            "lineno": 255,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003870240000196645,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009642459999668063,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteMaskArray1>\n"
            },
            "teardown": {
                "duration": 0.0002799740000227757,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray2",
            "lineno": 255,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034241800017298374,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009347719999368564,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteMaskArray2>\n"
            },
            "teardown": {
                "duration": 0.00031193800009532424,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray3",
            "lineno": 255,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003776170001401624,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010084750001624343,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteMaskArray3>\n"
            },
            "teardown": {
                "duration": 0.0002726150000853522,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray4",
            "lineno": 255,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003962949999731791,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008999710000807681,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteMaskArray4>\n"
            },
            "teardown": {
                "duration": 0.0002844059999915771,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray5",
            "lineno": 255,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004139239999858546,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010303620001650415,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteMaskArray5>\n"
            },
            "teardown": {
                "duration": 0.0002856869998595357,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray6",
            "lineno": 255,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033092199987549975,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008896220001588517,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteMaskArray6>\n"
            },
            "teardown": {
                "duration": 0.0002782959998057777,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray7",
            "lineno": 255,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036570799989021907,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001086085999986608,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteMaskArray7>\n"
            },
            "teardown": {
                "duration": 0.00029264999989209173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray8",
            "lineno": 255,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003643019999799435,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009257280000838364,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteMaskArray8>\n"
            },
            "teardown": {
                "duration": 0.00028575900000760157,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteMaskArray9",
            "lineno": 255,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003495210000892257,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009256399998776033,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteMaskArray9>\n"
            },
            "teardown": {
                "duration": 0.000267372999815052,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice0",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033671500000309607,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028966216000071654,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteSlice0>\n"
            },
            "teardown": {
                "duration": 0.0004131189998588525,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice1",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003632620000644238,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3613230509999994,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteSlice1>\n"
            },
            "teardown": {
                "duration": 0.00042199399990749953,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice2",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046058499992795987,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10452765100012584,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteSlice2>\n"
            },
            "teardown": {
                "duration": 0.0006337289999009954,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice3",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007036530000732455,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10408972499999436,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteSlice3>\n"
            },
            "teardown": {
                "duration": 0.0004389900000205671,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice4",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044054800014237117,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028022663000001558,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteSlice4>\n"
            },
            "teardown": {
                "duration": 0.0004448659999525262,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice5",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047460899986617733,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10405593300015425,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteSlice5>\n"
            },
            "teardown": {
                "duration": 0.00042392000000290864,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice6",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004521630000908772,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02845509099984156,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteSlice6>\n"
            },
            "teardown": {
                "duration": 0.0003359610000188695,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice7",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004287080000722199,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10496793300012541,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteSlice7>\n"
            },
            "teardown": {
                "duration": 0.00041189500007021707,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice8",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048094299995682377,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10511619999988397,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteSlice8>\n"
            },
            "teardown": {
                "duration": 0.00048798399984661955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/delete_test.py::LaxBackedNumpyTests::testDeleteSlice9",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005261660000996926,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10282431699988592,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeleteSlice9>\n"
            },
            "teardown": {
                "duration": 0.0008123049999539944,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/disable_jit_test.py::CPPJitTest::test_disable_jit",
            "lineno": 104,
            "outcome": "passed",
            "setup": {
                "duration": 0.000823115000002872,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003031636000059734,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_disable_jit>\n"
            },
            "teardown": {
                "duration": 0.00034922300005746365,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig0",
            "lineno": 49,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007015020000835648,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018959314999847265,
                "outcome": "failed",
                "crash": {
                    "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                    "lineno": 459,
                    "message": "NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead."
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/eig_test.py",
                        "lineno": 82,
                        "message": ""
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 103,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 144,
                        "message": "in eig"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 360,
                        "message": "in bind"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 363,
                        "message": "in bind_with_trace"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 817,
                        "message": "in process_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 451,
                        "message": "in eig_impl"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 117,
                        "message": "in apply_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 253,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 246,
                        "message": "in cached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 208,
                        "message": "in xla_primitive_callable"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 251,
                        "message": "in _xla_callable_uncached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 243,
                        "message": "in sharded_lowering"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py",
                        "lineno": 314,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py",
                        "lineno": 2551,
                        "message": "in lower_sharding_computation"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 742,
                        "message": "in lower_jaxpr_to_module"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1037,
                        "message": "in lower_jaxpr_to_fun"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1172,
                        "message": "in jaxpr_subcomp"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 459,
                        "message": "NotImplementedError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testEig0>\n",
                "longrepr": "#!/home/dunganhdinh2002/miniconda3/bin/python\n    # -*- coding: utf-8 -*-\n    import re\n    import sys\n    from pytest import console_main\n    if __name__ == \"__main__\":\n        sys.argv[0] = re.sub(r\"(-script\\.pyw|\\.exe)?$\", \"\", sys.argv[0])\n>       sys.exit(console_main())\n\n/home/dunganhdinh2002/miniconda3/bin/pytest:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def console_main() -> int:\n        \"\"\"The CLI entry point of pytest.\n    \n        This function is not meant for programmable use; use `main()` instead.\n        \"\"\"\n        # https://docs.python.org/3/library/signal.html#note-on-sigpipe\n        try:\n>           code = main()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:190: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def main(\n        args: Optional[Union[List[str], \"os.PathLike[str]\"]] = None,\n        plugins: Optional[Sequence[Union[str, _PluggyPlugin]]] = None,\n    ) -> Union[int, ExitCode]:\n        \"\"\"Perform an in-process test run.\n    \n        :param args: List of command line arguments.\n        :param plugins: List of plugin objects to be auto-registered during initialization.\n    \n        :returns: An exit code.\n        \"\"\"\n        try:\n            try:\n                config = _prepareconfig(args, plugins)\n            except ConftestImportFailure as e:\n                exc_info = ExceptionInfo.from_exc_info(e.excinfo)\n                tw = TerminalWriter(sys.stderr)\n                tw.line(f\"ImportError while loading conftest '{e.path}'.\", red=True)\n                exc_info.traceback = exc_info.traceback.filter(\n                    filter_traceback_for_conftest_import_failure\n                )\n                exc_repr = (\n                    exc_info.getrepr(style=\"short\", chain=False)\n                    if exc_info.traceback\n                    else exc_info.exconly()\n                )\n                formatted_tb = str(exc_repr)\n                for line in formatted_tb.splitlines():\n                    tw.line(line.rstrip(), red=True)\n                return ExitCode.USAGE_ERROR\n            else:\n                try:\n>                   ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n                        config=config\n                    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_cmdline_main(config: Config) -> Union[int, ExitCode]:\n>       return wrap_session(config, _main)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def wrap_session(\n        config: Config, doit: Callable[[Config, \"Session\"], Optional[Union[int, ExitCode]]]\n    ) -> Union[int, ExitCode]:\n        \"\"\"Skeleton command line program.\"\"\"\n        session = Session.from_config(config)\n        session.exitstatus = ExitCode.OK\n        initstate = 0\n        try:\n            try:\n                config._do_configure()\n                initstate = 1\n                config.hook.pytest_sessionstart(session=session)\n                initstate = 2\n>               session.exitstatus = doit(config, session) or 0\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _main(config: Config, session: \"Session\") -> Optional[Union[int, ExitCode]]:\n        \"\"\"Default command line protocol for initialization, session,\n        running tests and reporting.\"\"\"\n        config.hook.pytest_collection(session=session)\n>       config.hook.pytest_runtestloop(session=session)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtestloop(session: \"Session\") -> bool:\n        if session.testsfailed and not session.config.option.continue_on_collection_errors:\n            raise session.Interrupted(\n                \"%d error%s during collection\"\n                % (session.testsfailed, \"s\" if session.testsfailed != 1 else \"\")\n            )\n    \n        if session.config.option.collectonly:\n            return True\n    \n        for i, item in enumerate(session.items):\n            nextitem = session.items[i + 1] if i + 1 < len(session.items) else None\n>           item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_protocol(item: Item, nextitem: Optional[Item]) -> bool:\n        ihook = item.ihook\n        ihook.pytest_runtest_logstart(nodeid=item.nodeid, location=item.location)\n>       runtestprotocol(item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtestprotocol(\n        item: Item, log: bool = True, nextitem: Optional[Item] = None\n    ) -> List[TestReport]:\n        hasrequest = hasattr(item, \"_request\")\n        if hasrequest and not item._request:  # type: ignore[attr-defined]\n            # This only happens if the item is re-run, as is done by\n            # pytest-rerunfailures.\n            item._initrequest()  # type: ignore[attr-defined]\n        rep = call_and_report(item, \"setup\", log)\n        reports = [rep]\n        if rep.passed:\n            if item.config.getoption(\"setupshow\", False):\n                show_test_item(item)\n            if not item.config.getoption(\"setuponly\", False):\n>               reports.append(call_and_report(item, \"call\", log))\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_and_report(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", log: bool = True, **kwds\n    ) -> TestReport:\n>       call = call_runtest_hook(item, when, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_runtest_hook(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", **kwds\n    ) -> \"CallInfo[None]\":\n        if when == \"setup\":\n            ihook: Callable[..., None] = item.ihook.pytest_runtest_setup\n        elif when == \"call\":\n            ihook = item.ihook.pytest_runtest_call\n        elif when == \"teardown\":\n            ihook = item.ihook.pytest_runtest_teardown\n        else:\n            assert False, f\"Unhandled runtest hook case: {when}\"\n        reraise: Tuple[Type[BaseException], ...] = (Exit,)\n        if not item.config.getoption(\"usepdb\", False):\n            reraise += (KeyboardInterrupt,)\n>       return CallInfo.from_call(\n            lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n        )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n        except AttributeError:\n            pass\n        try:\n>           item.runtest()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtest(self) -> None:\n        from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n    \n        assert self._testcase is not None\n    \n        maybe_wrap_pytest_function_for_tracing(self)\n    \n        # Let the unittest framework handle async functions.\n        if is_async_function(self.obj):\n            # Type ignored because self acts as the TestResult, but is not actually one.\n            self._testcase(result=self)  # type: ignore[arg-type]\n        else:\n            # When --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug.\n            # Arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed.\n            # We need to consider if the test itself is skipped, or the whole class.\n            assert isinstance(self.parent, UnitTestCase)\n            skipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)\n            if self.config.getoption(\"usepdb\") and not skipped:\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)\n    \n            # We need to update the actual bound method with self.obj, because\n            # wrap_pytest_function_for_tracing replaces self.obj by a wrapper.\n            setattr(self._testcase, self.name, self.obj)\n            try:\n>               self._testcase(result=self)  # type: ignore[arg-type]\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwds):\n>       return self.run(*args, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:650: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def run(self, result=None):\n        if result is None:\n            result = self.defaultTestResult()\n            startTestRun = getattr(result, 'startTestRun', None)\n            stopTestRun = getattr(result, 'stopTestRun', None)\n            if startTestRun is not None:\n                startTestRun()\n        else:\n            stopTestRun = None\n    \n        result.startTest(self)\n        try:\n            testMethod = getattr(self, self._testMethodName)\n            if (getattr(self.__class__, \"__unittest_skip__\", False) or\n                getattr(testMethod, \"__unittest_skip__\", False)):\n                # If the class or method was skipped.\n                skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')\n                            or getattr(testMethod, '__unittest_skip_why__', ''))\n                self._addSkip(result, self, skip_why)\n                return result\n    \n            expecting_failure = (\n                getattr(self, \"__unittest_expecting_failure__\", False) or\n                getattr(testMethod, \"__unittest_expecting_failure__\", False)\n            )\n            outcome = _Outcome(result)\n            try:\n                self._outcome = outcome\n    \n                with outcome.testPartExecutor(self):\n                    self._callSetUp()\n                if outcome.success:\n                    outcome.expecting_failure = expecting_failure\n                    with outcome.testPartExecutor(self, isTest=True):\n>                       self._callTestMethod(testMethod)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:591: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _callTestMethod(self, method):\n>       method()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:549: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @functools.wraps(test_method)\n    def bound_param_test(self):\n      if isinstance(testcase_params, abc.Mapping):\n>       return test_method(self, **testcase_params)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/absl/testing/parameterized.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\nE           jax._src.source_info_util.JaxStackTraceBeforeTransformation: NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\nE           \nE           The preceding stack trace is the source of the JAX operation that, once transformed by JAX, triggered the following exception.\nE           \nE           --------------------\n\nsrc/jax_tests_reduced/eig_test.py:82: JaxStackTraceBeforeTransformation\n\nThe above exception was the direct cause of the following exception:\n\nself = <src.jax_tests_reduced.eig_test.NumpyLinalgTest testMethod=testEig0>, shape = (2, 6, 6), dtype = <class 'numpy.complex64'>\ncompute_left_eigenvectors = True, compute_right_eigenvectors = False\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\n\nsrc/jax_tests_reduced/eig_test.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:103: in wrapped\n    return f(*pos_args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:144: in eig\n    return eig_p.bind(x, compute_left_eigenvectors=compute_left_eigenvectors,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:360: in bind\n    return self.bind_with_trace(find_top_trace(args), args, params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:363: in bind_with_trace\n    out = trace.process_primitive(self, map(trace.full_raise, args), params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:817: in process_primitive\n    return primitive.impl(*tracers, **params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:451: in eig_impl\n    return dispatch.apply_primitive(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:117: in apply_primitive\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:253: in wrapper\n    return cached(config._trace_context(), *args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:246: in cached\n    return f(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:208: in xla_primitive_callable\n    compiled = _xla_callable_uncached(lu.wrap_init(prim_fun), prim.name,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:251: in _xla_callable_uncached\n    computation = sharded_lowering(fun, name, donated_invars, keep_unused,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:243: in sharded_lowering\n    return pxla.lower_sharding_computation(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py:314: in wrapper\n    return func(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py:2551: in lower_sharding_computation\n    lowering_result = mlir.lower_jaxpr_to_module(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:742: in lower_jaxpr_to_module\n    lower_jaxpr_to_fun(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1037: in lower_jaxpr_to_fun\n    out_vals, tokens_out = jaxpr_subcomp(ctx.replace(name_stack=callee_name_stack),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1172: in jaxpr_subcomp\n    ans = rule(rule_ctx, *map(_unwrap_singleton_ir_values, in_nodes),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (LoweringRuleContext(module_context=ModuleContext(context=<jaxlib.mlir._mlir_libs._site_initialize.<locals>.Context ob...None, axis_size_env=None, dim_var_values=[]), <jaxlib.mlir._mlir_libs._mlir.ir.BlockArgument object at 0x7f097175d2f0>)\nkw = {'compute_left_eigenvectors': True, 'compute_right_eigenvectors': False}\n\n    def eig_lower(*args, **kw):\n>     raise NotImplementedError(\n        \"Nonsymmetric eigendecomposition is only implemented on the CPU backend. \"\n        \"If your matrix is symmetric or Hermitian, you should use eigh instead.\")\nE     NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:459: NotImplementedError"
            },
            "teardown": {
                "duration": 0.0003944320001210144,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig1",
            "lineno": 49,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004445670001587132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020131047000177205,
                "outcome": "failed",
                "crash": {
                    "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                    "lineno": 459,
                    "message": "NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead."
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/eig_test.py",
                        "lineno": 82,
                        "message": ""
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 103,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 144,
                        "message": "in eig"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 360,
                        "message": "in bind"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 363,
                        "message": "in bind_with_trace"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 817,
                        "message": "in process_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 451,
                        "message": "in eig_impl"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 117,
                        "message": "in apply_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 253,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 246,
                        "message": "in cached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 208,
                        "message": "in xla_primitive_callable"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 251,
                        "message": "in _xla_callable_uncached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 243,
                        "message": "in sharded_lowering"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py",
                        "lineno": 314,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py",
                        "lineno": 2551,
                        "message": "in lower_sharding_computation"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 742,
                        "message": "in lower_jaxpr_to_module"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1037,
                        "message": "in lower_jaxpr_to_fun"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1172,
                        "message": "in jaxpr_subcomp"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 459,
                        "message": "NotImplementedError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testEig1>\n",
                "longrepr": "#!/home/dunganhdinh2002/miniconda3/bin/python\n    # -*- coding: utf-8 -*-\n    import re\n    import sys\n    from pytest import console_main\n    if __name__ == \"__main__\":\n        sys.argv[0] = re.sub(r\"(-script\\.pyw|\\.exe)?$\", \"\", sys.argv[0])\n>       sys.exit(console_main())\n\n/home/dunganhdinh2002/miniconda3/bin/pytest:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def console_main() -> int:\n        \"\"\"The CLI entry point of pytest.\n    \n        This function is not meant for programmable use; use `main()` instead.\n        \"\"\"\n        # https://docs.python.org/3/library/signal.html#note-on-sigpipe\n        try:\n>           code = main()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:190: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def main(\n        args: Optional[Union[List[str], \"os.PathLike[str]\"]] = None,\n        plugins: Optional[Sequence[Union[str, _PluggyPlugin]]] = None,\n    ) -> Union[int, ExitCode]:\n        \"\"\"Perform an in-process test run.\n    \n        :param args: List of command line arguments.\n        :param plugins: List of plugin objects to be auto-registered during initialization.\n    \n        :returns: An exit code.\n        \"\"\"\n        try:\n            try:\n                config = _prepareconfig(args, plugins)\n            except ConftestImportFailure as e:\n                exc_info = ExceptionInfo.from_exc_info(e.excinfo)\n                tw = TerminalWriter(sys.stderr)\n                tw.line(f\"ImportError while loading conftest '{e.path}'.\", red=True)\n                exc_info.traceback = exc_info.traceback.filter(\n                    filter_traceback_for_conftest_import_failure\n                )\n                exc_repr = (\n                    exc_info.getrepr(style=\"short\", chain=False)\n                    if exc_info.traceback\n                    else exc_info.exconly()\n                )\n                formatted_tb = str(exc_repr)\n                for line in formatted_tb.splitlines():\n                    tw.line(line.rstrip(), red=True)\n                return ExitCode.USAGE_ERROR\n            else:\n                try:\n>                   ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n                        config=config\n                    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_cmdline_main(config: Config) -> Union[int, ExitCode]:\n>       return wrap_session(config, _main)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def wrap_session(\n        config: Config, doit: Callable[[Config, \"Session\"], Optional[Union[int, ExitCode]]]\n    ) -> Union[int, ExitCode]:\n        \"\"\"Skeleton command line program.\"\"\"\n        session = Session.from_config(config)\n        session.exitstatus = ExitCode.OK\n        initstate = 0\n        try:\n            try:\n                config._do_configure()\n                initstate = 1\n                config.hook.pytest_sessionstart(session=session)\n                initstate = 2\n>               session.exitstatus = doit(config, session) or 0\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _main(config: Config, session: \"Session\") -> Optional[Union[int, ExitCode]]:\n        \"\"\"Default command line protocol for initialization, session,\n        running tests and reporting.\"\"\"\n        config.hook.pytest_collection(session=session)\n>       config.hook.pytest_runtestloop(session=session)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtestloop(session: \"Session\") -> bool:\n        if session.testsfailed and not session.config.option.continue_on_collection_errors:\n            raise session.Interrupted(\n                \"%d error%s during collection\"\n                % (session.testsfailed, \"s\" if session.testsfailed != 1 else \"\")\n            )\n    \n        if session.config.option.collectonly:\n            return True\n    \n        for i, item in enumerate(session.items):\n            nextitem = session.items[i + 1] if i + 1 < len(session.items) else None\n>           item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_protocol(item: Item, nextitem: Optional[Item]) -> bool:\n        ihook = item.ihook\n        ihook.pytest_runtest_logstart(nodeid=item.nodeid, location=item.location)\n>       runtestprotocol(item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtestprotocol(\n        item: Item, log: bool = True, nextitem: Optional[Item] = None\n    ) -> List[TestReport]:\n        hasrequest = hasattr(item, \"_request\")\n        if hasrequest and not item._request:  # type: ignore[attr-defined]\n            # This only happens if the item is re-run, as is done by\n            # pytest-rerunfailures.\n            item._initrequest()  # type: ignore[attr-defined]\n        rep = call_and_report(item, \"setup\", log)\n        reports = [rep]\n        if rep.passed:\n            if item.config.getoption(\"setupshow\", False):\n                show_test_item(item)\n            if not item.config.getoption(\"setuponly\", False):\n>               reports.append(call_and_report(item, \"call\", log))\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_and_report(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", log: bool = True, **kwds\n    ) -> TestReport:\n>       call = call_runtest_hook(item, when, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_runtest_hook(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", **kwds\n    ) -> \"CallInfo[None]\":\n        if when == \"setup\":\n            ihook: Callable[..., None] = item.ihook.pytest_runtest_setup\n        elif when == \"call\":\n            ihook = item.ihook.pytest_runtest_call\n        elif when == \"teardown\":\n            ihook = item.ihook.pytest_runtest_teardown\n        else:\n            assert False, f\"Unhandled runtest hook case: {when}\"\n        reraise: Tuple[Type[BaseException], ...] = (Exit,)\n        if not item.config.getoption(\"usepdb\", False):\n            reraise += (KeyboardInterrupt,)\n>       return CallInfo.from_call(\n            lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n        )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n        except AttributeError:\n            pass\n        try:\n>           item.runtest()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtest(self) -> None:\n        from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n    \n        assert self._testcase is not None\n    \n        maybe_wrap_pytest_function_for_tracing(self)\n    \n        # Let the unittest framework handle async functions.\n        if is_async_function(self.obj):\n            # Type ignored because self acts as the TestResult, but is not actually one.\n            self._testcase(result=self)  # type: ignore[arg-type]\n        else:\n            # When --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug.\n            # Arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed.\n            # We need to consider if the test itself is skipped, or the whole class.\n            assert isinstance(self.parent, UnitTestCase)\n            skipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)\n            if self.config.getoption(\"usepdb\") and not skipped:\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)\n    \n            # We need to update the actual bound method with self.obj, because\n            # wrap_pytest_function_for_tracing replaces self.obj by a wrapper.\n            setattr(self._testcase, self.name, self.obj)\n            try:\n>               self._testcase(result=self)  # type: ignore[arg-type]\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwds):\n>       return self.run(*args, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:650: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def run(self, result=None):\n        if result is None:\n            result = self.defaultTestResult()\n            startTestRun = getattr(result, 'startTestRun', None)\n            stopTestRun = getattr(result, 'stopTestRun', None)\n            if startTestRun is not None:\n                startTestRun()\n        else:\n            stopTestRun = None\n    \n        result.startTest(self)\n        try:\n            testMethod = getattr(self, self._testMethodName)\n            if (getattr(self.__class__, \"__unittest_skip__\", False) or\n                getattr(testMethod, \"__unittest_skip__\", False)):\n                # If the class or method was skipped.\n                skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')\n                            or getattr(testMethod, '__unittest_skip_why__', ''))\n                self._addSkip(result, self, skip_why)\n                return result\n    \n            expecting_failure = (\n                getattr(self, \"__unittest_expecting_failure__\", False) or\n                getattr(testMethod, \"__unittest_expecting_failure__\", False)\n            )\n            outcome = _Outcome(result)\n            try:\n                self._outcome = outcome\n    \n                with outcome.testPartExecutor(self):\n                    self._callSetUp()\n                if outcome.success:\n                    outcome.expecting_failure = expecting_failure\n                    with outcome.testPartExecutor(self, isTest=True):\n>                       self._callTestMethod(testMethod)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:591: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _callTestMethod(self, method):\n>       method()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:549: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @functools.wraps(test_method)\n    def bound_param_test(self):\n      if isinstance(testcase_params, abc.Mapping):\n>       return test_method(self, **testcase_params)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/absl/testing/parameterized.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\nE           jax._src.source_info_util.JaxStackTraceBeforeTransformation: NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\nE           \nE           The preceding stack trace is the source of the JAX operation that, once transformed by JAX, triggered the following exception.\nE           \nE           --------------------\n\nsrc/jax_tests_reduced/eig_test.py:82: JaxStackTraceBeforeTransformation\n\nThe above exception was the direct cause of the following exception:\n\nself = <src.jax_tests_reduced.eig_test.NumpyLinalgTest testMethod=testEig1>, shape = (4, 4), dtype = <class 'numpy.complex64'>\ncompute_left_eigenvectors = True, compute_right_eigenvectors = False\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\n\nsrc/jax_tests_reduced/eig_test.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:103: in wrapped\n    return f(*pos_args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:144: in eig\n    return eig_p.bind(x, compute_left_eigenvectors=compute_left_eigenvectors,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:360: in bind\n    return self.bind_with_trace(find_top_trace(args), args, params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:363: in bind_with_trace\n    out = trace.process_primitive(self, map(trace.full_raise, args), params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:817: in process_primitive\n    return primitive.impl(*tracers, **params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:451: in eig_impl\n    return dispatch.apply_primitive(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:117: in apply_primitive\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:253: in wrapper\n    return cached(config._trace_context(), *args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:246: in cached\n    return f(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:208: in xla_primitive_callable\n    compiled = _xla_callable_uncached(lu.wrap_init(prim_fun), prim.name,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:251: in _xla_callable_uncached\n    computation = sharded_lowering(fun, name, donated_invars, keep_unused,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:243: in sharded_lowering\n    return pxla.lower_sharding_computation(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py:314: in wrapper\n    return func(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py:2551: in lower_sharding_computation\n    lowering_result = mlir.lower_jaxpr_to_module(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:742: in lower_jaxpr_to_module\n    lower_jaxpr_to_fun(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1037: in lower_jaxpr_to_fun\n    out_vals, tokens_out = jaxpr_subcomp(ctx.replace(name_stack=callee_name_stack),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1172: in jaxpr_subcomp\n    ans = rule(rule_ctx, *map(_unwrap_singleton_ir_values, in_nodes),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (LoweringRuleContext(module_context=ModuleContext(context=<jaxlib.mlir._mlir_libs._site_initialize.<locals>.Context ob...None, axis_size_env=None, dim_var_values=[]), <jaxlib.mlir._mlir_libs._mlir.ir.BlockArgument object at 0x7f06654df7f0>)\nkw = {'compute_left_eigenvectors': True, 'compute_right_eigenvectors': False}\n\n    def eig_lower(*args, **kw):\n>     raise NotImplementedError(\n        \"Nonsymmetric eigendecomposition is only implemented on the CPU backend. \"\n        \"If your matrix is symmetric or Hermitian, you should use eigh instead.\")\nE     NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:459: NotImplementedError"
            },
            "teardown": {
                "duration": 0.000459576999901401,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig2",
            "lineno": 49,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046990499981802714,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019660436000094705,
                "outcome": "failed",
                "crash": {
                    "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                    "lineno": 459,
                    "message": "NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead."
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/eig_test.py",
                        "lineno": 82,
                        "message": ""
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 103,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 144,
                        "message": "in eig"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 360,
                        "message": "in bind"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 363,
                        "message": "in bind_with_trace"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 817,
                        "message": "in process_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 451,
                        "message": "in eig_impl"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 117,
                        "message": "in apply_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 253,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 246,
                        "message": "in cached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 208,
                        "message": "in xla_primitive_callable"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 251,
                        "message": "in _xla_callable_uncached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 243,
                        "message": "in sharded_lowering"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py",
                        "lineno": 314,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py",
                        "lineno": 2551,
                        "message": "in lower_sharding_computation"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 742,
                        "message": "in lower_jaxpr_to_module"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1037,
                        "message": "in lower_jaxpr_to_fun"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1172,
                        "message": "in jaxpr_subcomp"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 459,
                        "message": "NotImplementedError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testEig2>\n",
                "longrepr": "#!/home/dunganhdinh2002/miniconda3/bin/python\n    # -*- coding: utf-8 -*-\n    import re\n    import sys\n    from pytest import console_main\n    if __name__ == \"__main__\":\n        sys.argv[0] = re.sub(r\"(-script\\.pyw|\\.exe)?$\", \"\", sys.argv[0])\n>       sys.exit(console_main())\n\n/home/dunganhdinh2002/miniconda3/bin/pytest:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def console_main() -> int:\n        \"\"\"The CLI entry point of pytest.\n    \n        This function is not meant for programmable use; use `main()` instead.\n        \"\"\"\n        # https://docs.python.org/3/library/signal.html#note-on-sigpipe\n        try:\n>           code = main()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:190: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def main(\n        args: Optional[Union[List[str], \"os.PathLike[str]\"]] = None,\n        plugins: Optional[Sequence[Union[str, _PluggyPlugin]]] = None,\n    ) -> Union[int, ExitCode]:\n        \"\"\"Perform an in-process test run.\n    \n        :param args: List of command line arguments.\n        :param plugins: List of plugin objects to be auto-registered during initialization.\n    \n        :returns: An exit code.\n        \"\"\"\n        try:\n            try:\n                config = _prepareconfig(args, plugins)\n            except ConftestImportFailure as e:\n                exc_info = ExceptionInfo.from_exc_info(e.excinfo)\n                tw = TerminalWriter(sys.stderr)\n                tw.line(f\"ImportError while loading conftest '{e.path}'.\", red=True)\n                exc_info.traceback = exc_info.traceback.filter(\n                    filter_traceback_for_conftest_import_failure\n                )\n                exc_repr = (\n                    exc_info.getrepr(style=\"short\", chain=False)\n                    if exc_info.traceback\n                    else exc_info.exconly()\n                )\n                formatted_tb = str(exc_repr)\n                for line in formatted_tb.splitlines():\n                    tw.line(line.rstrip(), red=True)\n                return ExitCode.USAGE_ERROR\n            else:\n                try:\n>                   ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n                        config=config\n                    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_cmdline_main(config: Config) -> Union[int, ExitCode]:\n>       return wrap_session(config, _main)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def wrap_session(\n        config: Config, doit: Callable[[Config, \"Session\"], Optional[Union[int, ExitCode]]]\n    ) -> Union[int, ExitCode]:\n        \"\"\"Skeleton command line program.\"\"\"\n        session = Session.from_config(config)\n        session.exitstatus = ExitCode.OK\n        initstate = 0\n        try:\n            try:\n                config._do_configure()\n                initstate = 1\n                config.hook.pytest_sessionstart(session=session)\n                initstate = 2\n>               session.exitstatus = doit(config, session) or 0\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _main(config: Config, session: \"Session\") -> Optional[Union[int, ExitCode]]:\n        \"\"\"Default command line protocol for initialization, session,\n        running tests and reporting.\"\"\"\n        config.hook.pytest_collection(session=session)\n>       config.hook.pytest_runtestloop(session=session)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtestloop(session: \"Session\") -> bool:\n        if session.testsfailed and not session.config.option.continue_on_collection_errors:\n            raise session.Interrupted(\n                \"%d error%s during collection\"\n                % (session.testsfailed, \"s\" if session.testsfailed != 1 else \"\")\n            )\n    \n        if session.config.option.collectonly:\n            return True\n    \n        for i, item in enumerate(session.items):\n            nextitem = session.items[i + 1] if i + 1 < len(session.items) else None\n>           item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_protocol(item: Item, nextitem: Optional[Item]) -> bool:\n        ihook = item.ihook\n        ihook.pytest_runtest_logstart(nodeid=item.nodeid, location=item.location)\n>       runtestprotocol(item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtestprotocol(\n        item: Item, log: bool = True, nextitem: Optional[Item] = None\n    ) -> List[TestReport]:\n        hasrequest = hasattr(item, \"_request\")\n        if hasrequest and not item._request:  # type: ignore[attr-defined]\n            # This only happens if the item is re-run, as is done by\n            # pytest-rerunfailures.\n            item._initrequest()  # type: ignore[attr-defined]\n        rep = call_and_report(item, \"setup\", log)\n        reports = [rep]\n        if rep.passed:\n            if item.config.getoption(\"setupshow\", False):\n                show_test_item(item)\n            if not item.config.getoption(\"setuponly\", False):\n>               reports.append(call_and_report(item, \"call\", log))\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_and_report(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", log: bool = True, **kwds\n    ) -> TestReport:\n>       call = call_runtest_hook(item, when, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_runtest_hook(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", **kwds\n    ) -> \"CallInfo[None]\":\n        if when == \"setup\":\n            ihook: Callable[..., None] = item.ihook.pytest_runtest_setup\n        elif when == \"call\":\n            ihook = item.ihook.pytest_runtest_call\n        elif when == \"teardown\":\n            ihook = item.ihook.pytest_runtest_teardown\n        else:\n            assert False, f\"Unhandled runtest hook case: {when}\"\n        reraise: Tuple[Type[BaseException], ...] = (Exit,)\n        if not item.config.getoption(\"usepdb\", False):\n            reraise += (KeyboardInterrupt,)\n>       return CallInfo.from_call(\n            lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n        )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n        except AttributeError:\n            pass\n        try:\n>           item.runtest()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtest(self) -> None:\n        from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n    \n        assert self._testcase is not None\n    \n        maybe_wrap_pytest_function_for_tracing(self)\n    \n        # Let the unittest framework handle async functions.\n        if is_async_function(self.obj):\n            # Type ignored because self acts as the TestResult, but is not actually one.\n            self._testcase(result=self)  # type: ignore[arg-type]\n        else:\n            # When --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug.\n            # Arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed.\n            # We need to consider if the test itself is skipped, or the whole class.\n            assert isinstance(self.parent, UnitTestCase)\n            skipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)\n            if self.config.getoption(\"usepdb\") and not skipped:\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)\n    \n            # We need to update the actual bound method with self.obj, because\n            # wrap_pytest_function_for_tracing replaces self.obj by a wrapper.\n            setattr(self._testcase, self.name, self.obj)\n            try:\n>               self._testcase(result=self)  # type: ignore[arg-type]\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwds):\n>       return self.run(*args, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:650: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def run(self, result=None):\n        if result is None:\n            result = self.defaultTestResult()\n            startTestRun = getattr(result, 'startTestRun', None)\n            stopTestRun = getattr(result, 'stopTestRun', None)\n            if startTestRun is not None:\n                startTestRun()\n        else:\n            stopTestRun = None\n    \n        result.startTest(self)\n        try:\n            testMethod = getattr(self, self._testMethodName)\n            if (getattr(self.__class__, \"__unittest_skip__\", False) or\n                getattr(testMethod, \"__unittest_skip__\", False)):\n                # If the class or method was skipped.\n                skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')\n                            or getattr(testMethod, '__unittest_skip_why__', ''))\n                self._addSkip(result, self, skip_why)\n                return result\n    \n            expecting_failure = (\n                getattr(self, \"__unittest_expecting_failure__\", False) or\n                getattr(testMethod, \"__unittest_expecting_failure__\", False)\n            )\n            outcome = _Outcome(result)\n            try:\n                self._outcome = outcome\n    \n                with outcome.testPartExecutor(self):\n                    self._callSetUp()\n                if outcome.success:\n                    outcome.expecting_failure = expecting_failure\n                    with outcome.testPartExecutor(self, isTest=True):\n>                       self._callTestMethod(testMethod)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:591: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _callTestMethod(self, method):\n>       method()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:549: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @functools.wraps(test_method)\n    def bound_param_test(self):\n      if isinstance(testcase_params, abc.Mapping):\n>       return test_method(self, **testcase_params)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/absl/testing/parameterized.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\nE           jax._src.source_info_util.JaxStackTraceBeforeTransformation: NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\nE           \nE           The preceding stack trace is the source of the JAX operation that, once transformed by JAX, triggered the following exception.\nE           \nE           --------------------\n\nsrc/jax_tests_reduced/eig_test.py:82: JaxStackTraceBeforeTransformation\n\nThe above exception was the direct cause of the following exception:\n\nself = <src.jax_tests_reduced.eig_test.NumpyLinalgTest testMethod=testEig2>, shape = (0, 0), dtype = <class 'numpy.complex64'>\ncompute_left_eigenvectors = True, compute_right_eigenvectors = False\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\n\nsrc/jax_tests_reduced/eig_test.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:103: in wrapped\n    return f(*pos_args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:144: in eig\n    return eig_p.bind(x, compute_left_eigenvectors=compute_left_eigenvectors,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:360: in bind\n    return self.bind_with_trace(find_top_trace(args), args, params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:363: in bind_with_trace\n    out = trace.process_primitive(self, map(trace.full_raise, args), params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:817: in process_primitive\n    return primitive.impl(*tracers, **params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:451: in eig_impl\n    return dispatch.apply_primitive(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:117: in apply_primitive\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:253: in wrapper\n    return cached(config._trace_context(), *args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:246: in cached\n    return f(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:208: in xla_primitive_callable\n    compiled = _xla_callable_uncached(lu.wrap_init(prim_fun), prim.name,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:251: in _xla_callable_uncached\n    computation = sharded_lowering(fun, name, donated_invars, keep_unused,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:243: in sharded_lowering\n    return pxla.lower_sharding_computation(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py:314: in wrapper\n    return func(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py:2551: in lower_sharding_computation\n    lowering_result = mlir.lower_jaxpr_to_module(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:742: in lower_jaxpr_to_module\n    lower_jaxpr_to_fun(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1037: in lower_jaxpr_to_fun\n    out_vals, tokens_out = jaxpr_subcomp(ctx.replace(name_stack=callee_name_stack),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1172: in jaxpr_subcomp\n    ans = rule(rule_ctx, *map(_unwrap_singleton_ir_values, in_nodes),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (LoweringRuleContext(module_context=ModuleContext(context=<jaxlib.mlir._mlir_libs._site_initialize.<locals>.Context ob...None, axis_size_env=None, dim_var_values=[]), <jaxlib.mlir._mlir_libs._mlir.ir.BlockArgument object at 0x7f09a02fb830>)\nkw = {'compute_left_eigenvectors': True, 'compute_right_eigenvectors': False}\n\n    def eig_lower(*args, **kw):\n>     raise NotImplementedError(\n        \"Nonsymmetric eigendecomposition is only implemented on the CPU backend. \"\n        \"If your matrix is symmetric or Hermitian, you should use eigh instead.\")\nE     NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:459: NotImplementedError"
            },
            "teardown": {
                "duration": 0.0003966029998991871,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig3",
            "lineno": 49,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005063939997853595,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019701981000025626,
                "outcome": "failed",
                "crash": {
                    "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                    "lineno": 459,
                    "message": "NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead."
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/eig_test.py",
                        "lineno": 82,
                        "message": ""
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 103,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 144,
                        "message": "in eig"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 360,
                        "message": "in bind"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 363,
                        "message": "in bind_with_trace"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 817,
                        "message": "in process_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 451,
                        "message": "in eig_impl"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 117,
                        "message": "in apply_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 253,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 246,
                        "message": "in cached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 208,
                        "message": "in xla_primitive_callable"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 251,
                        "message": "in _xla_callable_uncached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 243,
                        "message": "in sharded_lowering"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py",
                        "lineno": 314,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py",
                        "lineno": 2551,
                        "message": "in lower_sharding_computation"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 742,
                        "message": "in lower_jaxpr_to_module"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1037,
                        "message": "in lower_jaxpr_to_fun"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1172,
                        "message": "in jaxpr_subcomp"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 459,
                        "message": "NotImplementedError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testEig3>\n",
                "longrepr": "#!/home/dunganhdinh2002/miniconda3/bin/python\n    # -*- coding: utf-8 -*-\n    import re\n    import sys\n    from pytest import console_main\n    if __name__ == \"__main__\":\n        sys.argv[0] = re.sub(r\"(-script\\.pyw|\\.exe)?$\", \"\", sys.argv[0])\n>       sys.exit(console_main())\n\n/home/dunganhdinh2002/miniconda3/bin/pytest:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def console_main() -> int:\n        \"\"\"The CLI entry point of pytest.\n    \n        This function is not meant for programmable use; use `main()` instead.\n        \"\"\"\n        # https://docs.python.org/3/library/signal.html#note-on-sigpipe\n        try:\n>           code = main()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:190: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def main(\n        args: Optional[Union[List[str], \"os.PathLike[str]\"]] = None,\n        plugins: Optional[Sequence[Union[str, _PluggyPlugin]]] = None,\n    ) -> Union[int, ExitCode]:\n        \"\"\"Perform an in-process test run.\n    \n        :param args: List of command line arguments.\n        :param plugins: List of plugin objects to be auto-registered during initialization.\n    \n        :returns: An exit code.\n        \"\"\"\n        try:\n            try:\n                config = _prepareconfig(args, plugins)\n            except ConftestImportFailure as e:\n                exc_info = ExceptionInfo.from_exc_info(e.excinfo)\n                tw = TerminalWriter(sys.stderr)\n                tw.line(f\"ImportError while loading conftest '{e.path}'.\", red=True)\n                exc_info.traceback = exc_info.traceback.filter(\n                    filter_traceback_for_conftest_import_failure\n                )\n                exc_repr = (\n                    exc_info.getrepr(style=\"short\", chain=False)\n                    if exc_info.traceback\n                    else exc_info.exconly()\n                )\n                formatted_tb = str(exc_repr)\n                for line in formatted_tb.splitlines():\n                    tw.line(line.rstrip(), red=True)\n                return ExitCode.USAGE_ERROR\n            else:\n                try:\n>                   ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n                        config=config\n                    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_cmdline_main(config: Config) -> Union[int, ExitCode]:\n>       return wrap_session(config, _main)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def wrap_session(\n        config: Config, doit: Callable[[Config, \"Session\"], Optional[Union[int, ExitCode]]]\n    ) -> Union[int, ExitCode]:\n        \"\"\"Skeleton command line program.\"\"\"\n        session = Session.from_config(config)\n        session.exitstatus = ExitCode.OK\n        initstate = 0\n        try:\n            try:\n                config._do_configure()\n                initstate = 1\n                config.hook.pytest_sessionstart(session=session)\n                initstate = 2\n>               session.exitstatus = doit(config, session) or 0\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _main(config: Config, session: \"Session\") -> Optional[Union[int, ExitCode]]:\n        \"\"\"Default command line protocol for initialization, session,\n        running tests and reporting.\"\"\"\n        config.hook.pytest_collection(session=session)\n>       config.hook.pytest_runtestloop(session=session)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtestloop(session: \"Session\") -> bool:\n        if session.testsfailed and not session.config.option.continue_on_collection_errors:\n            raise session.Interrupted(\n                \"%d error%s during collection\"\n                % (session.testsfailed, \"s\" if session.testsfailed != 1 else \"\")\n            )\n    \n        if session.config.option.collectonly:\n            return True\n    \n        for i, item in enumerate(session.items):\n            nextitem = session.items[i + 1] if i + 1 < len(session.items) else None\n>           item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_protocol(item: Item, nextitem: Optional[Item]) -> bool:\n        ihook = item.ihook\n        ihook.pytest_runtest_logstart(nodeid=item.nodeid, location=item.location)\n>       runtestprotocol(item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtestprotocol(\n        item: Item, log: bool = True, nextitem: Optional[Item] = None\n    ) -> List[TestReport]:\n        hasrequest = hasattr(item, \"_request\")\n        if hasrequest and not item._request:  # type: ignore[attr-defined]\n            # This only happens if the item is re-run, as is done by\n            # pytest-rerunfailures.\n            item._initrequest()  # type: ignore[attr-defined]\n        rep = call_and_report(item, \"setup\", log)\n        reports = [rep]\n        if rep.passed:\n            if item.config.getoption(\"setupshow\", False):\n                show_test_item(item)\n            if not item.config.getoption(\"setuponly\", False):\n>               reports.append(call_and_report(item, \"call\", log))\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_and_report(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", log: bool = True, **kwds\n    ) -> TestReport:\n>       call = call_runtest_hook(item, when, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_runtest_hook(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", **kwds\n    ) -> \"CallInfo[None]\":\n        if when == \"setup\":\n            ihook: Callable[..., None] = item.ihook.pytest_runtest_setup\n        elif when == \"call\":\n            ihook = item.ihook.pytest_runtest_call\n        elif when == \"teardown\":\n            ihook = item.ihook.pytest_runtest_teardown\n        else:\n            assert False, f\"Unhandled runtest hook case: {when}\"\n        reraise: Tuple[Type[BaseException], ...] = (Exit,)\n        if not item.config.getoption(\"usepdb\", False):\n            reraise += (KeyboardInterrupt,)\n>       return CallInfo.from_call(\n            lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n        )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n        except AttributeError:\n            pass\n        try:\n>           item.runtest()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtest(self) -> None:\n        from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n    \n        assert self._testcase is not None\n    \n        maybe_wrap_pytest_function_for_tracing(self)\n    \n        # Let the unittest framework handle async functions.\n        if is_async_function(self.obj):\n            # Type ignored because self acts as the TestResult, but is not actually one.\n            self._testcase(result=self)  # type: ignore[arg-type]\n        else:\n            # When --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug.\n            # Arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed.\n            # We need to consider if the test itself is skipped, or the whole class.\n            assert isinstance(self.parent, UnitTestCase)\n            skipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)\n            if self.config.getoption(\"usepdb\") and not skipped:\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)\n    \n            # We need to update the actual bound method with self.obj, because\n            # wrap_pytest_function_for_tracing replaces self.obj by a wrapper.\n            setattr(self._testcase, self.name, self.obj)\n            try:\n>               self._testcase(result=self)  # type: ignore[arg-type]\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwds):\n>       return self.run(*args, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:650: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def run(self, result=None):\n        if result is None:\n            result = self.defaultTestResult()\n            startTestRun = getattr(result, 'startTestRun', None)\n            stopTestRun = getattr(result, 'stopTestRun', None)\n            if startTestRun is not None:\n                startTestRun()\n        else:\n            stopTestRun = None\n    \n        result.startTest(self)\n        try:\n            testMethod = getattr(self, self._testMethodName)\n            if (getattr(self.__class__, \"__unittest_skip__\", False) or\n                getattr(testMethod, \"__unittest_skip__\", False)):\n                # If the class or method was skipped.\n                skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')\n                            or getattr(testMethod, '__unittest_skip_why__', ''))\n                self._addSkip(result, self, skip_why)\n                return result\n    \n            expecting_failure = (\n                getattr(self, \"__unittest_expecting_failure__\", False) or\n                getattr(testMethod, \"__unittest_expecting_failure__\", False)\n            )\n            outcome = _Outcome(result)\n            try:\n                self._outcome = outcome\n    \n                with outcome.testPartExecutor(self):\n                    self._callSetUp()\n                if outcome.success:\n                    outcome.expecting_failure = expecting_failure\n                    with outcome.testPartExecutor(self, isTest=True):\n>                       self._callTestMethod(testMethod)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:591: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _callTestMethod(self, method):\n>       method()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:549: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @functools.wraps(test_method)\n    def bound_param_test(self):\n      if isinstance(testcase_params, abc.Mapping):\n>       return test_method(self, **testcase_params)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/absl/testing/parameterized.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\nE           jax._src.source_info_util.JaxStackTraceBeforeTransformation: NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\nE           \nE           The preceding stack trace is the source of the JAX operation that, once transformed by JAX, triggered the following exception.\nE           \nE           --------------------\n\nsrc/jax_tests_reduced/eig_test.py:82: JaxStackTraceBeforeTransformation\n\nThe above exception was the direct cause of the following exception:\n\nself = <src.jax_tests_reduced.eig_test.NumpyLinalgTest testMethod=testEig3>, shape = (4, 4), dtype = <class 'numpy.complex64'>\ncompute_left_eigenvectors = False, compute_right_eigenvectors = True\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\n\nsrc/jax_tests_reduced/eig_test.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:103: in wrapped\n    return f(*pos_args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:144: in eig\n    return eig_p.bind(x, compute_left_eigenvectors=compute_left_eigenvectors,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:360: in bind\n    return self.bind_with_trace(find_top_trace(args), args, params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:363: in bind_with_trace\n    out = trace.process_primitive(self, map(trace.full_raise, args), params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:817: in process_primitive\n    return primitive.impl(*tracers, **params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:451: in eig_impl\n    return dispatch.apply_primitive(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:117: in apply_primitive\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:253: in wrapper\n    return cached(config._trace_context(), *args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:246: in cached\n    return f(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:208: in xla_primitive_callable\n    compiled = _xla_callable_uncached(lu.wrap_init(prim_fun), prim.name,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:251: in _xla_callable_uncached\n    computation = sharded_lowering(fun, name, donated_invars, keep_unused,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:243: in sharded_lowering\n    return pxla.lower_sharding_computation(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py:314: in wrapper\n    return func(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py:2551: in lower_sharding_computation\n    lowering_result = mlir.lower_jaxpr_to_module(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:742: in lower_jaxpr_to_module\n    lower_jaxpr_to_fun(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1037: in lower_jaxpr_to_fun\n    out_vals, tokens_out = jaxpr_subcomp(ctx.replace(name_stack=callee_name_stack),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1172: in jaxpr_subcomp\n    ans = rule(rule_ctx, *map(_unwrap_singleton_ir_values, in_nodes),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (LoweringRuleContext(module_context=ModuleContext(context=<jaxlib.mlir._mlir_libs._site_initialize.<locals>.Context ob...None, axis_size_env=None, dim_var_values=[]), <jaxlib.mlir._mlir_libs._mlir.ir.BlockArgument object at 0x7f066585abb0>)\nkw = {'compute_left_eigenvectors': False, 'compute_right_eigenvectors': True}\n\n    def eig_lower(*args, **kw):\n>     raise NotImplementedError(\n        \"Nonsymmetric eigendecomposition is only implemented on the CPU backend. \"\n        \"If your matrix is symmetric or Hermitian, you should use eigh instead.\")\nE     NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:459: NotImplementedError"
            },
            "teardown": {
                "duration": 0.0004140500000175962,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig4",
            "lineno": 49,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004752899999402871,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01911266299998715,
                "outcome": "failed",
                "crash": {
                    "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                    "lineno": 459,
                    "message": "NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead."
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/eig_test.py",
                        "lineno": 82,
                        "message": ""
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 103,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 144,
                        "message": "in eig"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 360,
                        "message": "in bind"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 363,
                        "message": "in bind_with_trace"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 817,
                        "message": "in process_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 451,
                        "message": "in eig_impl"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 117,
                        "message": "in apply_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 253,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 246,
                        "message": "in cached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 208,
                        "message": "in xla_primitive_callable"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 251,
                        "message": "in _xla_callable_uncached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 243,
                        "message": "in sharded_lowering"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py",
                        "lineno": 314,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py",
                        "lineno": 2551,
                        "message": "in lower_sharding_computation"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 742,
                        "message": "in lower_jaxpr_to_module"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1037,
                        "message": "in lower_jaxpr_to_fun"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1172,
                        "message": "in jaxpr_subcomp"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 459,
                        "message": "NotImplementedError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testEig4>\n",
                "longrepr": "#!/home/dunganhdinh2002/miniconda3/bin/python\n    # -*- coding: utf-8 -*-\n    import re\n    import sys\n    from pytest import console_main\n    if __name__ == \"__main__\":\n        sys.argv[0] = re.sub(r\"(-script\\.pyw|\\.exe)?$\", \"\", sys.argv[0])\n>       sys.exit(console_main())\n\n/home/dunganhdinh2002/miniconda3/bin/pytest:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def console_main() -> int:\n        \"\"\"The CLI entry point of pytest.\n    \n        This function is not meant for programmable use; use `main()` instead.\n        \"\"\"\n        # https://docs.python.org/3/library/signal.html#note-on-sigpipe\n        try:\n>           code = main()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:190: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def main(\n        args: Optional[Union[List[str], \"os.PathLike[str]\"]] = None,\n        plugins: Optional[Sequence[Union[str, _PluggyPlugin]]] = None,\n    ) -> Union[int, ExitCode]:\n        \"\"\"Perform an in-process test run.\n    \n        :param args: List of command line arguments.\n        :param plugins: List of plugin objects to be auto-registered during initialization.\n    \n        :returns: An exit code.\n        \"\"\"\n        try:\n            try:\n                config = _prepareconfig(args, plugins)\n            except ConftestImportFailure as e:\n                exc_info = ExceptionInfo.from_exc_info(e.excinfo)\n                tw = TerminalWriter(sys.stderr)\n                tw.line(f\"ImportError while loading conftest '{e.path}'.\", red=True)\n                exc_info.traceback = exc_info.traceback.filter(\n                    filter_traceback_for_conftest_import_failure\n                )\n                exc_repr = (\n                    exc_info.getrepr(style=\"short\", chain=False)\n                    if exc_info.traceback\n                    else exc_info.exconly()\n                )\n                formatted_tb = str(exc_repr)\n                for line in formatted_tb.splitlines():\n                    tw.line(line.rstrip(), red=True)\n                return ExitCode.USAGE_ERROR\n            else:\n                try:\n>                   ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n                        config=config\n                    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_cmdline_main(config: Config) -> Union[int, ExitCode]:\n>       return wrap_session(config, _main)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def wrap_session(\n        config: Config, doit: Callable[[Config, \"Session\"], Optional[Union[int, ExitCode]]]\n    ) -> Union[int, ExitCode]:\n        \"\"\"Skeleton command line program.\"\"\"\n        session = Session.from_config(config)\n        session.exitstatus = ExitCode.OK\n        initstate = 0\n        try:\n            try:\n                config._do_configure()\n                initstate = 1\n                config.hook.pytest_sessionstart(session=session)\n                initstate = 2\n>               session.exitstatus = doit(config, session) or 0\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _main(config: Config, session: \"Session\") -> Optional[Union[int, ExitCode]]:\n        \"\"\"Default command line protocol for initialization, session,\n        running tests and reporting.\"\"\"\n        config.hook.pytest_collection(session=session)\n>       config.hook.pytest_runtestloop(session=session)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtestloop(session: \"Session\") -> bool:\n        if session.testsfailed and not session.config.option.continue_on_collection_errors:\n            raise session.Interrupted(\n                \"%d error%s during collection\"\n                % (session.testsfailed, \"s\" if session.testsfailed != 1 else \"\")\n            )\n    \n        if session.config.option.collectonly:\n            return True\n    \n        for i, item in enumerate(session.items):\n            nextitem = session.items[i + 1] if i + 1 < len(session.items) else None\n>           item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_protocol(item: Item, nextitem: Optional[Item]) -> bool:\n        ihook = item.ihook\n        ihook.pytest_runtest_logstart(nodeid=item.nodeid, location=item.location)\n>       runtestprotocol(item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtestprotocol(\n        item: Item, log: bool = True, nextitem: Optional[Item] = None\n    ) -> List[TestReport]:\n        hasrequest = hasattr(item, \"_request\")\n        if hasrequest and not item._request:  # type: ignore[attr-defined]\n            # This only happens if the item is re-run, as is done by\n            # pytest-rerunfailures.\n            item._initrequest()  # type: ignore[attr-defined]\n        rep = call_and_report(item, \"setup\", log)\n        reports = [rep]\n        if rep.passed:\n            if item.config.getoption(\"setupshow\", False):\n                show_test_item(item)\n            if not item.config.getoption(\"setuponly\", False):\n>               reports.append(call_and_report(item, \"call\", log))\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_and_report(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", log: bool = True, **kwds\n    ) -> TestReport:\n>       call = call_runtest_hook(item, when, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_runtest_hook(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", **kwds\n    ) -> \"CallInfo[None]\":\n        if when == \"setup\":\n            ihook: Callable[..., None] = item.ihook.pytest_runtest_setup\n        elif when == \"call\":\n            ihook = item.ihook.pytest_runtest_call\n        elif when == \"teardown\":\n            ihook = item.ihook.pytest_runtest_teardown\n        else:\n            assert False, f\"Unhandled runtest hook case: {when}\"\n        reraise: Tuple[Type[BaseException], ...] = (Exit,)\n        if not item.config.getoption(\"usepdb\", False):\n            reraise += (KeyboardInterrupt,)\n>       return CallInfo.from_call(\n            lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n        )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n        except AttributeError:\n            pass\n        try:\n>           item.runtest()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtest(self) -> None:\n        from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n    \n        assert self._testcase is not None\n    \n        maybe_wrap_pytest_function_for_tracing(self)\n    \n        # Let the unittest framework handle async functions.\n        if is_async_function(self.obj):\n            # Type ignored because self acts as the TestResult, but is not actually one.\n            self._testcase(result=self)  # type: ignore[arg-type]\n        else:\n            # When --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug.\n            # Arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed.\n            # We need to consider if the test itself is skipped, or the whole class.\n            assert isinstance(self.parent, UnitTestCase)\n            skipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)\n            if self.config.getoption(\"usepdb\") and not skipped:\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)\n    \n            # We need to update the actual bound method with self.obj, because\n            # wrap_pytest_function_for_tracing replaces self.obj by a wrapper.\n            setattr(self._testcase, self.name, self.obj)\n            try:\n>               self._testcase(result=self)  # type: ignore[arg-type]\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwds):\n>       return self.run(*args, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:650: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def run(self, result=None):\n        if result is None:\n            result = self.defaultTestResult()\n            startTestRun = getattr(result, 'startTestRun', None)\n            stopTestRun = getattr(result, 'stopTestRun', None)\n            if startTestRun is not None:\n                startTestRun()\n        else:\n            stopTestRun = None\n    \n        result.startTest(self)\n        try:\n            testMethod = getattr(self, self._testMethodName)\n            if (getattr(self.__class__, \"__unittest_skip__\", False) or\n                getattr(testMethod, \"__unittest_skip__\", False)):\n                # If the class or method was skipped.\n                skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')\n                            or getattr(testMethod, '__unittest_skip_why__', ''))\n                self._addSkip(result, self, skip_why)\n                return result\n    \n            expecting_failure = (\n                getattr(self, \"__unittest_expecting_failure__\", False) or\n                getattr(testMethod, \"__unittest_expecting_failure__\", False)\n            )\n            outcome = _Outcome(result)\n            try:\n                self._outcome = outcome\n    \n                with outcome.testPartExecutor(self):\n                    self._callSetUp()\n                if outcome.success:\n                    outcome.expecting_failure = expecting_failure\n                    with outcome.testPartExecutor(self, isTest=True):\n>                       self._callTestMethod(testMethod)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:591: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _callTestMethod(self, method):\n>       method()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:549: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @functools.wraps(test_method)\n    def bound_param_test(self):\n      if isinstance(testcase_params, abc.Mapping):\n>       return test_method(self, **testcase_params)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/absl/testing/parameterized.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\nE           jax._src.source_info_util.JaxStackTraceBeforeTransformation: NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\nE           \nE           The preceding stack trace is the source of the JAX operation that, once transformed by JAX, triggered the following exception.\nE           \nE           --------------------\n\nsrc/jax_tests_reduced/eig_test.py:82: JaxStackTraceBeforeTransformation\n\nThe above exception was the direct cause of the following exception:\n\nself = <src.jax_tests_reduced.eig_test.NumpyLinalgTest testMethod=testEig4>, shape = (2, 6, 6), dtype = <class 'numpy.float32'>\ncompute_left_eigenvectors = False, compute_right_eigenvectors = False\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\n\nsrc/jax_tests_reduced/eig_test.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:103: in wrapped\n    return f(*pos_args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:144: in eig\n    return eig_p.bind(x, compute_left_eigenvectors=compute_left_eigenvectors,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:360: in bind\n    return self.bind_with_trace(find_top_trace(args), args, params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:363: in bind_with_trace\n    out = trace.process_primitive(self, map(trace.full_raise, args), params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:817: in process_primitive\n    return primitive.impl(*tracers, **params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:451: in eig_impl\n    return dispatch.apply_primitive(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:117: in apply_primitive\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:253: in wrapper\n    return cached(config._trace_context(), *args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:246: in cached\n    return f(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:208: in xla_primitive_callable\n    compiled = _xla_callable_uncached(lu.wrap_init(prim_fun), prim.name,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:251: in _xla_callable_uncached\n    computation = sharded_lowering(fun, name, donated_invars, keep_unused,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:243: in sharded_lowering\n    return pxla.lower_sharding_computation(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py:314: in wrapper\n    return func(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py:2551: in lower_sharding_computation\n    lowering_result = mlir.lower_jaxpr_to_module(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:742: in lower_jaxpr_to_module\n    lower_jaxpr_to_fun(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1037: in lower_jaxpr_to_fun\n    out_vals, tokens_out = jaxpr_subcomp(ctx.replace(name_stack=callee_name_stack),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1172: in jaxpr_subcomp\n    ans = rule(rule_ctx, *map(_unwrap_singleton_ir_values, in_nodes),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (LoweringRuleContext(module_context=ModuleContext(context=<jaxlib.mlir._mlir_libs._site_initialize.<locals>.Context ob...None, axis_size_env=None, dim_var_values=[]), <jaxlib.mlir._mlir_libs._mlir.ir.BlockArgument object at 0x7f097014d9b0>)\nkw = {'compute_left_eigenvectors': False, 'compute_right_eigenvectors': False}\n\n    def eig_lower(*args, **kw):\n>     raise NotImplementedError(\n        \"Nonsymmetric eigendecomposition is only implemented on the CPU backend. \"\n        \"If your matrix is symmetric or Hermitian, you should use eigh instead.\")\nE     NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:459: NotImplementedError"
            },
            "teardown": {
                "duration": 0.000397312000131933,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig5",
            "lineno": 49,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046624899982816714,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019850750000159678,
                "outcome": "failed",
                "crash": {
                    "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                    "lineno": 459,
                    "message": "NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead."
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/eig_test.py",
                        "lineno": 82,
                        "message": ""
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 103,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 144,
                        "message": "in eig"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 360,
                        "message": "in bind"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 363,
                        "message": "in bind_with_trace"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 817,
                        "message": "in process_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 451,
                        "message": "in eig_impl"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 117,
                        "message": "in apply_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 253,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 246,
                        "message": "in cached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 208,
                        "message": "in xla_primitive_callable"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 251,
                        "message": "in _xla_callable_uncached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 243,
                        "message": "in sharded_lowering"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py",
                        "lineno": 314,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py",
                        "lineno": 2551,
                        "message": "in lower_sharding_computation"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 742,
                        "message": "in lower_jaxpr_to_module"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1037,
                        "message": "in lower_jaxpr_to_fun"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1172,
                        "message": "in jaxpr_subcomp"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 459,
                        "message": "NotImplementedError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testEig5>\n",
                "longrepr": "#!/home/dunganhdinh2002/miniconda3/bin/python\n    # -*- coding: utf-8 -*-\n    import re\n    import sys\n    from pytest import console_main\n    if __name__ == \"__main__\":\n        sys.argv[0] = re.sub(r\"(-script\\.pyw|\\.exe)?$\", \"\", sys.argv[0])\n>       sys.exit(console_main())\n\n/home/dunganhdinh2002/miniconda3/bin/pytest:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def console_main() -> int:\n        \"\"\"The CLI entry point of pytest.\n    \n        This function is not meant for programmable use; use `main()` instead.\n        \"\"\"\n        # https://docs.python.org/3/library/signal.html#note-on-sigpipe\n        try:\n>           code = main()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:190: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def main(\n        args: Optional[Union[List[str], \"os.PathLike[str]\"]] = None,\n        plugins: Optional[Sequence[Union[str, _PluggyPlugin]]] = None,\n    ) -> Union[int, ExitCode]:\n        \"\"\"Perform an in-process test run.\n    \n        :param args: List of command line arguments.\n        :param plugins: List of plugin objects to be auto-registered during initialization.\n    \n        :returns: An exit code.\n        \"\"\"\n        try:\n            try:\n                config = _prepareconfig(args, plugins)\n            except ConftestImportFailure as e:\n                exc_info = ExceptionInfo.from_exc_info(e.excinfo)\n                tw = TerminalWriter(sys.stderr)\n                tw.line(f\"ImportError while loading conftest '{e.path}'.\", red=True)\n                exc_info.traceback = exc_info.traceback.filter(\n                    filter_traceback_for_conftest_import_failure\n                )\n                exc_repr = (\n                    exc_info.getrepr(style=\"short\", chain=False)\n                    if exc_info.traceback\n                    else exc_info.exconly()\n                )\n                formatted_tb = str(exc_repr)\n                for line in formatted_tb.splitlines():\n                    tw.line(line.rstrip(), red=True)\n                return ExitCode.USAGE_ERROR\n            else:\n                try:\n>                   ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n                        config=config\n                    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_cmdline_main(config: Config) -> Union[int, ExitCode]:\n>       return wrap_session(config, _main)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def wrap_session(\n        config: Config, doit: Callable[[Config, \"Session\"], Optional[Union[int, ExitCode]]]\n    ) -> Union[int, ExitCode]:\n        \"\"\"Skeleton command line program.\"\"\"\n        session = Session.from_config(config)\n        session.exitstatus = ExitCode.OK\n        initstate = 0\n        try:\n            try:\n                config._do_configure()\n                initstate = 1\n                config.hook.pytest_sessionstart(session=session)\n                initstate = 2\n>               session.exitstatus = doit(config, session) or 0\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _main(config: Config, session: \"Session\") -> Optional[Union[int, ExitCode]]:\n        \"\"\"Default command line protocol for initialization, session,\n        running tests and reporting.\"\"\"\n        config.hook.pytest_collection(session=session)\n>       config.hook.pytest_runtestloop(session=session)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtestloop(session: \"Session\") -> bool:\n        if session.testsfailed and not session.config.option.continue_on_collection_errors:\n            raise session.Interrupted(\n                \"%d error%s during collection\"\n                % (session.testsfailed, \"s\" if session.testsfailed != 1 else \"\")\n            )\n    \n        if session.config.option.collectonly:\n            return True\n    \n        for i, item in enumerate(session.items):\n            nextitem = session.items[i + 1] if i + 1 < len(session.items) else None\n>           item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_protocol(item: Item, nextitem: Optional[Item]) -> bool:\n        ihook = item.ihook\n        ihook.pytest_runtest_logstart(nodeid=item.nodeid, location=item.location)\n>       runtestprotocol(item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtestprotocol(\n        item: Item, log: bool = True, nextitem: Optional[Item] = None\n    ) -> List[TestReport]:\n        hasrequest = hasattr(item, \"_request\")\n        if hasrequest and not item._request:  # type: ignore[attr-defined]\n            # This only happens if the item is re-run, as is done by\n            # pytest-rerunfailures.\n            item._initrequest()  # type: ignore[attr-defined]\n        rep = call_and_report(item, \"setup\", log)\n        reports = [rep]\n        if rep.passed:\n            if item.config.getoption(\"setupshow\", False):\n                show_test_item(item)\n            if not item.config.getoption(\"setuponly\", False):\n>               reports.append(call_and_report(item, \"call\", log))\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_and_report(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", log: bool = True, **kwds\n    ) -> TestReport:\n>       call = call_runtest_hook(item, when, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_runtest_hook(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", **kwds\n    ) -> \"CallInfo[None]\":\n        if when == \"setup\":\n            ihook: Callable[..., None] = item.ihook.pytest_runtest_setup\n        elif when == \"call\":\n            ihook = item.ihook.pytest_runtest_call\n        elif when == \"teardown\":\n            ihook = item.ihook.pytest_runtest_teardown\n        else:\n            assert False, f\"Unhandled runtest hook case: {when}\"\n        reraise: Tuple[Type[BaseException], ...] = (Exit,)\n        if not item.config.getoption(\"usepdb\", False):\n            reraise += (KeyboardInterrupt,)\n>       return CallInfo.from_call(\n            lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n        )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n        except AttributeError:\n            pass\n        try:\n>           item.runtest()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtest(self) -> None:\n        from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n    \n        assert self._testcase is not None\n    \n        maybe_wrap_pytest_function_for_tracing(self)\n    \n        # Let the unittest framework handle async functions.\n        if is_async_function(self.obj):\n            # Type ignored because self acts as the TestResult, but is not actually one.\n            self._testcase(result=self)  # type: ignore[arg-type]\n        else:\n            # When --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug.\n            # Arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed.\n            # We need to consider if the test itself is skipped, or the whole class.\n            assert isinstance(self.parent, UnitTestCase)\n            skipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)\n            if self.config.getoption(\"usepdb\") and not skipped:\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)\n    \n            # We need to update the actual bound method with self.obj, because\n            # wrap_pytest_function_for_tracing replaces self.obj by a wrapper.\n            setattr(self._testcase, self.name, self.obj)\n            try:\n>               self._testcase(result=self)  # type: ignore[arg-type]\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwds):\n>       return self.run(*args, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:650: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def run(self, result=None):\n        if result is None:\n            result = self.defaultTestResult()\n            startTestRun = getattr(result, 'startTestRun', None)\n            stopTestRun = getattr(result, 'stopTestRun', None)\n            if startTestRun is not None:\n                startTestRun()\n        else:\n            stopTestRun = None\n    \n        result.startTest(self)\n        try:\n            testMethod = getattr(self, self._testMethodName)\n            if (getattr(self.__class__, \"__unittest_skip__\", False) or\n                getattr(testMethod, \"__unittest_skip__\", False)):\n                # If the class or method was skipped.\n                skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')\n                            or getattr(testMethod, '__unittest_skip_why__', ''))\n                self._addSkip(result, self, skip_why)\n                return result\n    \n            expecting_failure = (\n                getattr(self, \"__unittest_expecting_failure__\", False) or\n                getattr(testMethod, \"__unittest_expecting_failure__\", False)\n            )\n            outcome = _Outcome(result)\n            try:\n                self._outcome = outcome\n    \n                with outcome.testPartExecutor(self):\n                    self._callSetUp()\n                if outcome.success:\n                    outcome.expecting_failure = expecting_failure\n                    with outcome.testPartExecutor(self, isTest=True):\n>                       self._callTestMethod(testMethod)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:591: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _callTestMethod(self, method):\n>       method()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:549: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @functools.wraps(test_method)\n    def bound_param_test(self):\n      if isinstance(testcase_params, abc.Mapping):\n>       return test_method(self, **testcase_params)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/absl/testing/parameterized.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\nE           jax._src.source_info_util.JaxStackTraceBeforeTransformation: NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\nE           \nE           The preceding stack trace is the source of the JAX operation that, once transformed by JAX, triggered the following exception.\nE           \nE           --------------------\n\nsrc/jax_tests_reduced/eig_test.py:82: JaxStackTraceBeforeTransformation\n\nThe above exception was the direct cause of the following exception:\n\nself = <src.jax_tests_reduced.eig_test.NumpyLinalgTest testMethod=testEig5>, shape = (5, 5), dtype = <class 'numpy.float32'>\ncompute_left_eigenvectors = True, compute_right_eigenvectors = False\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\n\nsrc/jax_tests_reduced/eig_test.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:103: in wrapped\n    return f(*pos_args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:144: in eig\n    return eig_p.bind(x, compute_left_eigenvectors=compute_left_eigenvectors,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:360: in bind\n    return self.bind_with_trace(find_top_trace(args), args, params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:363: in bind_with_trace\n    out = trace.process_primitive(self, map(trace.full_raise, args), params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:817: in process_primitive\n    return primitive.impl(*tracers, **params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:451: in eig_impl\n    return dispatch.apply_primitive(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:117: in apply_primitive\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:253: in wrapper\n    return cached(config._trace_context(), *args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:246: in cached\n    return f(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:208: in xla_primitive_callable\n    compiled = _xla_callable_uncached(lu.wrap_init(prim_fun), prim.name,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:251: in _xla_callable_uncached\n    computation = sharded_lowering(fun, name, donated_invars, keep_unused,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:243: in sharded_lowering\n    return pxla.lower_sharding_computation(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py:314: in wrapper\n    return func(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py:2551: in lower_sharding_computation\n    lowering_result = mlir.lower_jaxpr_to_module(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:742: in lower_jaxpr_to_module\n    lower_jaxpr_to_fun(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1037: in lower_jaxpr_to_fun\n    out_vals, tokens_out = jaxpr_subcomp(ctx.replace(name_stack=callee_name_stack),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1172: in jaxpr_subcomp\n    ans = rule(rule_ctx, *map(_unwrap_singleton_ir_values, in_nodes),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (LoweringRuleContext(module_context=ModuleContext(context=<jaxlib.mlir._mlir_libs._site_initialize.<locals>.Context ob...None, axis_size_env=None, dim_var_values=[]), <jaxlib.mlir._mlir_libs._mlir.ir.BlockArgument object at 0x7f0664233b30>)\nkw = {'compute_left_eigenvectors': True, 'compute_right_eigenvectors': False}\n\n    def eig_lower(*args, **kw):\n>     raise NotImplementedError(\n        \"Nonsymmetric eigendecomposition is only implemented on the CPU backend. \"\n        \"If your matrix is symmetric or Hermitian, you should use eigh instead.\")\nE     NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:459: NotImplementedError"
            },
            "teardown": {
                "duration": 0.00035890599997401296,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig6",
            "lineno": 49,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004372010000679438,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019275297000149294,
                "outcome": "failed",
                "crash": {
                    "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                    "lineno": 459,
                    "message": "NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead."
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/eig_test.py",
                        "lineno": 82,
                        "message": ""
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 103,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 144,
                        "message": "in eig"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 360,
                        "message": "in bind"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 363,
                        "message": "in bind_with_trace"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 817,
                        "message": "in process_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 451,
                        "message": "in eig_impl"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 117,
                        "message": "in apply_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 253,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 246,
                        "message": "in cached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 208,
                        "message": "in xla_primitive_callable"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 251,
                        "message": "in _xla_callable_uncached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 243,
                        "message": "in sharded_lowering"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py",
                        "lineno": 314,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py",
                        "lineno": 2551,
                        "message": "in lower_sharding_computation"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 742,
                        "message": "in lower_jaxpr_to_module"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1037,
                        "message": "in lower_jaxpr_to_fun"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1172,
                        "message": "in jaxpr_subcomp"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 459,
                        "message": "NotImplementedError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testEig6>\n",
                "longrepr": "#!/home/dunganhdinh2002/miniconda3/bin/python\n    # -*- coding: utf-8 -*-\n    import re\n    import sys\n    from pytest import console_main\n    if __name__ == \"__main__\":\n        sys.argv[0] = re.sub(r\"(-script\\.pyw|\\.exe)?$\", \"\", sys.argv[0])\n>       sys.exit(console_main())\n\n/home/dunganhdinh2002/miniconda3/bin/pytest:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def console_main() -> int:\n        \"\"\"The CLI entry point of pytest.\n    \n        This function is not meant for programmable use; use `main()` instead.\n        \"\"\"\n        # https://docs.python.org/3/library/signal.html#note-on-sigpipe\n        try:\n>           code = main()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:190: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def main(\n        args: Optional[Union[List[str], \"os.PathLike[str]\"]] = None,\n        plugins: Optional[Sequence[Union[str, _PluggyPlugin]]] = None,\n    ) -> Union[int, ExitCode]:\n        \"\"\"Perform an in-process test run.\n    \n        :param args: List of command line arguments.\n        :param plugins: List of plugin objects to be auto-registered during initialization.\n    \n        :returns: An exit code.\n        \"\"\"\n        try:\n            try:\n                config = _prepareconfig(args, plugins)\n            except ConftestImportFailure as e:\n                exc_info = ExceptionInfo.from_exc_info(e.excinfo)\n                tw = TerminalWriter(sys.stderr)\n                tw.line(f\"ImportError while loading conftest '{e.path}'.\", red=True)\n                exc_info.traceback = exc_info.traceback.filter(\n                    filter_traceback_for_conftest_import_failure\n                )\n                exc_repr = (\n                    exc_info.getrepr(style=\"short\", chain=False)\n                    if exc_info.traceback\n                    else exc_info.exconly()\n                )\n                formatted_tb = str(exc_repr)\n                for line in formatted_tb.splitlines():\n                    tw.line(line.rstrip(), red=True)\n                return ExitCode.USAGE_ERROR\n            else:\n                try:\n>                   ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n                        config=config\n                    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_cmdline_main(config: Config) -> Union[int, ExitCode]:\n>       return wrap_session(config, _main)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def wrap_session(\n        config: Config, doit: Callable[[Config, \"Session\"], Optional[Union[int, ExitCode]]]\n    ) -> Union[int, ExitCode]:\n        \"\"\"Skeleton command line program.\"\"\"\n        session = Session.from_config(config)\n        session.exitstatus = ExitCode.OK\n        initstate = 0\n        try:\n            try:\n                config._do_configure()\n                initstate = 1\n                config.hook.pytest_sessionstart(session=session)\n                initstate = 2\n>               session.exitstatus = doit(config, session) or 0\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _main(config: Config, session: \"Session\") -> Optional[Union[int, ExitCode]]:\n        \"\"\"Default command line protocol for initialization, session,\n        running tests and reporting.\"\"\"\n        config.hook.pytest_collection(session=session)\n>       config.hook.pytest_runtestloop(session=session)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtestloop(session: \"Session\") -> bool:\n        if session.testsfailed and not session.config.option.continue_on_collection_errors:\n            raise session.Interrupted(\n                \"%d error%s during collection\"\n                % (session.testsfailed, \"s\" if session.testsfailed != 1 else \"\")\n            )\n    \n        if session.config.option.collectonly:\n            return True\n    \n        for i, item in enumerate(session.items):\n            nextitem = session.items[i + 1] if i + 1 < len(session.items) else None\n>           item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_protocol(item: Item, nextitem: Optional[Item]) -> bool:\n        ihook = item.ihook\n        ihook.pytest_runtest_logstart(nodeid=item.nodeid, location=item.location)\n>       runtestprotocol(item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtestprotocol(\n        item: Item, log: bool = True, nextitem: Optional[Item] = None\n    ) -> List[TestReport]:\n        hasrequest = hasattr(item, \"_request\")\n        if hasrequest and not item._request:  # type: ignore[attr-defined]\n            # This only happens if the item is re-run, as is done by\n            # pytest-rerunfailures.\n            item._initrequest()  # type: ignore[attr-defined]\n        rep = call_and_report(item, \"setup\", log)\n        reports = [rep]\n        if rep.passed:\n            if item.config.getoption(\"setupshow\", False):\n                show_test_item(item)\n            if not item.config.getoption(\"setuponly\", False):\n>               reports.append(call_and_report(item, \"call\", log))\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_and_report(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", log: bool = True, **kwds\n    ) -> TestReport:\n>       call = call_runtest_hook(item, when, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_runtest_hook(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", **kwds\n    ) -> \"CallInfo[None]\":\n        if when == \"setup\":\n            ihook: Callable[..., None] = item.ihook.pytest_runtest_setup\n        elif when == \"call\":\n            ihook = item.ihook.pytest_runtest_call\n        elif when == \"teardown\":\n            ihook = item.ihook.pytest_runtest_teardown\n        else:\n            assert False, f\"Unhandled runtest hook case: {when}\"\n        reraise: Tuple[Type[BaseException], ...] = (Exit,)\n        if not item.config.getoption(\"usepdb\", False):\n            reraise += (KeyboardInterrupt,)\n>       return CallInfo.from_call(\n            lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n        )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n        except AttributeError:\n            pass\n        try:\n>           item.runtest()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtest(self) -> None:\n        from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n    \n        assert self._testcase is not None\n    \n        maybe_wrap_pytest_function_for_tracing(self)\n    \n        # Let the unittest framework handle async functions.\n        if is_async_function(self.obj):\n            # Type ignored because self acts as the TestResult, but is not actually one.\n            self._testcase(result=self)  # type: ignore[arg-type]\n        else:\n            # When --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug.\n            # Arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed.\n            # We need to consider if the test itself is skipped, or the whole class.\n            assert isinstance(self.parent, UnitTestCase)\n            skipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)\n            if self.config.getoption(\"usepdb\") and not skipped:\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)\n    \n            # We need to update the actual bound method with self.obj, because\n            # wrap_pytest_function_for_tracing replaces self.obj by a wrapper.\n            setattr(self._testcase, self.name, self.obj)\n            try:\n>               self._testcase(result=self)  # type: ignore[arg-type]\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwds):\n>       return self.run(*args, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:650: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def run(self, result=None):\n        if result is None:\n            result = self.defaultTestResult()\n            startTestRun = getattr(result, 'startTestRun', None)\n            stopTestRun = getattr(result, 'stopTestRun', None)\n            if startTestRun is not None:\n                startTestRun()\n        else:\n            stopTestRun = None\n    \n        result.startTest(self)\n        try:\n            testMethod = getattr(self, self._testMethodName)\n            if (getattr(self.__class__, \"__unittest_skip__\", False) or\n                getattr(testMethod, \"__unittest_skip__\", False)):\n                # If the class or method was skipped.\n                skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')\n                            or getattr(testMethod, '__unittest_skip_why__', ''))\n                self._addSkip(result, self, skip_why)\n                return result\n    \n            expecting_failure = (\n                getattr(self, \"__unittest_expecting_failure__\", False) or\n                getattr(testMethod, \"__unittest_expecting_failure__\", False)\n            )\n            outcome = _Outcome(result)\n            try:\n                self._outcome = outcome\n    \n                with outcome.testPartExecutor(self):\n                    self._callSetUp()\n                if outcome.success:\n                    outcome.expecting_failure = expecting_failure\n                    with outcome.testPartExecutor(self, isTest=True):\n>                       self._callTestMethod(testMethod)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:591: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _callTestMethod(self, method):\n>       method()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:549: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @functools.wraps(test_method)\n    def bound_param_test(self):\n      if isinstance(testcase_params, abc.Mapping):\n>       return test_method(self, **testcase_params)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/absl/testing/parameterized.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\nE           jax._src.source_info_util.JaxStackTraceBeforeTransformation: NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\nE           \nE           The preceding stack trace is the source of the JAX operation that, once transformed by JAX, triggered the following exception.\nE           \nE           --------------------\n\nsrc/jax_tests_reduced/eig_test.py:82: JaxStackTraceBeforeTransformation\n\nThe above exception was the direct cause of the following exception:\n\nself = <src.jax_tests_reduced.eig_test.NumpyLinalgTest testMethod=testEig6>, shape = (5, 5), dtype = <class 'numpy.complex64'>\ncompute_left_eigenvectors = True, compute_right_eigenvectors = True\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\n\nsrc/jax_tests_reduced/eig_test.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:103: in wrapped\n    return f(*pos_args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:144: in eig\n    return eig_p.bind(x, compute_left_eigenvectors=compute_left_eigenvectors,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:360: in bind\n    return self.bind_with_trace(find_top_trace(args), args, params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:363: in bind_with_trace\n    out = trace.process_primitive(self, map(trace.full_raise, args), params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:817: in process_primitive\n    return primitive.impl(*tracers, **params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:451: in eig_impl\n    return dispatch.apply_primitive(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:117: in apply_primitive\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:253: in wrapper\n    return cached(config._trace_context(), *args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:246: in cached\n    return f(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:208: in xla_primitive_callable\n    compiled = _xla_callable_uncached(lu.wrap_init(prim_fun), prim.name,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:251: in _xla_callable_uncached\n    computation = sharded_lowering(fun, name, donated_invars, keep_unused,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:243: in sharded_lowering\n    return pxla.lower_sharding_computation(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py:314: in wrapper\n    return func(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py:2551: in lower_sharding_computation\n    lowering_result = mlir.lower_jaxpr_to_module(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:742: in lower_jaxpr_to_module\n    lower_jaxpr_to_fun(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1037: in lower_jaxpr_to_fun\n    out_vals, tokens_out = jaxpr_subcomp(ctx.replace(name_stack=callee_name_stack),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1172: in jaxpr_subcomp\n    ans = rule(rule_ctx, *map(_unwrap_singleton_ir_values, in_nodes),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (LoweringRuleContext(module_context=ModuleContext(context=<jaxlib.mlir._mlir_libs._site_initialize.<locals>.Context ob...None, axis_size_env=None, dim_var_values=[]), <jaxlib.mlir._mlir_libs._mlir.ir.BlockArgument object at 0x7f0665d24970>)\nkw = {'compute_left_eigenvectors': True, 'compute_right_eigenvectors': True}\n\n    def eig_lower(*args, **kw):\n>     raise NotImplementedError(\n        \"Nonsymmetric eigendecomposition is only implemented on the CPU backend. \"\n        \"If your matrix is symmetric or Hermitian, you should use eigh instead.\")\nE     NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:459: NotImplementedError"
            },
            "teardown": {
                "duration": 0.0005125699999553035,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig7",
            "lineno": 49,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006616369998937444,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03437710299999708,
                "outcome": "failed",
                "crash": {
                    "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                    "lineno": 459,
                    "message": "NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead."
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/eig_test.py",
                        "lineno": 82,
                        "message": ""
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 103,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 144,
                        "message": "in eig"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 360,
                        "message": "in bind"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 363,
                        "message": "in bind_with_trace"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 817,
                        "message": "in process_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 451,
                        "message": "in eig_impl"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 117,
                        "message": "in apply_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 253,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 246,
                        "message": "in cached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 208,
                        "message": "in xla_primitive_callable"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 251,
                        "message": "in _xla_callable_uncached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 243,
                        "message": "in sharded_lowering"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py",
                        "lineno": 314,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py",
                        "lineno": 2551,
                        "message": "in lower_sharding_computation"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 742,
                        "message": "in lower_jaxpr_to_module"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1037,
                        "message": "in lower_jaxpr_to_fun"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1172,
                        "message": "in jaxpr_subcomp"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 459,
                        "message": "NotImplementedError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testEig7>\n",
                "longrepr": "#!/home/dunganhdinh2002/miniconda3/bin/python\n    # -*- coding: utf-8 -*-\n    import re\n    import sys\n    from pytest import console_main\n    if __name__ == \"__main__\":\n        sys.argv[0] = re.sub(r\"(-script\\.pyw|\\.exe)?$\", \"\", sys.argv[0])\n>       sys.exit(console_main())\n\n/home/dunganhdinh2002/miniconda3/bin/pytest:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def console_main() -> int:\n        \"\"\"The CLI entry point of pytest.\n    \n        This function is not meant for programmable use; use `main()` instead.\n        \"\"\"\n        # https://docs.python.org/3/library/signal.html#note-on-sigpipe\n        try:\n>           code = main()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:190: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def main(\n        args: Optional[Union[List[str], \"os.PathLike[str]\"]] = None,\n        plugins: Optional[Sequence[Union[str, _PluggyPlugin]]] = None,\n    ) -> Union[int, ExitCode]:\n        \"\"\"Perform an in-process test run.\n    \n        :param args: List of command line arguments.\n        :param plugins: List of plugin objects to be auto-registered during initialization.\n    \n        :returns: An exit code.\n        \"\"\"\n        try:\n            try:\n                config = _prepareconfig(args, plugins)\n            except ConftestImportFailure as e:\n                exc_info = ExceptionInfo.from_exc_info(e.excinfo)\n                tw = TerminalWriter(sys.stderr)\n                tw.line(f\"ImportError while loading conftest '{e.path}'.\", red=True)\n                exc_info.traceback = exc_info.traceback.filter(\n                    filter_traceback_for_conftest_import_failure\n                )\n                exc_repr = (\n                    exc_info.getrepr(style=\"short\", chain=False)\n                    if exc_info.traceback\n                    else exc_info.exconly()\n                )\n                formatted_tb = str(exc_repr)\n                for line in formatted_tb.splitlines():\n                    tw.line(line.rstrip(), red=True)\n                return ExitCode.USAGE_ERROR\n            else:\n                try:\n>                   ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n                        config=config\n                    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_cmdline_main(config: Config) -> Union[int, ExitCode]:\n>       return wrap_session(config, _main)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def wrap_session(\n        config: Config, doit: Callable[[Config, \"Session\"], Optional[Union[int, ExitCode]]]\n    ) -> Union[int, ExitCode]:\n        \"\"\"Skeleton command line program.\"\"\"\n        session = Session.from_config(config)\n        session.exitstatus = ExitCode.OK\n        initstate = 0\n        try:\n            try:\n                config._do_configure()\n                initstate = 1\n                config.hook.pytest_sessionstart(session=session)\n                initstate = 2\n>               session.exitstatus = doit(config, session) or 0\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _main(config: Config, session: \"Session\") -> Optional[Union[int, ExitCode]]:\n        \"\"\"Default command line protocol for initialization, session,\n        running tests and reporting.\"\"\"\n        config.hook.pytest_collection(session=session)\n>       config.hook.pytest_runtestloop(session=session)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtestloop(session: \"Session\") -> bool:\n        if session.testsfailed and not session.config.option.continue_on_collection_errors:\n            raise session.Interrupted(\n                \"%d error%s during collection\"\n                % (session.testsfailed, \"s\" if session.testsfailed != 1 else \"\")\n            )\n    \n        if session.config.option.collectonly:\n            return True\n    \n        for i, item in enumerate(session.items):\n            nextitem = session.items[i + 1] if i + 1 < len(session.items) else None\n>           item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_protocol(item: Item, nextitem: Optional[Item]) -> bool:\n        ihook = item.ihook\n        ihook.pytest_runtest_logstart(nodeid=item.nodeid, location=item.location)\n>       runtestprotocol(item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtestprotocol(\n        item: Item, log: bool = True, nextitem: Optional[Item] = None\n    ) -> List[TestReport]:\n        hasrequest = hasattr(item, \"_request\")\n        if hasrequest and not item._request:  # type: ignore[attr-defined]\n            # This only happens if the item is re-run, as is done by\n            # pytest-rerunfailures.\n            item._initrequest()  # type: ignore[attr-defined]\n        rep = call_and_report(item, \"setup\", log)\n        reports = [rep]\n        if rep.passed:\n            if item.config.getoption(\"setupshow\", False):\n                show_test_item(item)\n            if not item.config.getoption(\"setuponly\", False):\n>               reports.append(call_and_report(item, \"call\", log))\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_and_report(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", log: bool = True, **kwds\n    ) -> TestReport:\n>       call = call_runtest_hook(item, when, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_runtest_hook(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", **kwds\n    ) -> \"CallInfo[None]\":\n        if when == \"setup\":\n            ihook: Callable[..., None] = item.ihook.pytest_runtest_setup\n        elif when == \"call\":\n            ihook = item.ihook.pytest_runtest_call\n        elif when == \"teardown\":\n            ihook = item.ihook.pytest_runtest_teardown\n        else:\n            assert False, f\"Unhandled runtest hook case: {when}\"\n        reraise: Tuple[Type[BaseException], ...] = (Exit,)\n        if not item.config.getoption(\"usepdb\", False):\n            reraise += (KeyboardInterrupt,)\n>       return CallInfo.from_call(\n            lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n        )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n        except AttributeError:\n            pass\n        try:\n>           item.runtest()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtest(self) -> None:\n        from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n    \n        assert self._testcase is not None\n    \n        maybe_wrap_pytest_function_for_tracing(self)\n    \n        # Let the unittest framework handle async functions.\n        if is_async_function(self.obj):\n            # Type ignored because self acts as the TestResult, but is not actually one.\n            self._testcase(result=self)  # type: ignore[arg-type]\n        else:\n            # When --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug.\n            # Arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed.\n            # We need to consider if the test itself is skipped, or the whole class.\n            assert isinstance(self.parent, UnitTestCase)\n            skipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)\n            if self.config.getoption(\"usepdb\") and not skipped:\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)\n    \n            # We need to update the actual bound method with self.obj, because\n            # wrap_pytest_function_for_tracing replaces self.obj by a wrapper.\n            setattr(self._testcase, self.name, self.obj)\n            try:\n>               self._testcase(result=self)  # type: ignore[arg-type]\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwds):\n>       return self.run(*args, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:650: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def run(self, result=None):\n        if result is None:\n            result = self.defaultTestResult()\n            startTestRun = getattr(result, 'startTestRun', None)\n            stopTestRun = getattr(result, 'stopTestRun', None)\n            if startTestRun is not None:\n                startTestRun()\n        else:\n            stopTestRun = None\n    \n        result.startTest(self)\n        try:\n            testMethod = getattr(self, self._testMethodName)\n            if (getattr(self.__class__, \"__unittest_skip__\", False) or\n                getattr(testMethod, \"__unittest_skip__\", False)):\n                # If the class or method was skipped.\n                skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')\n                            or getattr(testMethod, '__unittest_skip_why__', ''))\n                self._addSkip(result, self, skip_why)\n                return result\n    \n            expecting_failure = (\n                getattr(self, \"__unittest_expecting_failure__\", False) or\n                getattr(testMethod, \"__unittest_expecting_failure__\", False)\n            )\n            outcome = _Outcome(result)\n            try:\n                self._outcome = outcome\n    \n                with outcome.testPartExecutor(self):\n                    self._callSetUp()\n                if outcome.success:\n                    outcome.expecting_failure = expecting_failure\n                    with outcome.testPartExecutor(self, isTest=True):\n>                       self._callTestMethod(testMethod)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:591: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _callTestMethod(self, method):\n>       method()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:549: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @functools.wraps(test_method)\n    def bound_param_test(self):\n      if isinstance(testcase_params, abc.Mapping):\n>       return test_method(self, **testcase_params)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/absl/testing/parameterized.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\nE           jax._src.source_info_util.JaxStackTraceBeforeTransformation: NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\nE           \nE           The preceding stack trace is the source of the JAX operation that, once transformed by JAX, triggered the following exception.\nE           \nE           --------------------\n\nsrc/jax_tests_reduced/eig_test.py:82: JaxStackTraceBeforeTransformation\n\nThe above exception was the direct cause of the following exception:\n\nself = <src.jax_tests_reduced.eig_test.NumpyLinalgTest testMethod=testEig7>, shape = (5, 5), dtype = <class 'numpy.complex64'>\ncompute_left_eigenvectors = False, compute_right_eigenvectors = True\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\n\nsrc/jax_tests_reduced/eig_test.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:103: in wrapped\n    return f(*pos_args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:144: in eig\n    return eig_p.bind(x, compute_left_eigenvectors=compute_left_eigenvectors,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:360: in bind\n    return self.bind_with_trace(find_top_trace(args), args, params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:363: in bind_with_trace\n    out = trace.process_primitive(self, map(trace.full_raise, args), params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:817: in process_primitive\n    return primitive.impl(*tracers, **params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:451: in eig_impl\n    return dispatch.apply_primitive(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:117: in apply_primitive\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:253: in wrapper\n    return cached(config._trace_context(), *args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:246: in cached\n    return f(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:208: in xla_primitive_callable\n    compiled = _xla_callable_uncached(lu.wrap_init(prim_fun), prim.name,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:251: in _xla_callable_uncached\n    computation = sharded_lowering(fun, name, donated_invars, keep_unused,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:243: in sharded_lowering\n    return pxla.lower_sharding_computation(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py:314: in wrapper\n    return func(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py:2551: in lower_sharding_computation\n    lowering_result = mlir.lower_jaxpr_to_module(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:742: in lower_jaxpr_to_module\n    lower_jaxpr_to_fun(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1037: in lower_jaxpr_to_fun\n    out_vals, tokens_out = jaxpr_subcomp(ctx.replace(name_stack=callee_name_stack),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1172: in jaxpr_subcomp\n    ans = rule(rule_ctx, *map(_unwrap_singleton_ir_values, in_nodes),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (LoweringRuleContext(module_context=ModuleContext(context=<jaxlib.mlir._mlir_libs._site_initialize.<locals>.Context ob...None, axis_size_env=None, dim_var_values=[]), <jaxlib.mlir._mlir_libs._mlir.ir.BlockArgument object at 0x7f06644db8b0>)\nkw = {'compute_left_eigenvectors': False, 'compute_right_eigenvectors': True}\n\n    def eig_lower(*args, **kw):\n>     raise NotImplementedError(\n        \"Nonsymmetric eigendecomposition is only implemented on the CPU backend. \"\n        \"If your matrix is symmetric or Hermitian, you should use eigh instead.\")\nE     NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:459: NotImplementedError"
            },
            "teardown": {
                "duration": 0.00039181500005724956,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig8",
            "lineno": 49,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004833079999571055,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01921443299988823,
                "outcome": "failed",
                "crash": {
                    "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                    "lineno": 459,
                    "message": "NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead."
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/eig_test.py",
                        "lineno": 82,
                        "message": ""
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 103,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 144,
                        "message": "in eig"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 360,
                        "message": "in bind"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 363,
                        "message": "in bind_with_trace"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 817,
                        "message": "in process_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 451,
                        "message": "in eig_impl"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 117,
                        "message": "in apply_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 253,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 246,
                        "message": "in cached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 208,
                        "message": "in xla_primitive_callable"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 251,
                        "message": "in _xla_callable_uncached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 243,
                        "message": "in sharded_lowering"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py",
                        "lineno": 314,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py",
                        "lineno": 2551,
                        "message": "in lower_sharding_computation"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 742,
                        "message": "in lower_jaxpr_to_module"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1037,
                        "message": "in lower_jaxpr_to_fun"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1172,
                        "message": "in jaxpr_subcomp"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 459,
                        "message": "NotImplementedError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testEig8>\n",
                "longrepr": "#!/home/dunganhdinh2002/miniconda3/bin/python\n    # -*- coding: utf-8 -*-\n    import re\n    import sys\n    from pytest import console_main\n    if __name__ == \"__main__\":\n        sys.argv[0] = re.sub(r\"(-script\\.pyw|\\.exe)?$\", \"\", sys.argv[0])\n>       sys.exit(console_main())\n\n/home/dunganhdinh2002/miniconda3/bin/pytest:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def console_main() -> int:\n        \"\"\"The CLI entry point of pytest.\n    \n        This function is not meant for programmable use; use `main()` instead.\n        \"\"\"\n        # https://docs.python.org/3/library/signal.html#note-on-sigpipe\n        try:\n>           code = main()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:190: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def main(\n        args: Optional[Union[List[str], \"os.PathLike[str]\"]] = None,\n        plugins: Optional[Sequence[Union[str, _PluggyPlugin]]] = None,\n    ) -> Union[int, ExitCode]:\n        \"\"\"Perform an in-process test run.\n    \n        :param args: List of command line arguments.\n        :param plugins: List of plugin objects to be auto-registered during initialization.\n    \n        :returns: An exit code.\n        \"\"\"\n        try:\n            try:\n                config = _prepareconfig(args, plugins)\n            except ConftestImportFailure as e:\n                exc_info = ExceptionInfo.from_exc_info(e.excinfo)\n                tw = TerminalWriter(sys.stderr)\n                tw.line(f\"ImportError while loading conftest '{e.path}'.\", red=True)\n                exc_info.traceback = exc_info.traceback.filter(\n                    filter_traceback_for_conftest_import_failure\n                )\n                exc_repr = (\n                    exc_info.getrepr(style=\"short\", chain=False)\n                    if exc_info.traceback\n                    else exc_info.exconly()\n                )\n                formatted_tb = str(exc_repr)\n                for line in formatted_tb.splitlines():\n                    tw.line(line.rstrip(), red=True)\n                return ExitCode.USAGE_ERROR\n            else:\n                try:\n>                   ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n                        config=config\n                    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_cmdline_main(config: Config) -> Union[int, ExitCode]:\n>       return wrap_session(config, _main)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def wrap_session(\n        config: Config, doit: Callable[[Config, \"Session\"], Optional[Union[int, ExitCode]]]\n    ) -> Union[int, ExitCode]:\n        \"\"\"Skeleton command line program.\"\"\"\n        session = Session.from_config(config)\n        session.exitstatus = ExitCode.OK\n        initstate = 0\n        try:\n            try:\n                config._do_configure()\n                initstate = 1\n                config.hook.pytest_sessionstart(session=session)\n                initstate = 2\n>               session.exitstatus = doit(config, session) or 0\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _main(config: Config, session: \"Session\") -> Optional[Union[int, ExitCode]]:\n        \"\"\"Default command line protocol for initialization, session,\n        running tests and reporting.\"\"\"\n        config.hook.pytest_collection(session=session)\n>       config.hook.pytest_runtestloop(session=session)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtestloop(session: \"Session\") -> bool:\n        if session.testsfailed and not session.config.option.continue_on_collection_errors:\n            raise session.Interrupted(\n                \"%d error%s during collection\"\n                % (session.testsfailed, \"s\" if session.testsfailed != 1 else \"\")\n            )\n    \n        if session.config.option.collectonly:\n            return True\n    \n        for i, item in enumerate(session.items):\n            nextitem = session.items[i + 1] if i + 1 < len(session.items) else None\n>           item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_protocol(item: Item, nextitem: Optional[Item]) -> bool:\n        ihook = item.ihook\n        ihook.pytest_runtest_logstart(nodeid=item.nodeid, location=item.location)\n>       runtestprotocol(item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtestprotocol(\n        item: Item, log: bool = True, nextitem: Optional[Item] = None\n    ) -> List[TestReport]:\n        hasrequest = hasattr(item, \"_request\")\n        if hasrequest and not item._request:  # type: ignore[attr-defined]\n            # This only happens if the item is re-run, as is done by\n            # pytest-rerunfailures.\n            item._initrequest()  # type: ignore[attr-defined]\n        rep = call_and_report(item, \"setup\", log)\n        reports = [rep]\n        if rep.passed:\n            if item.config.getoption(\"setupshow\", False):\n                show_test_item(item)\n            if not item.config.getoption(\"setuponly\", False):\n>               reports.append(call_and_report(item, \"call\", log))\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_and_report(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", log: bool = True, **kwds\n    ) -> TestReport:\n>       call = call_runtest_hook(item, when, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_runtest_hook(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", **kwds\n    ) -> \"CallInfo[None]\":\n        if when == \"setup\":\n            ihook: Callable[..., None] = item.ihook.pytest_runtest_setup\n        elif when == \"call\":\n            ihook = item.ihook.pytest_runtest_call\n        elif when == \"teardown\":\n            ihook = item.ihook.pytest_runtest_teardown\n        else:\n            assert False, f\"Unhandled runtest hook case: {when}\"\n        reraise: Tuple[Type[BaseException], ...] = (Exit,)\n        if not item.config.getoption(\"usepdb\", False):\n            reraise += (KeyboardInterrupt,)\n>       return CallInfo.from_call(\n            lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n        )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n        except AttributeError:\n            pass\n        try:\n>           item.runtest()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtest(self) -> None:\n        from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n    \n        assert self._testcase is not None\n    \n        maybe_wrap_pytest_function_for_tracing(self)\n    \n        # Let the unittest framework handle async functions.\n        if is_async_function(self.obj):\n            # Type ignored because self acts as the TestResult, but is not actually one.\n            self._testcase(result=self)  # type: ignore[arg-type]\n        else:\n            # When --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug.\n            # Arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed.\n            # We need to consider if the test itself is skipped, or the whole class.\n            assert isinstance(self.parent, UnitTestCase)\n            skipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)\n            if self.config.getoption(\"usepdb\") and not skipped:\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)\n    \n            # We need to update the actual bound method with self.obj, because\n            # wrap_pytest_function_for_tracing replaces self.obj by a wrapper.\n            setattr(self._testcase, self.name, self.obj)\n            try:\n>               self._testcase(result=self)  # type: ignore[arg-type]\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwds):\n>       return self.run(*args, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:650: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def run(self, result=None):\n        if result is None:\n            result = self.defaultTestResult()\n            startTestRun = getattr(result, 'startTestRun', None)\n            stopTestRun = getattr(result, 'stopTestRun', None)\n            if startTestRun is not None:\n                startTestRun()\n        else:\n            stopTestRun = None\n    \n        result.startTest(self)\n        try:\n            testMethod = getattr(self, self._testMethodName)\n            if (getattr(self.__class__, \"__unittest_skip__\", False) or\n                getattr(testMethod, \"__unittest_skip__\", False)):\n                # If the class or method was skipped.\n                skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')\n                            or getattr(testMethod, '__unittest_skip_why__', ''))\n                self._addSkip(result, self, skip_why)\n                return result\n    \n            expecting_failure = (\n                getattr(self, \"__unittest_expecting_failure__\", False) or\n                getattr(testMethod, \"__unittest_expecting_failure__\", False)\n            )\n            outcome = _Outcome(result)\n            try:\n                self._outcome = outcome\n    \n                with outcome.testPartExecutor(self):\n                    self._callSetUp()\n                if outcome.success:\n                    outcome.expecting_failure = expecting_failure\n                    with outcome.testPartExecutor(self, isTest=True):\n>                       self._callTestMethod(testMethod)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:591: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _callTestMethod(self, method):\n>       method()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:549: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @functools.wraps(test_method)\n    def bound_param_test(self):\n      if isinstance(testcase_params, abc.Mapping):\n>       return test_method(self, **testcase_params)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/absl/testing/parameterized.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\nE           jax._src.source_info_util.JaxStackTraceBeforeTransformation: NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\nE           \nE           The preceding stack trace is the source of the JAX operation that, once transformed by JAX, triggered the following exception.\nE           \nE           --------------------\n\nsrc/jax_tests_reduced/eig_test.py:82: JaxStackTraceBeforeTransformation\n\nThe above exception was the direct cause of the following exception:\n\nself = <src.jax_tests_reduced.eig_test.NumpyLinalgTest testMethod=testEig8>, shape = (2, 6, 6), dtype = <class 'numpy.complex64'>\ncompute_left_eigenvectors = True, compute_right_eigenvectors = True\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\n\nsrc/jax_tests_reduced/eig_test.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:103: in wrapped\n    return f(*pos_args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:144: in eig\n    return eig_p.bind(x, compute_left_eigenvectors=compute_left_eigenvectors,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:360: in bind\n    return self.bind_with_trace(find_top_trace(args), args, params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:363: in bind_with_trace\n    out = trace.process_primitive(self, map(trace.full_raise, args), params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:817: in process_primitive\n    return primitive.impl(*tracers, **params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:451: in eig_impl\n    return dispatch.apply_primitive(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:117: in apply_primitive\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:253: in wrapper\n    return cached(config._trace_context(), *args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:246: in cached\n    return f(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:208: in xla_primitive_callable\n    compiled = _xla_callable_uncached(lu.wrap_init(prim_fun), prim.name,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:251: in _xla_callable_uncached\n    computation = sharded_lowering(fun, name, donated_invars, keep_unused,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:243: in sharded_lowering\n    return pxla.lower_sharding_computation(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py:314: in wrapper\n    return func(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py:2551: in lower_sharding_computation\n    lowering_result = mlir.lower_jaxpr_to_module(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:742: in lower_jaxpr_to_module\n    lower_jaxpr_to_fun(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1037: in lower_jaxpr_to_fun\n    out_vals, tokens_out = jaxpr_subcomp(ctx.replace(name_stack=callee_name_stack),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1172: in jaxpr_subcomp\n    ans = rule(rule_ctx, *map(_unwrap_singleton_ir_values, in_nodes),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (LoweringRuleContext(module_context=ModuleContext(context=<jaxlib.mlir._mlir_libs._site_initialize.<locals>.Context ob...None, axis_size_env=None, dim_var_values=[]), <jaxlib.mlir._mlir_libs._mlir.ir.BlockArgument object at 0x7f06657e3cb0>)\nkw = {'compute_left_eigenvectors': True, 'compute_right_eigenvectors': True}\n\n    def eig_lower(*args, **kw):\n>     raise NotImplementedError(\n        \"Nonsymmetric eigendecomposition is only implemented on the CPU backend. \"\n        \"If your matrix is symmetric or Hermitian, you should use eigh instead.\")\nE     NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:459: NotImplementedError"
            },
            "teardown": {
                "duration": 0.0003827840000667493,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/eig_test.py::NumpyLinalgTest::testEig9",
            "lineno": 49,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004650519999813696,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02000674600003549,
                "outcome": "failed",
                "crash": {
                    "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                    "lineno": 459,
                    "message": "NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead."
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/eig_test.py",
                        "lineno": 82,
                        "message": ""
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 103,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 144,
                        "message": "in eig"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 360,
                        "message": "in bind"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 363,
                        "message": "in bind_with_trace"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py",
                        "lineno": 817,
                        "message": "in process_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 451,
                        "message": "in eig_impl"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 117,
                        "message": "in apply_primitive"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 253,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py",
                        "lineno": 246,
                        "message": "in cached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 208,
                        "message": "in xla_primitive_callable"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 251,
                        "message": "in _xla_callable_uncached"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py",
                        "lineno": 243,
                        "message": "in sharded_lowering"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py",
                        "lineno": 314,
                        "message": "in wrapper"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py",
                        "lineno": 2551,
                        "message": "in lower_sharding_computation"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 742,
                        "message": "in lower_jaxpr_to_module"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1037,
                        "message": "in lower_jaxpr_to_fun"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py",
                        "lineno": 1172,
                        "message": "in jaxpr_subcomp"
                    },
                    {
                        "path": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py",
                        "lineno": 459,
                        "message": "NotImplementedError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testEig9>\n",
                "longrepr": "#!/home/dunganhdinh2002/miniconda3/bin/python\n    # -*- coding: utf-8 -*-\n    import re\n    import sys\n    from pytest import console_main\n    if __name__ == \"__main__\":\n        sys.argv[0] = re.sub(r\"(-script\\.pyw|\\.exe)?$\", \"\", sys.argv[0])\n>       sys.exit(console_main())\n\n/home/dunganhdinh2002/miniconda3/bin/pytest:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def console_main() -> int:\n        \"\"\"The CLI entry point of pytest.\n    \n        This function is not meant for programmable use; use `main()` instead.\n        \"\"\"\n        # https://docs.python.org/3/library/signal.html#note-on-sigpipe\n        try:\n>           code = main()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:190: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def main(\n        args: Optional[Union[List[str], \"os.PathLike[str]\"]] = None,\n        plugins: Optional[Sequence[Union[str, _PluggyPlugin]]] = None,\n    ) -> Union[int, ExitCode]:\n        \"\"\"Perform an in-process test run.\n    \n        :param args: List of command line arguments.\n        :param plugins: List of plugin objects to be auto-registered during initialization.\n    \n        :returns: An exit code.\n        \"\"\"\n        try:\n            try:\n                config = _prepareconfig(args, plugins)\n            except ConftestImportFailure as e:\n                exc_info = ExceptionInfo.from_exc_info(e.excinfo)\n                tw = TerminalWriter(sys.stderr)\n                tw.line(f\"ImportError while loading conftest '{e.path}'.\", red=True)\n                exc_info.traceback = exc_info.traceback.filter(\n                    filter_traceback_for_conftest_import_failure\n                )\n                exc_repr = (\n                    exc_info.getrepr(style=\"short\", chain=False)\n                    if exc_info.traceback\n                    else exc_info.exconly()\n                )\n                formatted_tb = str(exc_repr)\n                for line in formatted_tb.splitlines():\n                    tw.line(line.rstrip(), red=True)\n                return ExitCode.USAGE_ERROR\n            else:\n                try:\n>                   ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n                        config=config\n                    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_cmdline_main(config: Config) -> Union[int, ExitCode]:\n>       return wrap_session(config, _main)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def wrap_session(\n        config: Config, doit: Callable[[Config, \"Session\"], Optional[Union[int, ExitCode]]]\n    ) -> Union[int, ExitCode]:\n        \"\"\"Skeleton command line program.\"\"\"\n        session = Session.from_config(config)\n        session.exitstatus = ExitCode.OK\n        initstate = 0\n        try:\n            try:\n                config._do_configure()\n                initstate = 1\n                config.hook.pytest_sessionstart(session=session)\n                initstate = 2\n>               session.exitstatus = doit(config, session) or 0\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _main(config: Config, session: \"Session\") -> Optional[Union[int, ExitCode]]:\n        \"\"\"Default command line protocol for initialization, session,\n        running tests and reporting.\"\"\"\n        config.hook.pytest_collection(session=session)\n>       config.hook.pytest_runtestloop(session=session)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtestloop(session: \"Session\") -> bool:\n        if session.testsfailed and not session.config.option.continue_on_collection_errors:\n            raise session.Interrupted(\n                \"%d error%s during collection\"\n                % (session.testsfailed, \"s\" if session.testsfailed != 1 else \"\")\n            )\n    \n        if session.config.option.collectonly:\n            return True\n    \n        for i, item in enumerate(session.items):\n            nextitem = session.items[i + 1] if i + 1 < len(session.items) else None\n>           item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/main.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_protocol(item: Item, nextitem: Optional[Item]) -> bool:\n        ihook = item.ihook\n        ihook.pytest_runtest_logstart(nodeid=item.nodeid, location=item.location)\n>       runtestprotocol(item, nextitem=nextitem)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtestprotocol(\n        item: Item, log: bool = True, nextitem: Optional[Item] = None\n    ) -> List[TestReport]:\n        hasrequest = hasattr(item, \"_request\")\n        if hasrequest and not item._request:  # type: ignore[attr-defined]\n            # This only happens if the item is re-run, as is done by\n            # pytest-rerunfailures.\n            item._initrequest()  # type: ignore[attr-defined]\n        rep = call_and_report(item, \"setup\", log)\n        reports = [rep]\n        if rep.passed:\n            if item.config.getoption(\"setupshow\", False):\n                show_test_item(item)\n            if not item.config.getoption(\"setuponly\", False):\n>               reports.append(call_and_report(item, \"call\", log))\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_and_report(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", log: bool = True, **kwds\n    ) -> TestReport:\n>       call = call_runtest_hook(item, when, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def call_runtest_hook(\n        item: Item, when: \"Literal['setup', 'call', 'teardown']\", **kwds\n    ) -> \"CallInfo[None]\":\n        if when == \"setup\":\n            ihook: Callable[..., None] = item.ihook.pytest_runtest_setup\n        elif when == \"call\":\n            ihook = item.ihook.pytest_runtest_call\n        elif when == \"teardown\":\n            ihook = item.ihook.pytest_runtest_teardown\n        else:\n            assert False, f\"Unhandled runtest hook case: {when}\"\n        reraise: Tuple[Type[BaseException], ...] = (Exit,)\n        if not item.config.getoption(\"usepdb\", False):\n            reraise += (KeyboardInterrupt,)\n>       return CallInfo.from_call(\n            lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n        )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:259: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n        except AttributeError:\n            pass\n        try:\n>           item.runtest()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/runner.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def runtest(self) -> None:\n        from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n    \n        assert self._testcase is not None\n    \n        maybe_wrap_pytest_function_for_tracing(self)\n    \n        # Let the unittest framework handle async functions.\n        if is_async_function(self.obj):\n            # Type ignored because self acts as the TestResult, but is not actually one.\n            self._testcase(result=self)  # type: ignore[arg-type]\n        else:\n            # When --pdb is given, we want to postpone calling tearDown() otherwise\n            # when entering the pdb prompt, tearDown() would have probably cleaned up\n            # instance variables, which makes it difficult to debug.\n            # Arguably we could always postpone tearDown(), but this changes the moment where the\n            # TestCase instance interacts with the results object, so better to only do it\n            # when absolutely needed.\n            # We need to consider if the test itself is skipped, or the whole class.\n            assert isinstance(self.parent, UnitTestCase)\n            skipped = _is_skipped(self.obj) or _is_skipped(self.parent.obj)\n            if self.config.getoption(\"usepdb\") and not skipped:\n                self._explicit_tearDown = self._testcase.tearDown\n                setattr(self._testcase, \"tearDown\", lambda *args: None)\n    \n            # We need to update the actual bound method with self.obj, because\n            # wrap_pytest_function_for_tracing replaces self.obj by a wrapper.\n            setattr(self._testcase, self.name, self.obj)\n            try:\n>               self._testcase(result=self)  # type: ignore[arg-type]\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py:330: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def __call__(self, *args, **kwds):\n>       return self.run(*args, **kwds)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:650: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def run(self, result=None):\n        if result is None:\n            result = self.defaultTestResult()\n            startTestRun = getattr(result, 'startTestRun', None)\n            stopTestRun = getattr(result, 'stopTestRun', None)\n            if startTestRun is not None:\n                startTestRun()\n        else:\n            stopTestRun = None\n    \n        result.startTest(self)\n        try:\n            testMethod = getattr(self, self._testMethodName)\n            if (getattr(self.__class__, \"__unittest_skip__\", False) or\n                getattr(testMethod, \"__unittest_skip__\", False)):\n                # If the class or method was skipped.\n                skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')\n                            or getattr(testMethod, '__unittest_skip_why__', ''))\n                self._addSkip(result, self, skip_why)\n                return result\n    \n            expecting_failure = (\n                getattr(self, \"__unittest_expecting_failure__\", False) or\n                getattr(testMethod, \"__unittest_expecting_failure__\", False)\n            )\n            outcome = _Outcome(result)\n            try:\n                self._outcome = outcome\n    \n                with outcome.testPartExecutor(self):\n                    self._callSetUp()\n                if outcome.success:\n                    outcome.expecting_failure = expecting_failure\n                    with outcome.testPartExecutor(self, isTest=True):\n>                       self._callTestMethod(testMethod)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:591: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def _callTestMethod(self, method):\n>       method()\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/unittest/case.py:549: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @functools.wraps(test_method)\n    def bound_param_test(self):\n      if isinstance(testcase_params, abc.Mapping):\n>       return test_method(self, **testcase_params)\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/absl/testing/parameterized.py:318: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\nE           jax._src.source_info_util.JaxStackTraceBeforeTransformation: NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\nE           \nE           The preceding stack trace is the source of the JAX operation that, once transformed by JAX, triggered the following exception.\nE           \nE           --------------------\n\nsrc/jax_tests_reduced/eig_test.py:82: JaxStackTraceBeforeTransformation\n\nThe above exception was the direct cause of the following exception:\n\nself = <src.jax_tests_reduced.eig_test.NumpyLinalgTest testMethod=testEig9>, shape = (4, 4), dtype = <class 'numpy.complex64'>\ncompute_left_eigenvectors = False, compute_right_eigenvectors = False\n\n    @jtu.sample_product(\n        shape=[(0, 0), (4, 4), (5, 5), (50, 50), (2, 6, 6)],\n        dtype=float_types + complex_types,\n        compute_left_eigenvectors=[False, True],\n        compute_right_eigenvectors=[False, True],\n    )\n    # TODO(phawkins): enable when there is an eigendecomposition implementation\n    # for GPU/TPU.\n    def testEig(\n        self, shape, dtype, compute_left_eigenvectors, compute_right_eigenvectors\n    ):\n        rng = jtu.rand_default(self.rng())\n        n = shape[-1]\n        args_maker = lambda: [rng(shape, dtype)]\n    \n        # Norm, adjusted for dimension and type.\n        def norm(x):\n            norm = np.linalg.norm(x, axis=(-2, -1))\n            return norm / ((n + 1) * jnp.finfo(dtype).eps)\n    \n        def check_right_eigenvectors(a, w, vr):\n            self.assertTrue(np.all(norm(np.matmul(a, vr) - w[..., None, :] * vr) < 100))\n    \n        def check_left_eigenvectors(a, w, vl):\n            rank = len(a.shape)\n            aH = jnp.conj(a.transpose(list(range(rank - 2)) + [rank - 1, rank - 2]))\n            wC = jnp.conj(w)\n            check_right_eigenvectors(aH, wC, vl)\n    \n        (a,) = args_maker()\n        timer = jax_op_timer()\n        with timer:\n>           results = lax.linalg.eig(\n                a,\n                compute_left_eigenvectors=compute_left_eigenvectors,\n                compute_right_eigenvectors=compute_right_eigenvectors,\n            )\n\nsrc/jax_tests_reduced/eig_test.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:103: in wrapped\n    return f(*pos_args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:144: in eig\n    return eig_p.bind(x, compute_left_eigenvectors=compute_left_eigenvectors,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:360: in bind\n    return self.bind_with_trace(find_top_trace(args), args, params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:363: in bind_with_trace\n    out = trace.process_primitive(self, map(trace.full_raise, args), params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/core.py:817: in process_primitive\n    return primitive.impl(*tracers, **params)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:451: in eig_impl\n    return dispatch.apply_primitive(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:117: in apply_primitive\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:253: in wrapper\n    return cached(config._trace_context(), *args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/util.py:246: in cached\n    return f(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:208: in xla_primitive_callable\n    compiled = _xla_callable_uncached(lu.wrap_init(prim_fun), prim.name,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:251: in _xla_callable_uncached\n    computation = sharded_lowering(fun, name, donated_invars, keep_unused,\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/dispatch.py:243: in sharded_lowering\n    return pxla.lower_sharding_computation(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/profiler.py:314: in wrapper\n    return func(*args, **kwargs)\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/pxla.py:2551: in lower_sharding_computation\n    lowering_result = mlir.lower_jaxpr_to_module(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:742: in lower_jaxpr_to_module\n    lower_jaxpr_to_fun(\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1037: in lower_jaxpr_to_fun\n    out_vals, tokens_out = jaxpr_subcomp(ctx.replace(name_stack=callee_name_stack),\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/interpreters/mlir.py:1172: in jaxpr_subcomp\n    ans = rule(rule_ctx, *map(_unwrap_singleton_ir_values, in_nodes),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (LoweringRuleContext(module_context=ModuleContext(context=<jaxlib.mlir._mlir_libs._site_initialize.<locals>.Context ob...None, axis_size_env=None, dim_var_values=[]), <jaxlib.mlir._mlir_libs._mlir.ir.BlockArgument object at 0x7f0663f4b770>)\nkw = {'compute_left_eigenvectors': False, 'compute_right_eigenvectors': False}\n\n    def eig_lower(*args, **kw):\n>     raise NotImplementedError(\n        \"Nonsymmetric eigendecomposition is only implemented on the CPU backend. \"\n        \"If your matrix is symmetric or Hermitian, you should use eigh instead.\")\nE     NotImplementedError: Nonsymmetric eigendecomposition is only implemented on the CPU backend. If your matrix is symmetric or Hermitian, you should use eigh instead.\n\n/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/lax/linalg.py:459: NotImplementedError"
            },
            "teardown": {
                "duration": 0.0005526939999072056,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/einsum_path_test.py::EinsumTest::test_einsum_kpmurphy_example",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006661270001586672,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23674746000006053,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_einsum_kpmurphy_example>\n"
            },
            "teardown": {
                "duration": 0.00043639900013658917,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/einsum_path_test.py::EinsumTest::test_einsum_path",
            "lineno": 32,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044997300005888974,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012026729998524388,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_einsum_path>\n"
            },
            "teardown": {
                "duration": 0.00034702899984040414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad0",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007016209999619605,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.34628681599997435,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOpGrad0>\n"
            },
            "teardown": {
                "duration": 0.00042237699994984723,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad1",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004807049999726587,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.31383151,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOpGrad1>\n"
            },
            "teardown": {
                "duration": 0.00040721400000620633,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad2",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047900999993544247,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3585278099999414,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOpGrad2>\n"
            },
            "teardown": {
                "duration": 0.00040204200013249647,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad3",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048012000002017885,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3637129090000144,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOpGrad3>\n"
            },
            "teardown": {
                "duration": 0.0004253670001617138,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad4",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004362339998351672,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3344214399999146,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOpGrad4>\n"
            },
            "teardown": {
                "duration": 0.0004145279999647755,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad5",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046589900011895224,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3222277929999109,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOpGrad5>\n"
            },
            "teardown": {
                "duration": 0.0004308040001888003,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/erf_test.py::LaxAutodiffTest::testOpGrad6",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043735500003094785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3578374639998856,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOpGrad6>\n"
            },
            "teardown": {
                "duration": 0.0005337300001428957,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/eval_context_test.py::APITest::test_eval_context",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.000813104000144449,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16660166900010154,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_eval_context>\n"
            },
            "teardown": {
                "duration": 0.0004888180001216824,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp0",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006148160000520875,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0030802380001659913,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp0>\n"
            },
            "teardown": {
                "duration": 0.00037390700003925303,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp1",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042208199988635897,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12087989700012258,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp1>\n"
            },
            "teardown": {
                "duration": 0.00045250800008034275,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp2",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004981839999800286,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0029929970000921458,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp2>\n"
            },
            "teardown": {
                "duration": 0.000314625999862983,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp3",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004026999999950931,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02627406500005236,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp3>\n"
            },
            "teardown": {
                "duration": 0.0003287429999545566,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp4",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003820069998710096,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002742915999988327,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp4>\n"
            },
            "teardown": {
                "duration": 0.0002778349999061902,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp5",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003628009999374626,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002595162000034179,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp5>\n"
            },
            "teardown": {
                "duration": 0.00027736200013350754,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp6",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040560699994784954,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12377554099998633,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp6>\n"
            },
            "teardown": {
                "duration": 0.00045407299990074534,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp7",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004825409998829855,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003042818000039915,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp7>\n"
            },
            "teardown": {
                "duration": 0.0003226469998480752,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp8",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005090370000289113,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02562909500011301,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp8>\n"
            },
            "teardown": {
                "duration": 0.0003248510001867544,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/exp_test.py::JaxNumpyOperatorTests::testOp9",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040532299999540555,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12226992699993389,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp9>\n"
            },
            "teardown": {
                "duration": 0.000592653000012433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip0",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.000866656999960469,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08977469399997062,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFlip0>\n"
            },
            "teardown": {
                "duration": 0.0004225060001772363,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip1",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005004560000543279,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08606620299997303,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFlip1>\n"
            },
            "teardown": {
                "duration": 0.0004301829999349138,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip2",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048006899987740326,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08675694399994427,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFlip2>\n"
            },
            "teardown": {
                "duration": 0.0004211250000025757,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip3",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007219220001388749,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029986840999981723,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFlip3>\n"
            },
            "teardown": {
                "duration": 0.0005194209998080623,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip4",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005588629999238037,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08262399599993842,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFlip4>\n"
            },
            "teardown": {
                "duration": 0.000512806999950044,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip5",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005274430000099528,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08526168899993536,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFlip5>\n"
            },
            "teardown": {
                "duration": 0.0005474810000123398,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip6",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005575000000135333,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08376204899991535,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFlip6>\n"
            },
            "teardown": {
                "duration": 0.00040228000011666154,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip7",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004423689999839553,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09121702900006312,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFlip7>\n"
            },
            "teardown": {
                "duration": 0.0008172909999757394,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip8",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047396400009347417,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0018593059999147954,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFlip8>\n"
            },
            "teardown": {
                "duration": 0.0004188460000023042,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/flip_test.py::LaxBackedNumpyTests::testFlip9",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040759800003797864,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08305702100005874,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFlip9>\n"
            },
            "teardown": {
                "duration": 0.0005374689999371185,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr0",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007652070000858657,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08148427399987668,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFliplr0>\n"
            },
            "teardown": {
                "duration": 0.0005344240000795253,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr1",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048248799998873437,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001894591000109358,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFliplr1>\n"
            },
            "teardown": {
                "duration": 0.00029977100007272384,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr2",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040029899992077844,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08283456599997407,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFliplr2>\n"
            },
            "teardown": {
                "duration": 0.0005334410000159551,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr3",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004896259999895847,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08243081999989954,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFliplr3>\n"
            },
            "teardown": {
                "duration": 0.00037107500020283624,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr4",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004514959998687118,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08333804800008693,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFliplr4>\n"
            },
            "teardown": {
                "duration": 0.0005981110000448098,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr5",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006039150000560767,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0019149600000218925,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFliplr5>\n"
            },
            "teardown": {
                "duration": 0.00028900299980705313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr6",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037494699995477276,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001781350999863207,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFliplr6>\n"
            },
            "teardown": {
                "duration": 0.00028334000012364413,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr7",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003464200001417339,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0839732310000727,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFliplr7>\n"
            },
            "teardown": {
                "duration": 0.0005204669998875033,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr8",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006159249999200256,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08212647400000606,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFliplr8>\n"
            },
            "teardown": {
                "duration": 0.000510007000002588,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/fliplr_test.py::LaxBackedNumpyTests::testFliplr9",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005599579999397974,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08047897999995257,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFliplr9>\n"
            },
            "teardown": {
                "duration": 0.0006578800000625051,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun0",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006779159998586692,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1568655190001209,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScipySpecialFun0>\n"
            },
            "teardown": {
                "duration": 0.000556209000023955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun1",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006625099999837403,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1636014890000297,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScipySpecialFun1>\n"
            },
            "teardown": {
                "duration": 0.00044139099986750807,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun2",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004976300001544587,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16288596600020355,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScipySpecialFun2>\n"
            },
            "teardown": {
                "duration": 0.0006234469999526482,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun3",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.00074822800002039,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16140913699996418,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScipySpecialFun3>\n"
            },
            "teardown": {
                "duration": 0.0006028919999607751,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun4",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006118920000517392,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09748200199987878,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScipySpecialFun4>\n"
            },
            "teardown": {
                "duration": 0.0005601179998393491,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/gammaln_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun5",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005763469998782966,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16015485799994167,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScipySpecialFun5>\n"
            },
            "teardown": {
                "duration": 0.0005335680000371212,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ge_test.py::LaxTest::test_ops_do_not_accept_complex_dtypes0",
            "lineno": 101,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008003939999525755,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08125161499992828,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_ops_do_not_accept_complex_dtypes0>\n"
            },
            "teardown": {
                "duration": 0.0005270599999676051,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_comparing_var",
            "lineno": 357,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007465969999884692,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008569999999963329,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_comparing_var>\n"
            },
            "teardown": {
                "duration": 0.0003476619999673858,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_concrete_array_string_representation",
            "lineno": 387,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003735800000868039,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008000379998520657,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_concrete_array_string_representation>\n"
            },
            "teardown": {
                "duration": 0.00028852900004494586,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_input_residual_forwarding",
            "lineno": 394,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035531399998944835,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12049484099998153,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_input_residual_forwarding>\n"
            },
            "teardown": {
                "duration": 0.0004248740001457918,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_0",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004576680000809574,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14005845900010172,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_0>\n"
            },
            "teardown": {
                "duration": 0.00043519700011529494,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_1",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004410379999626457,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.25277518099983354,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_1>\n"
            },
            "teardown": {
                "duration": 0.00044212399984644435,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_10",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004450150001957809,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01169725899990226,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_10>\n"
            },
            "teardown": {
                "duration": 0.00031612400016456377,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_100",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040526800012230524,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5090753440001663,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_100>\n"
            },
            "teardown": {
                "duration": 0.0005732279998937884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_101",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047415499989256205,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013250547000097868,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_101>\n"
            },
            "teardown": {
                "duration": 0.0003230110000913555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_102",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004148040000018227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012894064000192884,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_102>\n"
            },
            "teardown": {
                "duration": 0.0002921490001881466,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_103",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035962199990535737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012776074999919729,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_103>\n"
            },
            "teardown": {
                "duration": 0.00028184600000713544,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_104",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034065999989252305,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013263520999998946,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_104>\n"
            },
            "teardown": {
                "duration": 0.0002753870001015457,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_105",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035160799984623736,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013318710000021383,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_105>\n"
            },
            "teardown": {
                "duration": 0.00031481900009566743,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_106",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003539930000897584,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013622947999920143,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_106>\n"
            },
            "teardown": {
                "duration": 0.0003612649998103734,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_107",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003703539998696215,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013891789000126664,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_107>\n"
            },
            "teardown": {
                "duration": 0.0003701759999330534,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_108",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035994700010633096,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014013728000008996,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_108>\n"
            },
            "teardown": {
                "duration": 0.0002881110001453635,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_109",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003473219999250432,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03599855099992055,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_109>\n"
            },
            "teardown": {
                "duration": 0.0004024209999897721,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_11",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003780769998229516,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0036141579998911766,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_11>\n"
            },
            "teardown": {
                "duration": 0.0002929909999238589,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_12",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034420399992995954,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012449071999981243,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_12>\n"
            },
            "teardown": {
                "duration": 0.00027436100003797037,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_13",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036769500002264977,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0038395170001876977,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_13>\n"
            },
            "teardown": {
                "duration": 0.0003879309999774705,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_14",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034827000013137877,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00368288599997868,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_14>\n"
            },
            "teardown": {
                "duration": 0.0002726810000694968,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_15",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004215120000026218,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003808407999940755,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_15>\n"
            },
            "teardown": {
                "duration": 0.00036338800009616534,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_16",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037893200010330474,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003953223000053185,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_16>\n"
            },
            "teardown": {
                "duration": 0.00023045500006446673,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_17",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041411400002289156,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003911146999826087,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_17>\n"
            },
            "teardown": {
                "duration": 0.0003194880000592093,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_18",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007052389998989383,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0038423329999659472,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_18>\n"
            },
            "teardown": {
                "duration": 0.00032056999998530955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_19",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037334000012378965,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004041937000010876,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_19>\n"
            },
            "teardown": {
                "duration": 0.0002284849999796279,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_2",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033335700004499813,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002661226999862265,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_2>\n"
            },
            "teardown": {
                "duration": 0.00042743900007735647,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_20",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004114200000913115,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003992104999952062,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_20>\n"
            },
            "teardown": {
                "duration": 0.00028543999997054925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_21",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036692699995910516,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01592219799999839,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_21>\n"
            },
            "teardown": {
                "duration": 0.0002963500000987551,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_22",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003935600000204431,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13917644599996493,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_22>\n"
            },
            "teardown": {
                "duration": 0.0005950309998752346,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_23",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006007109998336091,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19840696699998261,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_23>\n"
            },
            "teardown": {
                "duration": 0.0004125899999962712,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_24",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004332930000146007,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0028491890000168496,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_24>\n"
            },
            "teardown": {
                "duration": 0.0002921199998127122,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_25",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037526900018747256,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0029663149998668814,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_25>\n"
            },
            "teardown": {
                "duration": 0.00027946899990638485,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_26",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038851799990879954,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002766113999996378,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_26>\n"
            },
            "teardown": {
                "duration": 0.00027775700004895043,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_27",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003404229998977826,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0029265319999467465,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_27>\n"
            },
            "teardown": {
                "duration": 0.00030791399990448554,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_28",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036401399984242744,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003081879999854209,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_28>\n"
            },
            "teardown": {
                "duration": 0.0010186380000050121,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_29",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034142799995606765,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027107200000955345,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_29>\n"
            },
            "teardown": {
                "duration": 0.0002814760000546812,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_3",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003870350001307088,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026089789998877677,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_3>\n"
            },
            "teardown": {
                "duration": 0.00026376200003142003,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_30",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003460529999301798,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00279686900012166,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_30>\n"
            },
            "teardown": {
                "duration": 0.00035629100011647097,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_31",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035291400013193197,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003050048999966748,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_31>\n"
            },
            "teardown": {
                "duration": 0.00029948199994578317,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_32",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035265900010017504,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010156874999893262,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_32>\n"
            },
            "teardown": {
                "duration": 0.0002941469999768742,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_33",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003543469999840454,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002550288000065848,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_33>\n"
            },
            "teardown": {
                "duration": 0.00026518300001043826,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_34",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037635599983332213,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005310624000003372,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_34>\n"
            },
            "teardown": {
                "duration": 0.0002758979999271105,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_35",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00032789199985927553,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025459110001975205,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_35>\n"
            },
            "teardown": {
                "duration": 0.00033748700002433907,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_36",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003251919999911479,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027831510001306015,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_36>\n"
            },
            "teardown": {
                "duration": 0.00037836500018784136,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_37",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003404000001410168,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026988360000359535,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_37>\n"
            },
            "teardown": {
                "duration": 0.00033811999992394703,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_38",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.000328503000218916,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027575720000641013,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_38>\n"
            },
            "teardown": {
                "duration": 0.00027686099997481506,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_39",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003303260000393493,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0031557119998524286,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_39>\n"
            },
            "teardown": {
                "duration": 0.00035056299998359464,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_4",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036511000007521943,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002537438999979713,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_4>\n"
            },
            "teardown": {
                "duration": 0.0002688659999421361,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_40",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003298210001503321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002859978000060437,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_40>\n"
            },
            "teardown": {
                "duration": 0.0003635890000168729,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_41",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035619799996311485,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002784251000093718,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_41>\n"
            },
            "teardown": {
                "duration": 0.00026292999996258004,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_42",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00032437599998047517,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002877555999930337,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_42>\n"
            },
            "teardown": {
                "duration": 0.00026973300009558443,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_43",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039010299997244147,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0062504879999778495,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_43>\n"
            },
            "teardown": {
                "duration": 0.0002666480002062599,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_44",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003290580000339105,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004769071999817243,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_44>\n"
            },
            "teardown": {
                "duration": 0.0003582199999527802,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_45",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00032804800002850243,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09652425600006609,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_45>\n"
            },
            "teardown": {
                "duration": 0.000569865999977992,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_46",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005585409999184776,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004786822999903961,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_46>\n"
            },
            "teardown": {
                "duration": 0.0002942599999187223,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_47",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004097760001968709,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005088205999982165,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_47>\n"
            },
            "teardown": {
                "duration": 0.0002722570000059932,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_48",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036549600008584093,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004779016999918895,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_48>\n"
            },
            "teardown": {
                "duration": 0.00040896800010159495,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_49",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039513500018983905,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004986283999869556,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_49>\n"
            },
            "teardown": {
                "duration": 0.00024848499992913275,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_5",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034326099989812064,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002775544000087393,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_5>\n"
            },
            "teardown": {
                "duration": 0.0003106459998889477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_50",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040400899979431415,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0051656240000284015,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_50>\n"
            },
            "teardown": {
                "duration": 0.00026762300012705964,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_51",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003318829999443551,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0051659630000813195,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_51>\n"
            },
            "teardown": {
                "duration": 0.0002263909998418967,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_52",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003677230001812859,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004926908000015828,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_52>\n"
            },
            "teardown": {
                "duration": 0.00029666899990843376,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_53",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003806070001246553,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005076896999980818,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_53>\n"
            },
            "teardown": {
                "duration": 0.00024522299986529106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_54",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003462289998878987,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012781291000010242,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_54>\n"
            },
            "teardown": {
                "duration": 0.00029200700009823777,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_55",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037305300020307186,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007047653999961767,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_55>\n"
            },
            "teardown": {
                "duration": 0.0002782139999908395,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_56",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035464899997350585,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02172575000008692,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_56>\n"
            },
            "teardown": {
                "duration": 0.0003221959998427337,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_57",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003320929999972577,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007197986999926798,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_57>\n"
            },
            "teardown": {
                "duration": 0.0002850399998806097,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_58",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003932499998882122,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007046054000056756,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_58>\n"
            },
            "teardown": {
                "duration": 0.00026590600009512855,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_59",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003318680001029861,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007502514999941923,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_59>\n"
            },
            "teardown": {
                "duration": 0.0002944839998235693,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_6",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041706399997565313,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002943598000001657,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_6>\n"
            },
            "teardown": {
                "duration": 0.0003695809998589539,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_60",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040398700002697296,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007334013999980016,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_60>\n"
            },
            "teardown": {
                "duration": 0.0003046520000680175,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_61",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003832769998552976,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00738426799989611,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_61>\n"
            },
            "teardown": {
                "duration": 0.0002808650001497881,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_62",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034945399988828285,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007561706000160484,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_62>\n"
            },
            "teardown": {
                "duration": 0.0002841349999016529,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_63",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003608309998526238,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007171317000029376,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_63>\n"
            },
            "teardown": {
                "duration": 0.0002872459999707644,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_64",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034795999999914784,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007703135999918231,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_64>\n"
            },
            "teardown": {
                "duration": 0.0003718949999438337,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_65",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003590880000956531,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028367792000153713,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_65>\n"
            },
            "teardown": {
                "duration": 0.0003157749999900261,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_66",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034525499995652353,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012111329999697773,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_66>\n"
            },
            "teardown": {
                "duration": 0.00028400000019246363,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_67",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035597700002654165,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06072789600011674,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_67>\n"
            },
            "teardown": {
                "duration": 0.00035846200012201734,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_68",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003983159999734198,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015131130001009296,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_68>\n"
            },
            "teardown": {
                "duration": 0.00032191299987971433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_69",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039022800001475844,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0013735669999732636,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_69>\n"
            },
            "teardown": {
                "duration": 0.0002818779998960963,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_7",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003451699999459379,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027333550001458207,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_7>\n"
            },
            "teardown": {
                "duration": 0.0003631399999903806,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_70",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003483020000203396,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0017320719998679124,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_70>\n"
            },
            "teardown": {
                "duration": 0.0003094220001003123,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_71",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035004999995180697,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014014129999395664,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_71>\n"
            },
            "teardown": {
                "duration": 0.00029826200011484616,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_72",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003568790000372246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015539370001533825,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_72>\n"
            },
            "teardown": {
                "duration": 0.00030048700000406825,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_73",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034451600004103966,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015977590001057251,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_73>\n"
            },
            "teardown": {
                "duration": 0.0002882900000713562,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_74",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003961119998621143,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0017161469997972745,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_74>\n"
            },
            "teardown": {
                "duration": 0.00029992700001457706,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_75",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003936220000468893,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015059340000789234,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_75>\n"
            },
            "teardown": {
                "duration": 0.00030270000002019515,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_76",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036239800010662293,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008671412000012424,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_76>\n"
            },
            "teardown": {
                "duration": 0.00028139799997006776,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_77",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004128729999592906,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1973434129999987,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_77>\n"
            },
            "teardown": {
                "duration": 0.00042238299988639483,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_78",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047176199996101786,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10446705300000758,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_78>\n"
            },
            "teardown": {
                "duration": 0.0006144620001578005,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_79",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005452699999750621,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009208535999960077,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_79>\n"
            },
            "teardown": {
                "duration": 0.0003059390000998974,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_8",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004263280000031955,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002875921999930142,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_8>\n"
            },
            "teardown": {
                "duration": 0.00036908299989590887,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_80",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039722800011077197,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009853508000105649,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_80>\n"
            },
            "teardown": {
                "duration": 0.0002767700000276818,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_81",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003590390001591004,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00958498399995733,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_81>\n"
            },
            "teardown": {
                "duration": 0.0002914240001246071,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_82",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003436169999986305,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009570303999907992,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_82>\n"
            },
            "teardown": {
                "duration": 0.00028006100001221057,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_83",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034397000013086654,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010091923999880237,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_83>\n"
            },
            "teardown": {
                "duration": 0.00029402299992398184,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_84",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039707399992039427,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009840619999977207,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_84>\n"
            },
            "teardown": {
                "duration": 0.0004041400000005524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_85",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033313499989162665,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009342946000060692,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_85>\n"
            },
            "teardown": {
                "duration": 0.000313629999936893,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_86",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033855399988169665,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009561749000113196,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_86>\n"
            },
            "teardown": {
                "duration": 0.0002716999999847758,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_87",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.000341123999987758,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.032690427000034106,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_87>\n"
            },
            "teardown": {
                "duration": 0.0002744669998264726,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_88",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036703800014947774,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09220605699988482,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_88>\n"
            },
            "teardown": {
                "duration": 0.0003600549998736824,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_89",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004570730000068579,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10961603100008688,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_89>\n"
            },
            "teardown": {
                "duration": 0.0006188510001265968,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_9",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005397820000325737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0028500139999323437,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_9>\n"
            },
            "teardown": {
                "duration": 0.00038481100000353763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_90",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039974199989956105,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010287188999882346,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_90>\n"
            },
            "teardown": {
                "duration": 0.00031127600004765554,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_91",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041722099990693096,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010182420999854003,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_91>\n"
            },
            "teardown": {
                "duration": 0.0003680090001125791,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_92",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003862879998450808,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010175945999890246,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_92>\n"
            },
            "teardown": {
                "duration": 0.00032162000002244895,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_93",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039790999994693266,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01036843199995019,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_93>\n"
            },
            "teardown": {
                "duration": 0.00030390699998861237,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_94",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004379260001314833,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010711243999821818,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_94>\n"
            },
            "teardown": {
                "duration": 0.00030634700010523375,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_95",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037505800014514534,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010302506000016365,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_95>\n"
            },
            "teardown": {
                "duration": 0.00029174400015108404,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_96",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003639040000962268,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010321871999849463,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_96>\n"
            },
            "teardown": {
                "duration": 0.000281553999911921,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_97",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003580029999739054,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01025409299995772,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_97>\n"
            },
            "teardown": {
                "duration": 0.00028870200003439095,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_98",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034578700001475227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03490292500009673,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_98>\n"
            },
            "teardown": {
                "duration": 0.000297089000014239,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_99",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036986099985369947,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012914046000105373,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_99>\n"
            },
            "teardown": {
                "duration": 0.0003226390001600521,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jit_closure",
            "lineno": 268,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003963919998568599,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08475376299998061,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jit_closure>\n"
            },
            "teardown": {
                "duration": 0.0004921129998365359,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_0",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004822509999939939,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007517977999896175,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_0>\n"
            },
            "teardown": {
                "duration": 0.00028184400002828625,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_1",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003633660001014505,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02324871600012557,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_1>\n"
            },
            "teardown": {
                "duration": 0.0003603060001751146,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_10",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.000347827999803485,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027799840999932712,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_10>\n"
            },
            "teardown": {
                "duration": 0.0004542480000964133,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_100",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003756280000288825,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15814013999988674,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_100>\n"
            },
            "teardown": {
                "duration": 0.0005360929999369546,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_101",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045411800010697334,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05205073799993443,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_101>\n"
            },
            "teardown": {
                "duration": 0.00036361899992698454,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_102",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044599599982575455,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03827127099998506,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_102>\n"
            },
            "teardown": {
                "duration": 0.00045852800008105987,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_103",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044353900011628866,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03443113799994535,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_103>\n"
            },
            "teardown": {
                "duration": 0.0004716660000667616,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_104",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004973160000645294,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.035202598999831025,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_104>\n"
            },
            "teardown": {
                "duration": 0.0003942110001844412,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_105",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003770209998492646,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.036410811999985526,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_105>\n"
            },
            "teardown": {
                "duration": 0.00038075499992373807,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_106",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003758809998544166,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03535080000006019,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_106>\n"
            },
            "teardown": {
                "duration": 0.00042976899999302987,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_107",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004440779998731159,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03504154799998105,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_107>\n"
            },
            "teardown": {
                "duration": 0.00039636299993617286,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_108",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003720960000919149,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03552047700009098,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_108>\n"
            },
            "teardown": {
                "duration": 0.0003888120002102369,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_109",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.000375855000129377,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08729304600001342,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_109>\n"
            },
            "teardown": {
                "duration": 0.0004504349999479018,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_11",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037550199999714096,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011546069999894826,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_11>\n"
            },
            "teardown": {
                "duration": 0.00036798200017074123,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_12",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003581420000955404,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03633348699986527,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_12>\n"
            },
            "teardown": {
                "duration": 0.00032916099985413894,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_13",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038739100000384497,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011958225000171296,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_13>\n"
            },
            "teardown": {
                "duration": 0.00036433299987947976,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_14",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039526599994132994,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011808389999941937,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_14>\n"
            },
            "teardown": {
                "duration": 0.00040166200005842256,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_15",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003728350000073988,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012430838999989646,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_15>\n"
            },
            "teardown": {
                "duration": 0.00039426700004696613,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_16",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003870949999509321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01242926399982025,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_16>\n"
            },
            "teardown": {
                "duration": 0.00036610699999073404,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_17",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034850399993047176,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012753174000181389,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_17>\n"
            },
            "teardown": {
                "duration": 0.00038608899990322243,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_18",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038810600017313845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012464417000046524,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_18>\n"
            },
            "teardown": {
                "duration": 0.00037296300001798954,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_19",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.000341626999897926,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012078860999963581,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_19>\n"
            },
            "teardown": {
                "duration": 0.00036066799998479837,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_2",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037528600000769075,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0074898130001201935,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_2>\n"
            },
            "teardown": {
                "duration": 0.0003752479999548086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_20",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003398379999453027,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011910070000112682,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_20>\n"
            },
            "teardown": {
                "duration": 0.0003047060001790669,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_21",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036157599993202894,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04153587299992978,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_21>\n"
            },
            "teardown": {
                "duration": 0.0003906920001099934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_22",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003661979999378673,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007336366999879829,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_22>\n"
            },
            "teardown": {
                "duration": 0.00031924500012792123,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_23",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003956079999625217,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04881945300007828,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_23>\n"
            },
            "teardown": {
                "duration": 0.00038076200007708394,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_24",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004938300000958407,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0071928929999103275,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_24>\n"
            },
            "teardown": {
                "duration": 0.00039857399997345055,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_25",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043415300001470314,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007226574000014807,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_25>\n"
            },
            "teardown": {
                "duration": 0.00029494800014617795,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_26",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038247799989221676,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008158780000030674,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_26>\n"
            },
            "teardown": {
                "duration": 0.0002970250000089436,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_27",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034325199999329925,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008264128999826426,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_27>\n"
            },
            "teardown": {
                "duration": 0.00029952600016258657,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_28",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034666999999899417,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008936548000065159,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_28>\n"
            },
            "teardown": {
                "duration": 0.00028345399982754316,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_29",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003733139999440027,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008108143000072232,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_29>\n"
            },
            "teardown": {
                "duration": 0.0003526850000525883,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_3",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040134100004252105,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007309929000030024,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_3>\n"
            },
            "teardown": {
                "duration": 0.0003801880000082747,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_30",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003571339998416079,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008132812999974703,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_30>\n"
            },
            "teardown": {
                "duration": 0.00036095900009058823,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_31",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033832500002972665,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008674322000160828,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_31>\n"
            },
            "teardown": {
                "duration": 0.00036190399987390265,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_32",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003625310000643367,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023522539999930814,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_32>\n"
            },
            "teardown": {
                "duration": 0.00036255600002732535,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_33",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039597800014234963,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006056811000007656,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_33>\n"
            },
            "teardown": {
                "duration": 0.00028483400001277914,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_34",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003472769999461889,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012987384000098245,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_34>\n"
            },
            "teardown": {
                "duration": 0.00037573800000245683,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_35",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033782700006668165,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006313255999884859,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_35>\n"
            },
            "teardown": {
                "duration": 0.00035404799996285874,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_36",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003360309999607125,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006071480999935375,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_36>\n"
            },
            "teardown": {
                "duration": 0.0003499240001474391,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_37",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003351899999870511,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006321650000018053,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_37>\n"
            },
            "teardown": {
                "duration": 0.00027825500001199543,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_38",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003506999998990068,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0063453620000473165,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_38>\n"
            },
            "teardown": {
                "duration": 0.00042316199983361,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_39",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035756700003730657,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006650529000125971,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_39>\n"
            },
            "teardown": {
                "duration": 0.00037478299987014907,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_4",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003800609999871085,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007800491000125476,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_4>\n"
            },
            "teardown": {
                "duration": 0.0003551790000528854,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_40",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003365720001511363,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006480452999994668,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_40>\n"
            },
            "teardown": {
                "duration": 0.00027615999988483964,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_41",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003504270000576071,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00636910799994439,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_41>\n"
            },
            "teardown": {
                "duration": 0.0002817160000176955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_42",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003385409997918032,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006718409000086467,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_42>\n"
            },
            "teardown": {
                "duration": 0.00042859900008807017,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_43",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039674900017416803,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015996459000007235,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_43>\n"
            },
            "teardown": {
                "duration": 0.00029346200017243973,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_44",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035952299981545366,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012740600000142877,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_44>\n"
            },
            "teardown": {
                "duration": 0.00027752400001190836,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_45",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003610290000324312,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029388914000037403,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_45>\n"
            },
            "teardown": {
                "duration": 0.0002843550000761752,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_46",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034507800000938005,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012236579000045822,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_46>\n"
            },
            "teardown": {
                "duration": 0.0003681759999381029,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_47",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038131299993438006,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012043591000065135,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_47>\n"
            },
            "teardown": {
                "duration": 0.0003115740000794176,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_48",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034320700001444493,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012528197999927215,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_48>\n"
            },
            "teardown": {
                "duration": 0.0004761159998452058,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_49",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007759489999443758,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01224210899999889,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_49>\n"
            },
            "teardown": {
                "duration": 0.0002889439999762544,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_5",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003556839999419026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008104433000198696,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_5>\n"
            },
            "teardown": {
                "duration": 0.00027619599995887256,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_50",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003659689998585236,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012776324000014938,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_50>\n"
            },
            "teardown": {
                "duration": 0.00036381900008564116,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_51",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034190600013062067,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012462161000030392,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_51>\n"
            },
            "teardown": {
                "duration": 0.0003661880000436213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_52",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003360869998232374,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01249007100000199,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_52>\n"
            },
            "teardown": {
                "duration": 0.0003130210000108491,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_53",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003867640000407846,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012907399000141595,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_53>\n"
            },
            "teardown": {
                "duration": 0.000348435999967478,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_54",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034989000005225535,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03460689500002445,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_54>\n"
            },
            "teardown": {
                "duration": 0.00037499400013984996,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_55",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006564450000041688,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02136814499999673,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_55>\n"
            },
            "teardown": {
                "duration": 0.0003886290000991721,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_56",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003576619999421382,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05918987800009745,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_56>\n"
            },
            "teardown": {
                "duration": 0.00041385400004401163,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_57",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003892950001045392,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020648259999916263,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_57>\n"
            },
            "teardown": {
                "duration": 0.0002929839999978867,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_58",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003573690000848728,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02119591600012427,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_58>\n"
            },
            "teardown": {
                "duration": 0.0002841470000021218,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_59",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035780300004262244,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022404325000024983,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_59>\n"
            },
            "teardown": {
                "duration": 0.0003650189999007125,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_6",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036034500021742133,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00836527000001297,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_6>\n"
            },
            "teardown": {
                "duration": 0.00038812399998278124,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_60",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036393799996403686,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021879396000031193,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_60>\n"
            },
            "teardown": {
                "duration": 0.0003608839999742486,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_61",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036351199992168404,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022025392999921678,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_61>\n"
            },
            "teardown": {
                "duration": 0.0003660200000012992,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_62",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037035200011814595,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021566058999951565,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_62>\n"
            },
            "teardown": {
                "duration": 0.000309601000026305,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_63",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003528610000103072,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0217850090000411,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_63>\n"
            },
            "teardown": {
                "duration": 0.0003594959998736158,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_64",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003865619999032788,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02178225900001962,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_64>\n"
            },
            "teardown": {
                "duration": 0.00032013999998525833,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_65",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003731460001290543,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07479576200012161,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_65>\n"
            },
            "teardown": {
                "duration": 0.0003915259999303089,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_66",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003656349999801023,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005030218000001696,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_66>\n"
            },
            "teardown": {
                "duration": 0.0002583990001312486,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_67",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041744999998627463,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018927919999896403,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_67>\n"
            },
            "teardown": {
                "duration": 0.0003331519999392185,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_68",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041926100016098644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004821112999934485,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_68>\n"
            },
            "teardown": {
                "duration": 0.0003998219999630237,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_69",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003675269999803277,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004860648999965633,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_69>\n"
            },
            "teardown": {
                "duration": 0.0002960829999665293,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_7",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003693379999276658,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007873714999959702,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_7>\n"
            },
            "teardown": {
                "duration": 0.0003724210000655148,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_70",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003503839998302283,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005278589999988981,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_70>\n"
            },
            "teardown": {
                "duration": 0.0002769039999748202,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_71",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003465270001470344,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005650392000006832,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_71>\n"
            },
            "teardown": {
                "duration": 0.0002765159999853495,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_72",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035669299995788606,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005906079999931535,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_72>\n"
            },
            "teardown": {
                "duration": 0.0002778190000753966,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_73",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003483170000890823,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005254658000012569,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_73>\n"
            },
            "teardown": {
                "duration": 0.0002865149999706773,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_74",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004001669999524893,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005533953999929508,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_74>\n"
            },
            "teardown": {
                "duration": 0.000276348999932452,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_75",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003374369998709881,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005849370000078125,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_75>\n"
            },
            "teardown": {
                "duration": 0.00034846199991989124,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_76",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034895699991466245,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020793427999933556,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_76>\n"
            },
            "teardown": {
                "duration": 0.0002811580000070535,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_77",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003564950000054523,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02718374800019774,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_77>\n"
            },
            "teardown": {
                "duration": 0.0003884669999933976,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_78",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003752069999336527,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09959876000016266,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_78>\n"
            },
            "teardown": {
                "duration": 0.0003702100000282371,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_79",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042171699988102773,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02687610499992843,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_79>\n"
            },
            "teardown": {
                "duration": 0.0004194489999918005,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_8",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004026980000162439,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00804763099995398,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_8>\n"
            },
            "teardown": {
                "duration": 0.00038563099997190875,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_80",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003881449999880715,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027004744000123537,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_80>\n"
            },
            "teardown": {
                "duration": 0.00041474299996480113,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_81",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044687799982057186,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026245820999974967,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_81>\n"
            },
            "teardown": {
                "duration": 0.00027769000007538125,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_82",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.000353501000063261,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02774722300000576,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_82>\n"
            },
            "teardown": {
                "duration": 0.0003517499999361462,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_83",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041460700003881357,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027478210000026593,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_83>\n"
            },
            "teardown": {
                "duration": 0.00035974000002170214,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_84",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003508440001951385,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026996019999842247,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_84>\n"
            },
            "teardown": {
                "duration": 0.00035696700001608406,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_85",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035503899994182575,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028249896000033914,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_85>\n"
            },
            "teardown": {
                "duration": 0.0003756770001928089,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_86",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037085400003888935,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02891011800011256,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_86>\n"
            },
            "teardown": {
                "duration": 0.0003843700001198158,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_87",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035886499995285703,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08597323699996196,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_87>\n"
            },
            "teardown": {
                "duration": 0.00039347699998870667,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_88",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.000528356999893731,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02839944800007288,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_88>\n"
            },
            "teardown": {
                "duration": 0.0004228230000080657,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_89",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038851199997225194,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07283478400017884,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_89>\n"
            },
            "teardown": {
                "duration": 0.0004169829999227659,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_9",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043060400003014365,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008828689999972994,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_9>\n"
            },
            "teardown": {
                "duration": 0.0004005519999736862,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_90",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036859399983768526,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027001515000165455,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_90>\n"
            },
            "teardown": {
                "duration": 0.0003903609999724722,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_91",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003736609999123175,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02613658000018404,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_91>\n"
            },
            "teardown": {
                "duration": 0.00037683400000787515,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_92",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003719459998592356,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026614199000050576,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_92>\n"
            },
            "teardown": {
                "duration": 0.00033433700014029455,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_93",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040265699999508797,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028425575000028402,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_93>\n"
            },
            "teardown": {
                "duration": 0.0003310109998437838,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_94",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043233199994574534,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02855688799991185,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_94>\n"
            },
            "teardown": {
                "duration": 0.00033217400005014497,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_95",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004237160001139273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0291090499999882,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_95>\n"
            },
            "teardown": {
                "duration": 0.0004136970001127338,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_96",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004172480000761425,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0279532360000303,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_96>\n"
            },
            "teardown": {
                "duration": 0.0003704400000970054,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_97",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004241619999447721,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028525089999902775,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_97>\n"
            },
            "teardown": {
                "duration": 0.00038386899996112334,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_98",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039139099999374594,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08612324899991108,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_98>\n"
            },
            "teardown": {
                "duration": 0.00042097000005014706,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_99",
            "lineno": 227,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045550400000138325,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.038839430000052744,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_99>\n"
            },
            "teardown": {
                "duration": 0.0004716409998763993,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_closure",
            "lineno": 258,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004932670001380757,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006035059000168985,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_closure>\n"
            },
            "teardown": {
                "duration": 0.00032815099984873086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized0",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.000431500000104279,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010358041000017693,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized0>\n"
            },
            "teardown": {
                "duration": 0.00043088400002488925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized1",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040515000000596046,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.030207699999891702,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized1>\n"
            },
            "teardown": {
                "duration": 0.00035166399993613595,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized10",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043247799999335257,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03553282099983335,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized10>\n"
            },
            "teardown": {
                "duration": 0.0004657760000554845,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized100",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041683600011310773,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09208240499992826,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized100>\n"
            },
            "teardown": {
                "duration": 0.00041407499998058483,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized101",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004886690001058014,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.040515240999866364,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized101>\n"
            },
            "teardown": {
                "duration": 0.00053410000009535,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized102",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005083260000446899,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.038231948999964516,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized102>\n"
            },
            "teardown": {
                "duration": 0.00042252499997630366,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized103",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044647699996858137,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04005983699994431,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized103>\n"
            },
            "teardown": {
                "duration": 0.00039065400005711126,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized104",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038424399986070057,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0406121369999255,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized104>\n"
            },
            "teardown": {
                "duration": 0.00039375100004690466,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized105",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.000393735999978162,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04290383300008216,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized105>\n"
            },
            "teardown": {
                "duration": 0.00042087399992851715,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized106",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043928400009463076,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04111693599998034,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized106>\n"
            },
            "teardown": {
                "duration": 0.00041622499998084095,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized107",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003971569999521307,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04085198300003867,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized107>\n"
            },
            "teardown": {
                "duration": 0.0003067709999413637,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized108",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039604399989912054,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04236611000010271,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized108>\n"
            },
            "teardown": {
                "duration": 0.0003903540000465,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized109",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003886399999828427,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09437725399993724,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized109>\n"
            },
            "teardown": {
                "duration": 0.00030341499996211496,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized11",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035936099993705284,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0130810969999402,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized11>\n"
            },
            "teardown": {
                "duration": 0.00027914699990105873,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized12",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004009260001112125,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04066356899988932,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized12>\n"
            },
            "teardown": {
                "duration": 0.000312852999968527,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized13",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037020099989604205,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014133230999959778,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized13>\n"
            },
            "teardown": {
                "duration": 0.000306043999898975,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized14",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004012599999896338,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014210705000095913,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized14>\n"
            },
            "teardown": {
                "duration": 0.000302438000062466,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized15",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039298399997278466,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015690785000060714,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized15>\n"
            },
            "teardown": {
                "duration": 0.0003110280001692445,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized16",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003561239998361998,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014720533000172509,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized16>\n"
            },
            "teardown": {
                "duration": 0.0002827079999860871,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized17",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003688549998059898,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01736064700003226,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized17>\n"
            },
            "teardown": {
                "duration": 0.00028360999999677006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized18",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035602100001597137,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014857463999987885,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized18>\n"
            },
            "teardown": {
                "duration": 0.0003010849998190679,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized19",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039620999996259343,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014511507999941387,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized19>\n"
            },
            "teardown": {
                "duration": 0.00030119999996713887,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized2",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040122199993675167,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008503871000129948,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized2>\n"
            },
            "teardown": {
                "duration": 0.0002785689998745511,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized20",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033551399997122644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01574245299980248,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized20>\n"
            },
            "teardown": {
                "duration": 0.00027475699994283787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized21",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037760899999739195,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04567636499996297,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized21>\n"
            },
            "teardown": {
                "duration": 0.0002774980000594951,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized22",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034147899987146957,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008536273999879995,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized22>\n"
            },
            "teardown": {
                "duration": 0.0002728429999478976,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized23",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003644579999217967,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022592073999931017,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized23>\n"
            },
            "teardown": {
                "duration": 0.00027278099992145144,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized24",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003444059998400917,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008188171000028888,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized24>\n"
            },
            "teardown": {
                "duration": 0.00030185800005710917,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized25",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003438359999563545,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007996510999873863,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized25>\n"
            },
            "teardown": {
                "duration": 0.00029843000015716825,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized26",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034799500008375617,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010422071999983018,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized26>\n"
            },
            "teardown": {
                "duration": 0.00030341000001499197,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized27",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003508769998461503,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010519788999999946,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized27>\n"
            },
            "teardown": {
                "duration": 0.00027475000001686567,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized28",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003349149999394285,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012479496000196377,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized28>\n"
            },
            "teardown": {
                "duration": 0.0002753370001755684,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized29",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036194500012243225,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01138195400017139,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized29>\n"
            },
            "teardown": {
                "duration": 0.00033151499997075007,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized3",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004440669999894453,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009451876999946762,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized3>\n"
            },
            "teardown": {
                "duration": 0.0003164370000376948,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized30",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040970000009110663,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011480757000072117,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized30>\n"
            },
            "teardown": {
                "duration": 0.0002995919999193575,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized31",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003895830000146816,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012772281000025032,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized31>\n"
            },
            "teardown": {
                "duration": 0.0003003039998930035,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized32",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003853230000459007,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0260221220000858,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized32>\n"
            },
            "teardown": {
                "duration": 0.00028550499996526923,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized33",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033522900002935785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006761791999906563,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized33>\n"
            },
            "teardown": {
                "duration": 0.00027675400019688823,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized34",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003472680000413675,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014722292999977071,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized34>\n"
            },
            "teardown": {
                "duration": 0.00027703399996426015,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized35",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044365899998410896,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006587035999928048,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized35>\n"
            },
            "teardown": {
                "duration": 0.00029953400007798336,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized36",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.000339370999881794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006684231000008367,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized36>\n"
            },
            "teardown": {
                "duration": 0.0003444330000093032,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized37",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003731090000655968,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007678398000052766,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized37>\n"
            },
            "teardown": {
                "duration": 0.00030470699994111783,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized38",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.000339365999934671,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008024970000178655,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized38>\n"
            },
            "teardown": {
                "duration": 0.000298787000019729,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized39",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003534590000526805,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00907850400017196,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized39>\n"
            },
            "teardown": {
                "duration": 0.0002810390001286578,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized4",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035377999984120834,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010810584999944695,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized4>\n"
            },
            "teardown": {
                "duration": 0.00029897900003561517,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized40",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036068300005354104,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00804247199994279,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized40>\n"
            },
            "teardown": {
                "duration": 0.00029583900004581665,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized41",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003914110000096116,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008108312000103979,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized41>\n"
            },
            "teardown": {
                "duration": 0.00031475800005864585,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized42",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035731499997382343,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009124303000135114,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized42>\n"
            },
            "teardown": {
                "duration": 0.00030204699987734784,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized43",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.000355403999947157,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01717725799994696,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized43>\n"
            },
            "teardown": {
                "duration": 0.00031906499998513027,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized44",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036495299991656793,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013359753999793611,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized44>\n"
            },
            "teardown": {
                "duration": 0.0003291080001872615,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized45",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003824020000138262,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.031833240999958434,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized45>\n"
            },
            "teardown": {
                "duration": 0.0003786930001297151,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized46",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035980200004814833,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012532664999980625,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized46>\n"
            },
            "teardown": {
                "duration": 0.00027934500008086616,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized47",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003803270001299097,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012668061000113084,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized47>\n"
            },
            "teardown": {
                "duration": 0.000404852999963623,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized48",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003443979999246949,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014321812999924077,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized48>\n"
            },
            "teardown": {
                "duration": 0.00035111100009999063,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized49",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003556819999630534,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014197534999993877,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized49>\n"
            },
            "teardown": {
                "duration": 0.00027410699999563803,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized5",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040636900007484655,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01012381399982587,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized5>\n"
            },
            "teardown": {
                "duration": 0.00027171300007466925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized50",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003342610000345303,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015464843000017936,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized50>\n"
            },
            "teardown": {
                "duration": 0.00034955000000991276,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized51",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036614800001188996,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015304742999887821,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized51>\n"
            },
            "teardown": {
                "duration": 0.00027355699990039284,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized52",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036063799984731304,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013834583000061684,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized52>\n"
            },
            "teardown": {
                "duration": 0.0003951279998091195,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized53",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003817760000401904,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01470037199987928,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized53>\n"
            },
            "teardown": {
                "duration": 0.00027712400014934246,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized54",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003374020000137534,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.034646430000066175,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized54>\n"
            },
            "teardown": {
                "duration": 0.00038907799989829073,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized55",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034701200002018595,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022357837000072323,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized55>\n"
            },
            "teardown": {
                "duration": 0.00036183599991090887,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized56",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036084499993194186,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06635218200017334,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized56>\n"
            },
            "teardown": {
                "duration": 0.00030402200013668335,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized57",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003797740000663907,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02418488599982993,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized57>\n"
            },
            "teardown": {
                "duration": 0.0003133029999844439,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized58",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004280180000932887,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02383281400011583,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized58>\n"
            },
            "teardown": {
                "duration": 0.0002796100000068691,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized59",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034673400000428956,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026996560000043246,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized59>\n"
            },
            "teardown": {
                "duration": 0.00037906099987594644,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized6",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034354599983998924,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012071891999994477,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized6>\n"
            },
            "teardown": {
                "duration": 0.0003460860000359389,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized60",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003515109999625565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026405780000004597,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized60>\n"
            },
            "teardown": {
                "duration": 0.00038115500001367764,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized61",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035995500002172776,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029320148999886442,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized61>\n"
            },
            "teardown": {
                "duration": 0.00028139000005467096,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized62",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004111619998639071,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025478815000042232,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized62>\n"
            },
            "teardown": {
                "duration": 0.00041793500008679985,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized63",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003826869999556948,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02576757999986512,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized63>\n"
            },
            "teardown": {
                "duration": 0.0003557140000793879,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized64",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.000375376999954824,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02725140300003659,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized64>\n"
            },
            "teardown": {
                "duration": 0.0004009799999948882,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized65",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044288699996286596,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07961133900016648,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized65>\n"
            },
            "teardown": {
                "duration": 0.00031545800015919667,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized66",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038678999999319785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0060419040000851965,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized66>\n"
            },
            "teardown": {
                "duration": 0.0002832630000284553,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized67",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003546259999893664,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020931503999918277,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized67>\n"
            },
            "teardown": {
                "duration": 0.0002728510000906681,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized68",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003500810000787169,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005685231999905227,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized68>\n"
            },
            "teardown": {
                "duration": 0.00025546400001985603,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized69",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003382949998922413,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00569691700002295,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized69>\n"
            },
            "teardown": {
                "duration": 0.0004247080000823189,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized7",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003359679999448417,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010088126999789893,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized7>\n"
            },
            "teardown": {
                "duration": 0.00033612299989727035,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized70",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036367899997458153,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006735850000040955,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized70>\n"
            },
            "teardown": {
                "duration": 0.00029832900008841534,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized71",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042142300003433775,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006828417999940939,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized71>\n"
            },
            "teardown": {
                "duration": 0.0002722290000747307,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized72",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003648590000011609,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008312900999953854,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized72>\n"
            },
            "teardown": {
                "duration": 0.0002872400000342168,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized73",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038476299982903583,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0069969639998817,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized73>\n"
            },
            "teardown": {
                "duration": 0.000273529999958555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized74",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035276600010547554,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007043404000114606,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized74>\n"
            },
            "teardown": {
                "duration": 0.0002888900000925787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized75",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003456980000464682,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007938164000051984,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized75>\n"
            },
            "teardown": {
                "duration": 0.0002823249999437394,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized76",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035333000005266513,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02432114799989904,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized76>\n"
            },
            "teardown": {
                "duration": 0.00029535099997701764,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized77",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003383380001196201,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029772477000051367,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized77>\n"
            },
            "teardown": {
                "duration": 0.0004021260001536575,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized78",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004195179999442189,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08416621900005339,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized78>\n"
            },
            "teardown": {
                "duration": 0.00046136499986459967,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized79",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004003259998626163,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.031262050999885105,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized79>\n"
            },
            "teardown": {
                "duration": 0.00032802300006551377,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized8",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004203490000236343,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01078212600009465,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized8>\n"
            },
            "teardown": {
                "duration": 0.00040759799981060496,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized80",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.000401680000095439,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03016720899995562,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized80>\n"
            },
            "teardown": {
                "duration": 0.00031646799993723107,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized81",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038661100006720517,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03322850100016694,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized81>\n"
            },
            "teardown": {
                "duration": 0.00041827199993349495,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized82",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036864100002276246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03268894799998634,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized82>\n"
            },
            "teardown": {
                "duration": 0.00039049399993018596,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized83",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037313999996513303,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03456481600005645,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized83>\n"
            },
            "teardown": {
                "duration": 0.0003580500001589826,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized84",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003414049999719282,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03391466700009005,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized84>\n"
            },
            "teardown": {
                "duration": 0.0004895080001006136,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized85",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003577210000003106,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.031218593999938093,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized85>\n"
            },
            "teardown": {
                "duration": 0.00036265500011722906,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized86",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003579860001536872,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03250262100004875,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized86>\n"
            },
            "teardown": {
                "duration": 0.00037766699983876606,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized87",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037384699999165605,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08839916900001299,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized87>\n"
            },
            "teardown": {
                "duration": 0.0002930059999926016,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized88",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003715619998274633,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.031252743000095506,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized88>\n"
            },
            "teardown": {
                "duration": 0.0003156830000534683,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized89",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037573600002360763,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08000924699990719,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized89>\n"
            },
            "teardown": {
                "duration": 0.00028908400008731405,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized9",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003542309998465498,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012930262999816478,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized9>\n"
            },
            "teardown": {
                "duration": 0.00032344299984288227,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized90",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003830739999557409,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03643327300005694,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized90>\n"
            },
            "teardown": {
                "duration": 0.0003965060000155063,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized91",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003588070001114829,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02929780599993137,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized91>\n"
            },
            "teardown": {
                "duration": 0.0002859030000763596,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized92",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.000346254000078261,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.033222789000092234,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized92>\n"
            },
            "teardown": {
                "duration": 0.00037417900011860183,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized93",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004147639999700914,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.033160726000005525,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized93>\n"
            },
            "teardown": {
                "duration": 0.000367446999916865,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized94",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003653020000911056,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03606737599989174,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized94>\n"
            },
            "teardown": {
                "duration": 0.00041789099986999645,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized95",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037572900009763543,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03361473899985867,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized95>\n"
            },
            "teardown": {
                "duration": 0.00039421199994649214,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized96",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037300300004972087,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0326435560000391,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized96>\n"
            },
            "teardown": {
                "duration": 0.0004448380000212637,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized97",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004194000000552478,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03354254900000342,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized97>\n"
            },
            "teardown": {
                "duration": 0.00037067800008117047,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized98",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035359999992579105,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09119273400006023,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized98>\n"
            },
            "teardown": {
                "duration": 0.0003249129999858269,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_linearized99",
            "lineno": 242,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003935600000204431,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03620723300014106,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_linearized99>\n"
            },
            "teardown": {
                "duration": 0.0002964520001569326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_repeated_fwd",
            "lineno": 314,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003642380002020218,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018653416999995898,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_repeated_fwd>\n"
            },
            "teardown": {
                "duration": 0.0003836710000086896,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_jvp_zeros",
            "lineno": 233,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038235300007727346,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007520495999870036,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_jvp_zeros>\n"
            },
            "teardown": {
                "duration": 0.00030287499998848944,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_product_jit",
            "lineno": 298,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004373890001261316,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009206019999510318,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_product_jit>\n"
            },
            "teardown": {
                "duration": 0.0002987569998822437,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_reference_cycles",
            "lineno": 323,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037467599986484856,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12329738099992937,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_reference_cycles>\n"
            },
            "teardown": {
                "duration": 0.00040819200012265355,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_reference_cycles_jit",
            "lineno": 340,
            "outcome": "passed",
            "setup": {
                "duration": 0.000416852000171275,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0951069859997915,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_reference_cycles_jit>\n"
            },
            "teardown": {
                "duration": 0.0003822179999133368,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_simple_jit",
            "lineno": 278,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003952080000999558,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011181390000274405,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_simple_jit>\n"
            },
            "teardown": {
                "duration": 0.0003182210000431951,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_tree_flatten",
            "lineno": 209,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039591699987795437,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006403799998224713,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_tree_flatten>\n"
            },
            "teardown": {
                "duration": 0.00026825499980986933,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_tree_map",
            "lineno": 195,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003516790000048786,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007341859998177824,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_tree_map>\n"
            },
            "teardown": {
                "duration": 0.00028726799996547925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_tree_unflatten",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003427849999297905,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006399789999704808,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_tree_unflatten>\n"
            },
            "teardown": {
                "duration": 0.00026823000007425435,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_var_compared_by_identity",
            "lineno": 374,
            "outcome": "passed",
            "setup": {
                "duration": 0.00032493000003341876,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006427639998491941,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_var_compared_by_identity>\n"
            },
            "teardown": {
                "duration": 0.0002730000001065491,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_var_ordering",
            "lineno": 366,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041964400020333414,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006531899998662993,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_var_ordering>\n"
            },
            "teardown": {
                "duration": 0.00028355199992802227,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_var_tree_flatten",
            "lineno": 380,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003859939999983908,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007371729998340015,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_var_tree_flatten>\n"
            },
            "teardown": {
                "duration": 0.0002909330000875343,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_0",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00032759400005488715,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009649163999938537,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_0>\n"
            },
            "teardown": {
                "duration": 0.00035752899998442444,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_1",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004006039998785127,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026974412999834385,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_1>\n"
            },
            "teardown": {
                "duration": 0.00043652799990923086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_10",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037028700012342597,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03135116800012838,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_10>\n"
            },
            "teardown": {
                "duration": 0.0003512519999731012,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_100",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003481009998722584,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08200642199994945,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_100>\n"
            },
            "teardown": {
                "duration": 0.0004034050000427669,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_101",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036815299995396344,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03664215100002366,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_101>\n"
            },
            "teardown": {
                "duration": 0.00038989199993011425,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_102",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037350799993873807,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.038333844000135286,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_102>\n"
            },
            "teardown": {
                "duration": 0.0004014349999579281,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_103",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003908630001205893,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03904488999978639,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_103>\n"
            },
            "teardown": {
                "duration": 0.00032029599992711155,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_104",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003765479998492083,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03835741600005349,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_104>\n"
            },
            "teardown": {
                "duration": 0.000390856999956668,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_105",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003558850000899838,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.041005412999993496,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_105>\n"
            },
            "teardown": {
                "duration": 0.0004298100000141858,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_106",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041245000011258526,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04186890400001175,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_106>\n"
            },
            "teardown": {
                "duration": 0.00033062800002880977,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_107",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045362799983195146,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03933383200001117,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_107>\n"
            },
            "teardown": {
                "duration": 0.0003444550000040181,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_108",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038319299983413657,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04050419400005012,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_108>\n"
            },
            "teardown": {
                "duration": 0.00028007500009152864,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_109",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003603040001962654,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09193282299997918,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_109>\n"
            },
            "teardown": {
                "duration": 0.00033146900000247115,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_11",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.000419835000002422,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013169967999829169,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_11>\n"
            },
            "teardown": {
                "duration": 0.0003432799999245617,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_12",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035720100004255073,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03959585400002652,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_12>\n"
            },
            "teardown": {
                "duration": 0.00029329900007724063,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_13",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003773749999709253,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01309092800011058,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_13>\n"
            },
            "teardown": {
                "duration": 0.00027547000013328216,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_14",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034823700002561964,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013224626000010176,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_14>\n"
            },
            "teardown": {
                "duration": 0.00033418199996049225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_15",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038054099991313706,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014933432000134417,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_15>\n"
            },
            "teardown": {
                "duration": 0.00030850899997858505,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_16",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003508029999466089,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015084670000078404,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_16>\n"
            },
            "teardown": {
                "duration": 0.00037036899993836414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_17",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003744719999758672,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017304282000168314,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_17>\n"
            },
            "teardown": {
                "duration": 0.0003983789999892906,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_18",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034768999989864824,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015319214999863107,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_18>\n"
            },
            "teardown": {
                "duration": 0.0002850729999863688,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_19",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003746320001027925,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016089529000055336,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_19>\n"
            },
            "teardown": {
                "duration": 0.000367297999900984,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_2",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038082299988673185,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008372734000204218,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_2>\n"
            },
            "teardown": {
                "duration": 0.0003505100000893435,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_20",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003672750001442182,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017064935999997033,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_20>\n"
            },
            "teardown": {
                "duration": 0.00040487000001121487,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_21",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041179499999088875,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.049796301000014864,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_21>\n"
            },
            "teardown": {
                "duration": 0.0003375119999873277,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_22",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004010919999473117,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008931581999831906,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_22>\n"
            },
            "teardown": {
                "duration": 0.0003156849998049438,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_23",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039436599990949617,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02173172000016166,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_23>\n"
            },
            "teardown": {
                "duration": 0.0002889500001401757,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_24",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003833880000456702,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008219202999953268,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_24>\n"
            },
            "teardown": {
                "duration": 0.00028687799999715935,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_25",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037925000015093246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00815219200012507,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_25>\n"
            },
            "teardown": {
                "duration": 0.0003069710001000203,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_26",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037080399988553836,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01003036199995222,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_26>\n"
            },
            "teardown": {
                "duration": 0.0004253859999607812,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_27",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003548489999047888,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01003942200009078,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_27>\n"
            },
            "teardown": {
                "duration": 0.0003894809999565041,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_28",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004062780001277133,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012354897000022902,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_28>\n"
            },
            "teardown": {
                "duration": 0.00036958700002287515,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_29",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003934480000680196,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010583020000012766,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_29>\n"
            },
            "teardown": {
                "duration": 0.0003760150000289286,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_3",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033239999993384117,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00895528099999865,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_3>\n"
            },
            "teardown": {
                "duration": 0.00028157799988548504,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_30",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003340400000979571,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010144134000029226,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_30>\n"
            },
            "teardown": {
                "duration": 0.0003618759999426402,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_31",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003537830000368558,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012183276000087062,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_31>\n"
            },
            "teardown": {
                "duration": 0.00042988600011995004,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_32",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003709929999331507,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024905363000016223,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_32>\n"
            },
            "teardown": {
                "duration": 0.00033761999998205283,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_33",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004067270001542056,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006674213999986023,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_33>\n"
            },
            "teardown": {
                "duration": 0.00033733800000845804,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_34",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036549199990076886,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014307068999869443,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_34>\n"
            },
            "teardown": {
                "duration": 0.0003001349998612568,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_35",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033728299990798405,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006468646000030276,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_35>\n"
            },
            "teardown": {
                "duration": 0.0003486509999675036,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_36",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037168000017118175,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006540286000017659,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_36>\n"
            },
            "teardown": {
                "duration": 0.0002694899999369227,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_37",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033396200001334364,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007706482000003234,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_37>\n"
            },
            "teardown": {
                "duration": 0.0003304330000446498,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_38",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035995899997942615,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007764208000025974,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_38>\n"
            },
            "teardown": {
                "duration": 0.00027382500002204324,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_39",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003361840001616656,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008974463999948057,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_39>\n"
            },
            "teardown": {
                "duration": 0.0002840259999175032,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_4",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035069199998361,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010190617000034763,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_4>\n"
            },
            "teardown": {
                "duration": 0.0002970409998397372,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_40",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003502520000893128,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007813534999968397,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_40>\n"
            },
            "teardown": {
                "duration": 0.00026957899990520673,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_41",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033399600010852737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007866382999964117,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_41>\n"
            },
            "teardown": {
                "duration": 0.00036897299992233457,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_42",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035083499983556976,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008612348000042402,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_42>\n"
            },
            "teardown": {
                "duration": 0.00035016300012102874,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_43",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033192599994436023,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016393159000017477,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_43>\n"
            },
            "teardown": {
                "duration": 0.00030341400020006404,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_44",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035592099993664306,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012601235999909477,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_44>\n"
            },
            "teardown": {
                "duration": 0.00034196500018879306,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_45",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003526190000684437,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.030920401999992464,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_45>\n"
            },
            "teardown": {
                "duration": 0.00027344199997969554,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_46",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003502400002162176,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012980132999928173,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_46>\n"
            },
            "teardown": {
                "duration": 0.0003491870002108044,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_47",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003420010000354523,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013072361000013188,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_47>\n"
            },
            "teardown": {
                "duration": 0.00037395799995465495,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_48",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035396500015849597,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015249371999971117,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_48>\n"
            },
            "teardown": {
                "duration": 0.0003571689999262162,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_49",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033478899990768696,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015223530999946888,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_49>\n"
            },
            "teardown": {
                "duration": 0.0004132199999276054,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_5",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045682100017074845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010477037000100609,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_5>\n"
            },
            "teardown": {
                "duration": 0.00028421799993338936,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_50",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033989099983955384,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015484560000004421,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_50>\n"
            },
            "teardown": {
                "duration": 0.000350412999978289,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_51",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033714700020937016,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014499874000193813,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_51>\n"
            },
            "teardown": {
                "duration": 0.00034247600001435785,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_52",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003699349999806145,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014687539000078687,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_52>\n"
            },
            "teardown": {
                "duration": 0.00029460900009325997,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_53",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004359459999250248,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015401489999931073,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_53>\n"
            },
            "teardown": {
                "duration": 0.00038340600008268666,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_54",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003472060000149213,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.035671188999913284,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_54>\n"
            },
            "teardown": {
                "duration": 0.0002743430000009539,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_55",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.000350403000084043,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023744382000131736,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_55>\n"
            },
            "teardown": {
                "duration": 0.0003680639999856794,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_56",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036372199997458665,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06918624399986584,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_56>\n"
            },
            "teardown": {
                "duration": 0.00036852200014436676,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_57",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003846189999876515,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023223385000164853,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_57>\n"
            },
            "teardown": {
                "duration": 0.00036200900012772763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_58",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.000340616000130467,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022917827999890505,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_58>\n"
            },
            "teardown": {
                "duration": 0.0003711169999860431,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_59",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003484329999992042,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025062174000140658,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_59>\n"
            },
            "teardown": {
                "duration": 0.0002885530000185099,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_6",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003505839999888849,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011763306999910128,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_6>\n"
            },
            "teardown": {
                "duration": 0.00027398799988986866,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_60",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003386830001090857,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029542213000013362,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_60>\n"
            },
            "teardown": {
                "duration": 0.0004895879999367025,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_61",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004334019999987504,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028401174000009632,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_61>\n"
            },
            "teardown": {
                "duration": 0.0004430249998677027,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_62",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038782399997217,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027063136999913695,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_62>\n"
            },
            "teardown": {
                "duration": 0.00038490599990836927,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_63",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037898699997640506,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027790366000090216,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_63>\n"
            },
            "teardown": {
                "duration": 0.0003932539998459106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_64",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042683600008786016,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02855776399997012,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_64>\n"
            },
            "teardown": {
                "duration": 0.0003848950000246987,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_65",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036869399991701357,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08045380600015051,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_65>\n"
            },
            "teardown": {
                "duration": 0.00044621600000027684,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_66",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004266969999662251,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006126514000015959,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_66>\n"
            },
            "teardown": {
                "duration": 0.00031714300007479324,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_67",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038779800001975673,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020731599999862738,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_67>\n"
            },
            "teardown": {
                "duration": 0.000302572999999029,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_68",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003661289999854489,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006274166000139303,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_68>\n"
            },
            "teardown": {
                "duration": 0.000303852999877563,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_69",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003589170000850572,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0061565209998661885,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_69>\n"
            },
            "teardown": {
                "duration": 0.00036122400001659116,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_7",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037142299993320194,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010956185999930312,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_7>\n"
            },
            "teardown": {
                "duration": 0.00029073900009279896,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_70",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003355210001245723,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0071005249999416264,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_70>\n"
            },
            "teardown": {
                "duration": 0.0003818760001195187,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_71",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036267699988457025,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006956289000072502,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_71>\n"
            },
            "teardown": {
                "duration": 0.0003608689999055059,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_72",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003821140001036838,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008440853999900355,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_72>\n"
            },
            "teardown": {
                "duration": 0.0003776170001401624,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_73",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034419100006743975,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0072367640000265965,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_73>\n"
            },
            "teardown": {
                "duration": 0.00036478699985309504,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_74",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037721500007137365,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0070177390000480955,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_74>\n"
            },
            "teardown": {
                "duration": 0.00027399900000091293,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_75",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003508779998355749,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008330956000008882,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_75>\n"
            },
            "teardown": {
                "duration": 0.0003710910000336298,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_76",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003582889999051986,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02355289999991328,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_76>\n"
            },
            "teardown": {
                "duration": 0.00034489600011511357,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_77",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034747499989862263,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08335870199994133,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_77>\n"
            },
            "teardown": {
                "duration": 0.0005043409998961579,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_78",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004509939999479684,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07960767500003385,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_78>\n"
            },
            "teardown": {
                "duration": 0.0004492140001275402,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_79",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041334899992762075,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029415122000045812,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_79>\n"
            },
            "teardown": {
                "duration": 0.0003948910000417527,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_8",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045813800011274,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010345376999794098,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_8>\n"
            },
            "teardown": {
                "duration": 0.00038513899994541134,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_80",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003852830000141694,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028544737999936842,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_80>\n"
            },
            "teardown": {
                "duration": 0.00040626999998494284,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_81",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003726439999809372,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.030864659000144457,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_81>\n"
            },
            "teardown": {
                "duration": 0.00041952800006583857,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_82",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037803600002916937,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03387496999994255,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_82>\n"
            },
            "teardown": {
                "duration": 0.0004181230001449876,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_83",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042214600011902803,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03649208000001636,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_83>\n"
            },
            "teardown": {
                "duration": 0.00040510299982088327,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_84",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039657299998907547,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0322789350000221,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_84>\n"
            },
            "teardown": {
                "duration": 0.0003324829999655776,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_85",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004142010000123264,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03289552800015372,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_85>\n"
            },
            "teardown": {
                "duration": 0.0003031090000149561,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_86",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037651100001312443,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03493759500020133,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_86>\n"
            },
            "teardown": {
                "duration": 0.00032954499988591124,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_87",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003760179999972024,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09015458699991541,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_87>\n"
            },
            "teardown": {
                "duration": 0.00041228899999623536,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_88",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037479000002349494,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.031071401999952286,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_88>\n"
            },
            "teardown": {
                "duration": 0.0003753610001240304,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_89",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036411799987945415,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08126665300005698,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_89>\n"
            },
            "teardown": {
                "duration": 0.00045588600005430635,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_9",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044029200012118963,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01227314200014007,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_9>\n"
            },
            "teardown": {
                "duration": 0.0002995629999986704,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_90",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003711400001975562,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.030171278999887363,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_90>\n"
            },
            "teardown": {
                "duration": 0.0003034960000150022,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_91",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045504400009122037,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.030273423999915394,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_91>\n"
            },
            "teardown": {
                "duration": 0.00029557099992416624,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_92",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003595919999952457,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.032044985999846176,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_92>\n"
            },
            "teardown": {
                "duration": 0.0003990989998783334,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_93",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003807460000189167,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03196945100012272,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_93>\n"
            },
            "teardown": {
                "duration": 0.00035808600000564184,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_94",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003556190001745563,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03550171300003058,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_94>\n"
            },
            "teardown": {
                "duration": 0.0003094640001108928,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_95",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040376700007982436,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03448661099992023,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_95>\n"
            },
            "teardown": {
                "duration": 0.0004033099999105616,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_96",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003689550001126918,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03460652400008257,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_96>\n"
            },
            "teardown": {
                "duration": 0.00036310600012257055,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_97",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004266509999979462,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.036618309000004956,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_97>\n"
            },
            "teardown": {
                "duration": 0.0003434579998611298,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_98",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.000512267999965843,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09135199999991528,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_98>\n"
            },
            "teardown": {
                "duration": 0.00034343199990871653,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::CoreTest::test_vjp_99",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040522599988435104,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.035900110999818935,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_vjp_99>\n"
            },
            "teardown": {
                "duration": 0.004433331000200269,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::JaxprTypeChecks::test_raise_to_shaped_weak_type0",
            "lineno": 414,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041756199993869814,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005916329998854053,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raise_to_shaped_weak_type0>\n"
            },
            "teardown": {
                "duration": 0.0002714849999847502,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::JaxprTypeChecks::test_raise_to_shaped_weak_type1",
            "lineno": 414,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036135300001660653,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007387040000139677,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raise_to_shaped_weak_type1>\n"
            },
            "teardown": {
                "duration": 0.0002711889999318373,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/get_aval_test.py::JaxprTypeChecks::test_raise_to_shaped_weak_type2",
            "lineno": 414,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003459279998878628,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006778300000860327,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raise_to_shaped_weak_type2>\n"
            },
            "teardown": {
                "duration": 0.0003233749998798885,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp0",
            "lineno": 210,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006321989999378275,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20326523399990037,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp0>\n"
            },
            "teardown": {
                "duration": 0.00039590999995198217,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp1",
            "lineno": 210,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004496149999795307,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4857658949999859,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp1>\n"
            },
            "teardown": {
                "duration": 0.0004702319999978499,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp2",
            "lineno": 210,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006252649998259585,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18876070999999683,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp2>\n"
            },
            "teardown": {
                "duration": 0.00044614700004785846,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp3",
            "lineno": 210,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004910419997941062,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1951488499998959,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp3>\n"
            },
            "teardown": {
                "duration": 0.00041949399997065484,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp4",
            "lineno": 210,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004651619999549439,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1349061690000326,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp4>\n"
            },
            "teardown": {
                "duration": 0.00042872399990301346,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp5",
            "lineno": 210,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004825349999464379,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.37715475300001344,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp5>\n"
            },
            "teardown": {
                "duration": 0.0006479789999502827,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp6",
            "lineno": 210,
            "outcome": "passed",
            "setup": {
                "duration": 0.000601090999907683,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.49520084300002054,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp6>\n"
            },
            "teardown": {
                "duration": 0.0004480039999634755,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp7",
            "lineno": 210,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005213760000515322,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.503252319000012,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp7>\n"
            },
            "teardown": {
                "duration": 0.0004310199999508768,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp8",
            "lineno": 210,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005037109999648237,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.49875496899994687,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp8>\n"
            },
            "teardown": {
                "duration": 0.00041600899999139074,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/i0_test.py::JaxNumpyOperatorTests::testOp9",
            "lineno": 210,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004607999999279855,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.34329137000008814,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp9>\n"
            },
            "teardown": {
                "duration": 0.000731571999949665,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/infeed_test.py::InfeedTest::testInfeed",
            "lineno": 39,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009861350001756364,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20617023099998733,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfeed>\n"
            },
            "teardown": {
                "duration": 0.00046402499992836965,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/infeed_test.py::InfeedTest::testInfeedPytree",
            "lineno": 71,
            "outcome": "passed",
            "setup": {
                "duration": 0.000492978000011135,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05098789899989242,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfeedPytree>\n"
            },
            "teardown": {
                "duration": 0.0003890369998771348,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/infeed_test.py::InfeedTest::testInfeedThenOutfeed",
            "lineno": 92,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004725789999611152,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1529635370000051,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfeedThenOutfeed>\n"
            },
            "teardown": {
                "duration": 0.00045489900003303774,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/infeed_test.py::InfeedTest::testInfeedThenOutfeedInALoop",
            "lineno": 117,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005197959999350132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04913645200008432,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfeedThenOutfeedInALoop>\n"
            },
            "teardown": {
                "duration": 0.0004936840000482334,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/integer_pow_test.py::SparsifyTest::testUnaryOperationsNonUniqueIndices_integer_pow_BCOO",
            "lineno": 60,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008244359999025619,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.624923428000102,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnaryOperationsNonUniqueIndices_integer_pow_BCOO>\n"
            },
            "teardown": {
                "duration": 0.0004406489999837504,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/integer_pow_test.py::SparsifyTest::testUnaryOperationsNonUniqueIndices_integer_pow_BCSR",
            "lineno": 60,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007323370000449358,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.4860936420000144,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnaryOperationsNonUniqueIndices_integer_pow_BCSR>\n"
            },
            "teardown": {
                "duration": 0.0005726760000470676,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/isscalar_test.py::APITest::test_dunder_jax_array",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008661740000661666,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6889492559998871,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_dunder_jax_array>\n"
            },
            "teardown": {
                "duration": 0.000550766000060321,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/log_test.py::IndexingTest::testIndexApply0",
            "lineno": 55,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007611569999426138,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.27527857999984917,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIndexApply0>\n"
            },
            "teardown": {
                "duration": 0.0005146280000190018,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu0",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007850659999348863,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.3755197000000408,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLu0>\n"
            },
            "teardown": {
                "duration": 0.0006584569998722145,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu1",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006604140000945335,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6402504960001352,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLu1>\n"
            },
            "teardown": {
                "duration": 0.0005988160000924836,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu2",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005378939999900467,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4653892509998059,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLu2>\n"
            },
            "teardown": {
                "duration": 0.0004067939999004011,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu3",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006104480000885815,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.229620726000121,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLu3>\n"
            },
            "teardown": {
                "duration": 0.0005646249999244901,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu4",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009822039999107801,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.2097269539999616,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLu4>\n"
            },
            "teardown": {
                "duration": 0.0004204100000606559,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu5",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004678520001561992,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4522415019998789,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLu5>\n"
            },
            "teardown": {
                "duration": 0.00042690999998740153,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu6",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004687569999077823,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.48444760100005624,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLu6>\n"
            },
            "teardown": {
                "duration": 0.0004528710001068248,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLu7",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005117610000979766,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6980826460001026,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLu7>\n"
            },
            "teardown": {
                "duration": 0.00044288300000516756,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuBatching0",
            "lineno": 93,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004830779998883372,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.635274834000029,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuBatching0>\n"
            },
            "teardown": {
                "duration": 0.0004718400000456313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuBatching1",
            "lineno": 93,
            "outcome": "passed",
            "setup": {
                "duration": 0.000533891000031872,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9664362500000152,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuBatching1>\n"
            },
            "teardown": {
                "duration": 0.000406959999963874,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuCPUBackendOnGPU",
            "lineno": 115,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004677749998336367,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8531320390000019,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuCPUBackendOnGPU>\n"
            },
            "teardown": {
                "duration": 0.0004377249999834021,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad0",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006094810000831785,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.8592148469999756,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuGrad0>\n"
            },
            "teardown": {
                "duration": 0.0004422920001161401,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad1",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004962040000009438,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.415640383000209,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuGrad1>\n"
            },
            "teardown": {
                "duration": 0.000654967999935252,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad2",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006554149999828951,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.6021770699999252,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuGrad2>\n"
            },
            "teardown": {
                "duration": 0.0004292380001515994,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad3",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048094299995682377,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.3937934200000655,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuGrad3>\n"
            },
            "teardown": {
                "duration": 0.00045706699984293664,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad4",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005429440000170871,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.085778336999965,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuGrad4>\n"
            },
            "teardown": {
                "duration": 0.000571725000099832,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad5",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006793380000544857,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.0741396050000276,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuGrad5>\n"
            },
            "teardown": {
                "duration": 0.0006197820000579668,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad6",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006564099999195605,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.63100496900006,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuGrad6>\n"
            },
            "teardown": {
                "duration": 0.0005663809999987279,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad7",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005286159998831863,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.7449463170000854,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuGrad7>\n"
            },
            "teardown": {
                "duration": 0.00043104400015181454,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad8",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004908539999632922,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.774265603999993,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuGrad8>\n"
            },
            "teardown": {
                "duration": 0.0007181920000220998,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuGrad9",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006299320000380249,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.0681838009998046,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuGrad9>\n"
            },
            "teardown": {
                "duration": 0.0004827099999147322,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/lu_test.py::ScipyLinalgTest::testLuOfSingularMatrix",
            "lineno": 75,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004950369998368842,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010850746999949479,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLuOfSingularMatrix>\n"
            },
            "teardown": {
                "duration": 0.0005658400000356778,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/make_jax_pr_test.py::CustomTransposeTest::test_make_jaxpr",
            "lineno": 113,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007409919999190606,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1213701100000435,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_make_jaxpr>\n"
            },
            "teardown": {
                "duration": 0.0006364700000176526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerBadInitial0",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010321889999431733,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14511335299994244,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerBadInitial0>\n"
            },
            "teardown": {
                "duration": 0.0005807410000215896,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial0",
            "lineno": 176,
            "outcome": "passed",
            "setup": {
                "duration": 0.000525054000036107,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13325491699993108,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerInitial0>\n"
            },
            "teardown": {
                "duration": 0.0006300349998582533,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial1",
            "lineno": 176,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007437169999775506,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17646252000008644,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerInitial1>\n"
            },
            "teardown": {
                "duration": 0.0009152940001513343,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial2",
            "lineno": 176,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007311809999919205,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09008466399995996,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerInitial2>\n"
            },
            "teardown": {
                "duration": 0.0006324080000013055,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial3",
            "lineno": 176,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007274120000602124,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12856897200003914,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerInitial3>\n"
            },
            "teardown": {
                "duration": 0.00040162999994208803,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial4",
            "lineno": 176,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004702439998709451,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0470675190001657,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerInitial4>\n"
            },
            "teardown": {
                "duration": 0.00043340500019439787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial5",
            "lineno": 176,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047148799990281987,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1857209029999467,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerInitial5>\n"
            },
            "teardown": {
                "duration": 0.0004332499997872219,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial6",
            "lineno": 176,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004607220000707457,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16320362500005103,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerInitial6>\n"
            },
            "teardown": {
                "duration": 0.0004477300001326512,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial7",
            "lineno": 176,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005019480001919874,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12519506500007083,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerInitial7>\n"
            },
            "teardown": {
                "duration": 0.0004818130000785459,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial8",
            "lineno": 176,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005276310000681406,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17186449600012565,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerInitial8>\n"
            },
            "teardown": {
                "duration": 0.000447822000069209,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/max_test.py::JaxNumpyReducerTests::testReducerInitial9",
            "lineno": 176,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047945100004653796,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11262385300005917,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerInitial9>\n"
            },
            "teardown": {
                "duration": 0.00069247299984454,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer0",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008555809999961639,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12145906099999593,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer0>\n"
            },
            "teardown": {
                "duration": 0.000459073999991233,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer1",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048697900001570815,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19085541599997669,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer1>\n"
            },
            "teardown": {
                "duration": 0.00043255499986116774,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer2",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004720560000350815,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3315019910000956,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer2>\n"
            },
            "teardown": {
                "duration": 0.00048525600004722946,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer3",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005081439999230497,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2806397439999273,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer3>\n"
            },
            "teardown": {
                "duration": 0.00047011699984977895,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer4",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005193849999614031,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2529754150000372,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer4>\n"
            },
            "teardown": {
                "duration": 0.0004362270001365687,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer5",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005495789998803957,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.354980243,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer5>\n"
            },
            "teardown": {
                "duration": 0.0004461760001959192,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer6",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007282290000603098,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028845910999962143,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer6>\n"
            },
            "teardown": {
                "duration": 0.0004585179999594402,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer7",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004294119999030954,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2732637550000163,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer7>\n"
            },
            "teardown": {
                "duration": 0.00041837699995994626,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer8",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004994070000066131,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10701871000014762,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer8>\n"
            },
            "teardown": {
                "duration": 0.00043641399997795816,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/mean_test.py::JaxNumpyReducerTests::testReducer9",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005440500001441251,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1080575510000017,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer9>\n"
            },
            "teardown": {
                "duration": 0.0005853190000379982,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/named_call_test.py::HostCallbackTapTest::test_tap_named_call",
            "lineno": 261,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009558100000504055,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003103579000026002,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_tap_named_call>\n"
            },
            "teardown": {
                "duration": 0.00039337700013675203,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun0",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007183440000062546,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5814100269999471,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScipySpecialFun0>\n"
            },
            "teardown": {
                "duration": 0.0005315549999522773,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun1",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.000569678000147178,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7204165480000029,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScipySpecialFun1>\n"
            },
            "teardown": {
                "duration": 0.0006015820001721295,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun2",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.000515272000029654,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.773617657999921,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScipySpecialFun2>\n"
            },
            "teardown": {
                "duration": 0.0005882939999537484,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun3",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005419609999535169,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6753657209999346,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScipySpecialFun3>\n"
            },
            "teardown": {
                "duration": 0.0005640199999561446,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun4",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005989199999021366,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6606983040001069,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScipySpecialFun4>\n"
            },
            "teardown": {
                "duration": 0.0004421920000368118,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ndtr_test.py::LaxScipySpcialFunctionsTest::testScipySpecialFun5",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005093170000236569,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6854579109999577,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScipySpecialFun5>\n"
            },
            "teardown": {
                "duration": 0.0005363210000268737,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/one_hot_test.py::NNFunctionsTest::testOneHot",
            "lineno": 36,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008459079999738606,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24449344200002088,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOneHot>\n"
            },
            "teardown": {
                "duration": 0.00061352300008366,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes0",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006971069999508472,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008639000000130181,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/ones_test.py",
                    "lineno": 206,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/ones_test.py",
                        "lineno": 206,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes0>\n",
                "longrepr": "self = <src.jax_tests_reduced.ones_test.LaxBackedNumpyTests testMethod=testZerosOnes0>, op = 'ones', shape = 2, dtype = <class 'numpy.uint32'>\n\n    @jtu.sample_product(\n        op=[\"ones\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/ones_test.py:206: TypeError"
            },
            "teardown": {
                "duration": 0.0003467219999038207,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes1",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004528599999957805,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007053179999729764,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/ones_test.py",
                    "lineno": 206,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/ones_test.py",
                        "lineno": 206,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes1>\n",
                "longrepr": "self = <src.jax_tests_reduced.ones_test.LaxBackedNumpyTests testMethod=testZerosOnes1>, op = 'ones', shape = (2,), dtype = <class 'numpy.bool_'>\n\n    @jtu.sample_product(\n        op=[\"ones\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/ones_test.py:206: TypeError"
            },
            "teardown": {
                "duration": 0.0002836310000020603,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes2",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003590860001168039,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006607179998354695,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/ones_test.py",
                    "lineno": 206,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/ones_test.py",
                        "lineno": 206,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes2>\n",
                "longrepr": "self = <src.jax_tests_reduced.ones_test.LaxBackedNumpyTests testMethod=testZerosOnes2>, op = 'ones', shape = 2\ndtype = <class 'ml_dtypes.bfloat16'>\n\n    @jtu.sample_product(\n        op=[\"ones\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/ones_test.py:206: TypeError"
            },
            "teardown": {
                "duration": 0.00024351100000785664,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes3",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003547670000898506,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006686419999368809,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/ones_test.py",
                    "lineno": 206,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/ones_test.py",
                        "lineno": 206,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes3>\n",
                "longrepr": "self = <src.jax_tests_reduced.ones_test.LaxBackedNumpyTests testMethod=testZerosOnes3>, op = 'ones', shape = (3, 0), dtype = <class 'numpy.uint8'>\n\n    @jtu.sample_product(\n        op=[\"ones\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/ones_test.py:206: TypeError"
            },
            "teardown": {
                "duration": 0.00023782199991728703,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes4",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003488150000521273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006443869999657181,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/ones_test.py",
                    "lineno": 206,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/ones_test.py",
                        "lineno": 206,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes4>\n",
                "longrepr": "self = <src.jax_tests_reduced.ones_test.LaxBackedNumpyTests testMethod=testZerosOnes4>, op = 'ones', shape = array(4, dtype=int32)\ndtype = <class 'ml_dtypes.bfloat16'>\n\n    @jtu.sample_product(\n        op=[\"ones\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/ones_test.py:206: TypeError"
            },
            "teardown": {
                "duration": 0.00024099699999169388,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes5",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003286640001078922,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006746879998900113,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/ones_test.py",
                    "lineno": 206,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/ones_test.py",
                        "lineno": 206,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes5>\n",
                "longrepr": "self = <src.jax_tests_reduced.ones_test.LaxBackedNumpyTests testMethod=testZerosOnes5>, op = 'ones', shape = (3, 0), dtype = <class 'numpy.bool_'>\n\n    @jtu.sample_product(\n        op=[\"ones\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/ones_test.py:206: TypeError"
            },
            "teardown": {
                "duration": 0.00021854500005247246,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes6",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.00035106899986203643,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006460790000346606,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/ones_test.py",
                    "lineno": 206,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/ones_test.py",
                        "lineno": 206,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes6>\n",
                "longrepr": "self = <src.jax_tests_reduced.ones_test.LaxBackedNumpyTests testMethod=testZerosOnes6>, op = 'ones', shape = array([4, 5, 6], dtype=int32)\ndtype = <class 'numpy.float32'>\n\n    @jtu.sample_product(\n        op=[\"ones\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/ones_test.py:206: TypeError"
            },
            "teardown": {
                "duration": 0.00022437200004787883,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes7",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003987140000845102,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005970269999124866,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/ones_test.py",
                    "lineno": 206,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/ones_test.py",
                        "lineno": 206,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes7>\n",
                "longrepr": "self = <src.jax_tests_reduced.ones_test.LaxBackedNumpyTests testMethod=testZerosOnes7>, op = 'ones', shape = 2, dtype = <class 'numpy.float32'>\n\n    @jtu.sample_product(\n        op=[\"ones\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/ones_test.py:206: TypeError"
            },
            "teardown": {
                "duration": 0.00024056999995991646,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes8",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003445330000886315,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006445249998705549,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/ones_test.py",
                    "lineno": 206,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/ones_test.py",
                        "lineno": 206,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes8>\n",
                "longrepr": "self = <src.jax_tests_reduced.ones_test.LaxBackedNumpyTests testMethod=testZerosOnes8>, op = 'ones', shape = array(4, dtype=int32)\ndtype = <class 'numpy.bool_'>\n\n    @jtu.sample_product(\n        op=[\"ones\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/ones_test.py:206: TypeError"
            },
            "teardown": {
                "duration": 0.0002386169999226695,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/ones_test.py::LaxBackedNumpyTests::testZerosOnes9",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003498119999676419,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006576870000571944,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/ones_test.py",
                    "lineno": 206,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/ones_test.py",
                        "lineno": 206,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes9>\n",
                "longrepr": "self = <src.jax_tests_reduced.ones_test.LaxBackedNumpyTests testMethod=testZerosOnes9>, op = 'ones', shape = 2, dtype = <class 'numpy.int16'>\n\n    @jtu.sample_product(\n        op=[\"ones\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/ones_test.py:206: TypeError"
            },
            "teardown": {
                "duration": 0.0003551709999101149,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/partial_test.py::TreeTest::testPartialDoesNotMergeWithOtherPartials",
            "lineno": 218,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006222669999260688,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005082640000182437,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartialDoesNotMergeWithOtherPartials>\n"
            },
            "teardown": {
                "duration": 0.00035643000001073233,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/partial_test.py::TreeTest::testPartialFuncAttributeHasStableHash",
            "lineno": 229,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036587700014933944,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004998629999590776,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartialFuncAttributeHasStableHash>\n"
            },
            "teardown": {
                "duration": 0.0003206490000593476,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/partial_val_test.py::CoreTest::test_dropvar_avals",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006273429999055224,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0023633890000382962,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_dropvar_avals>\n"
            },
            "teardown": {
                "duration": 0.0003119550001429161,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=i_collective_names=i",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005684760001258837,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.377001201999974,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=i_collective_names=i>\n"
            },
            "teardown": {
                "duration": 0.0004151410000758915,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ij_collective_names=i",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045268400003806164,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3153715749999719,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ij_collective_names=i>\n"
            },
            "teardown": {
                "duration": 0.0004161920001024555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ij_collective_names=ij",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004446180000741151,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2665816490000452,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ij_collective_names=ij>\n"
            },
            "teardown": {
                "duration": 0.0004390340000099968,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ij_collective_names=j",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048676300002625794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16163524100011273,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ij_collective_names=j>\n"
            },
            "teardown": {
                "duration": 0.0004390820001844986,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ij_collective_names=ji",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046490800013998523,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.038605006000125286,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ij_collective_names=ji>\n"
            },
            "teardown": {
                "duration": 0.00039584800015290966,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=i",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047890299993014196,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.45791143900009956,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=i>\n"
            },
            "teardown": {
                "duration": 0.00044787699994230934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ij",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004684620000716677,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2891413120000834,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ij>\n"
            },
            "teardown": {
                "duration": 0.0006110419999458827,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ijk",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006157130001156474,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19937838100008776,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ijk>\n"
            },
            "teardown": {
                "duration": 0.00046977900001365924,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ik",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005153790000349545,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3291097579999587,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ik>\n"
            },
            "teardown": {
                "duration": 0.00045405900004880095,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ikj",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008704580000085116,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04452345400000013,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ikj>\n"
            },
            "teardown": {
                "duration": 0.00042407699993418646,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=j",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004819729999780975,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09336684800018702,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=j>\n"
            },
            "teardown": {
                "duration": 0.0004026310000426747,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ji",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004993899999590212,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04032342000004974,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ji>\n"
            },
            "teardown": {
                "duration": 0.0003894879998824763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=jik",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045820100012861076,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03927921600006812,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=jik>\n"
            },
            "teardown": {
                "duration": 0.0005716760001632792,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=jk",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004896330001429305,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1889219279998997,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=jk>\n"
            },
            "teardown": {
                "duration": 0.0006339500000649423,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=jki",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007123670000055426,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04270874700000604,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=jki>\n"
            },
            "teardown": {
                "duration": 0.0004110009999749309,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=k",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004921669999475853,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16415083200013214,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=k>\n"
            },
            "teardown": {
                "duration": 0.000422709000076793,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ki",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004782699998031603,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04352441300011378,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=ki>\n"
            },
            "teardown": {
                "duration": 0.0003823330000614078,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=kij",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.000451603000101386,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03880944399998043,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=kij>\n"
            },
            "teardown": {
                "duration": 0.0005394560000695492,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=kj",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005390730000272015,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.038893066000127874,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=kj>\n"
            },
            "teardown": {
                "duration": 0.00046844700000292505,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/pmax_test.py::BatchingTest::testCommAssocCollective_pmax_vmap_names=ijk_collective_names=kji",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005292280000048777,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.038554411999939475,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCommAssocCollective_pmax_vmap_names=ijk_collective_names=kji>\n"
            },
            "teardown": {
                "duration": 0.0007788880000134668,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp0",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.000604393000003256,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003319703999977719,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp0>\n"
            },
            "teardown": {
                "duration": 0.00033397799984413723,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp1",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005256189999727212,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003000534999955562,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp1>\n"
            },
            "teardown": {
                "duration": 0.00040360999992117286,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp10",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039364500003102876,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.29198841199990966,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp10>\n"
            },
            "teardown": {
                "duration": 0.00044248900007914926,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp11",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005265940001208946,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05398494299993217,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp11>\n"
            },
            "teardown": {
                "duration": 0.0005964800000128889,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp12",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005924930001128814,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.30490225000016835,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp12>\n"
            },
            "teardown": {
                "duration": 0.0005985969999073859,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp13",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005542119999972783,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08081603199980236,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp13>\n"
            },
            "teardown": {
                "duration": 0.00047818500001994835,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp14",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005283449997932621,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023565961000031166,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp14>\n"
            },
            "teardown": {
                "duration": 0.0003376939998815942,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp15",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004226089999974647,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24141487899987624,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp15>\n"
            },
            "teardown": {
                "duration": 0.0005962389998330764,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp16",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005458650000491616,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22009715300009702,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp16>\n"
            },
            "teardown": {
                "duration": 0.0006166460000258667,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp17",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006438110001454334,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5472340759999952,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp17>\n"
            },
            "teardown": {
                "duration": 0.0006552489999194222,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp18",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.000692159999971409,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10542302100020606,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp18>\n"
            },
            "teardown": {
                "duration": 0.00042264700005034683,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp19",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004516010001225368,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21636978199990153,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp19>\n"
            },
            "teardown": {
                "duration": 0.0005055799999809096,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp2",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004823209999358369,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004052585999943403,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp2>\n"
            },
            "teardown": {
                "duration": 0.0004805450000731071,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp3",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044370900013745995,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002991190999864557,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp3>\n"
            },
            "teardown": {
                "duration": 0.0003456179999830056,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp4",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003900819999671512,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0030534699999407167,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp4>\n"
            },
            "teardown": {
                "duration": 0.0004383929999676184,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp5",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039613300009477825,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0036408870000741445,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp5>\n"
            },
            "teardown": {
                "duration": 0.00031088600007933564,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp6",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003468570000677573,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003052665000041088,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp6>\n"
            },
            "teardown": {
                "duration": 0.00028130299983786244,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp7",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038668399997732195,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003438245999859646,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp7>\n"
            },
            "teardown": {
                "duration": 0.0003570350002064515,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp8",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042568000003484485,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003228821999982756,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp8>\n"
            },
            "teardown": {
                "duration": 0.00038003400004527066,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/power_test.py::JaxNumpyOperatorTests::testOp9",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003484840001419798,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0035239250000813627,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp9>\n"
            },
            "teardown": {
                "duration": 0.0006679159998839168,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer0",
            "lineno": 194,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006143079999674228,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1598428849999891,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer0>\n"
            },
            "teardown": {
                "duration": 0.00039669799980401876,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer1",
            "lineno": 194,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005392079999637645,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.26598684700002195,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer1>\n"
            },
            "teardown": {
                "duration": 0.000420020000092336,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer2",
            "lineno": 194,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004725229998712166,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.272886901999982,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer2>\n"
            },
            "teardown": {
                "duration": 0.0005390789999637491,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer3",
            "lineno": 194,
            "outcome": "passed",
            "setup": {
                "duration": 0.000643785999955071,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17655553199983842,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer3>\n"
            },
            "teardown": {
                "duration": 0.0006024330000400369,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer4",
            "lineno": 194,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005610450000403944,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10515153300002567,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer4>\n"
            },
            "teardown": {
                "duration": 0.000590577000139092,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer5",
            "lineno": 194,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005706130000362464,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18327495399989857,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer5>\n"
            },
            "teardown": {
                "duration": 0.0006641980000949843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer6",
            "lineno": 194,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005837470000642497,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16872788399996352,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer6>\n"
            },
            "teardown": {
                "duration": 0.0005074149999018118,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer7",
            "lineno": 194,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004637140000340878,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11045381500002804,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer7>\n"
            },
            "teardown": {
                "duration": 0.0005017779999434424,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer8",
            "lineno": 194,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004923129999951925,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07052969599999415,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer8>\n"
            },
            "teardown": {
                "duration": 0.0005702959999780433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/prod_test.py::JaxNumpyReducerTests::testReducer9",
            "lineno": 194,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005226060000040889,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12268559100016319,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer9>\n"
            },
            "teardown": {
                "duration": 0.0007356399999025598,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation0",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006385540000337642,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.25282645600009346,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIndexSequenceDeprecation0>\n"
            },
            "teardown": {
                "duration": 0.00042585000005601614,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation1",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047729600009915885,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.242881258999887,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIndexSequenceDeprecation1>\n"
            },
            "teardown": {
                "duration": 0.0006507529999453254,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation2",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007268399999702524,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14335156699985419,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIndexSequenceDeprecation2>\n"
            },
            "teardown": {
                "duration": 0.0004128170000967657,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation3",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048515499997847655,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008394072999863056,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIndexSequenceDeprecation3>\n"
            },
            "teardown": {
                "duration": 0.0003088560001742735,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation4",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003879900000356429,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.39104977800002416,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIndexSequenceDeprecation4>\n"
            },
            "teardown": {
                "duration": 0.0006029240000771097,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation5",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005428179999853455,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013638363999916692,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIndexSequenceDeprecation5>\n"
            },
            "teardown": {
                "duration": 0.00029184600020926155,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/reshape_test.py::IndexedUpdateTest::testIndexSequenceDeprecation6",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003785149999657733,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004890437999847563,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIndexSequenceDeprecation6>\n"
            },
            "teardown": {
                "duration": 0.0004478810001273814,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad0",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006917829998656089,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002316143999905762,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLoad0>\n"
            },
            "teardown": {
                "duration": 0.00037860500015085563,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad1",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003631260001384362,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015819010000086564,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLoad1>\n"
            },
            "teardown": {
                "duration": 0.0002877980000448588,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad2",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003352209998865874,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0021230889999515057,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLoad2>\n"
            },
            "teardown": {
                "duration": 0.00030352399994626467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad3",
            "lineno": 189,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003520839998145675,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000704058999872359,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testLoad3>\n",
                "longrepr": "('/home/frasermince/portability/src/jax_tests_reduced/save_test.py', 190, 'Skipped: dtype=object requires allow_pickle=True')"
            },
            "teardown": {
                "duration": 0.00032421000014437595,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad4",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035570199997891905,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014882479999869247,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLoad4>\n"
            },
            "teardown": {
                "duration": 0.00031349500000033004,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad5",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003663360000700777,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0016483869999319722,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLoad5>\n"
            },
            "teardown": {
                "duration": 0.0002948010001091461,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad6",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003472839998721611,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0013978669999232807,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLoad6>\n"
            },
            "teardown": {
                "duration": 0.0003191420000803191,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/save_test.py::LaxBackedNumpyTests::testLoad7",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003417329999138019,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015739450000182842,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLoad7>\n"
            },
            "teardown": {
                "duration": 0.0003842020000774937,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/size_test.py::APITest::test_dunder_jax_array",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007254869999542279,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01363709099996413,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_dunder_jax_array>\n"
            },
            "teardown": {
                "duration": 0.00042485800008762453,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition0",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.000694560000056299,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8421188700001494,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartition0>\n"
            },
            "teardown": {
                "duration": 0.0004283599998871068,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition1",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005586269999184879,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8648199960000511,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartition1>\n"
            },
            "teardown": {
                "duration": 0.000490832000195951,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition2",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004984679999324726,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9698457100000724,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartition2>\n"
            },
            "teardown": {
                "duration": 0.0004282009999769798,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition3",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044300399986241246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6553890329998922,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartition3>\n"
            },
            "teardown": {
                "duration": 0.00046292699994410214,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition4",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005407039998317487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.871412047999911,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartition4>\n"
            },
            "teardown": {
                "duration": 0.0004946720000589266,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition5",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004970859999957611,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.693434002999993,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartition5>\n"
            },
            "teardown": {
                "duration": 0.0004222809998282173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition6",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005202080001254217,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3095057180000822,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartition6>\n"
            },
            "teardown": {
                "duration": 0.00043277200006741623,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition7",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005096840000078373,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7506301210000856,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartition7>\n"
            },
            "teardown": {
                "duration": 0.0004178659999070078,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition8",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045673099998566613,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7746486749999804,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartition8>\n"
            },
            "teardown": {
                "duration": 0.00041090700005952385,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/slice_in_dim_test.py::LaxBackedNumpyTests::testPartition9",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004653469998174842,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9603305670000282,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartition9>\n"
            },
            "teardown": {
                "duration": 0.0006164349999835395,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt0",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008925979998366529,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24894359399991117,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSplitStaticInt0>\n"
            },
            "teardown": {
                "duration": 0.00040671100009603833,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt1",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.000468930999886652,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24361963900014416,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSplitStaticInt1>\n"
            },
            "teardown": {
                "duration": 0.00041914200005521707,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt2",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004888980001851451,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22721851999995124,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSplitStaticInt2>\n"
            },
            "teardown": {
                "duration": 0.0006194109998887143,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt3",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005860009998741589,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13336551400016106,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSplitStaticInt3>\n"
            },
            "teardown": {
                "duration": 0.00046912099992368894,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt4",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046252800007096084,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16566153600001599,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSplitStaticInt4>\n"
            },
            "teardown": {
                "duration": 0.00041849200010801724,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt5",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004728900000827707,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13016801699995995,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSplitStaticInt5>\n"
            },
            "teardown": {
                "duration": 0.00047204900010910933,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt6",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004591740000705613,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1612181689999943,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSplitStaticInt6>\n"
            },
            "teardown": {
                "duration": 0.0005779139999049221,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt7",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005389479999848845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23839020400009758,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSplitStaticInt7>\n"
            },
            "teardown": {
                "duration": 0.0005936679999649641,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt8",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005443649999961053,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.339880962000052,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSplitStaticInt8>\n"
            },
            "teardown": {
                "duration": 0.0006358959999488434,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/split_test.py::LaxBackedNumpyTests::testSplitStaticInt9",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005519190001450625,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24501491699993494,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSplitStaticInt9>\n"
            },
            "teardown": {
                "duration": 0.0005661519999193843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp0",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008772659998612653,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11970171799998752,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp0>\n"
            },
            "teardown": {
                "duration": 0.0004064090001065779,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp1",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047886899983495823,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12208638499987501,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp1>\n"
            },
            "teardown": {
                "duration": 0.0004130340000756405,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp2",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004800350000095932,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12176878199989005,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp2>\n"
            },
            "teardown": {
                "duration": 0.0004221899998810841,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp3",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004507680000642722,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025893705000044065,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp3>\n"
            },
            "teardown": {
                "duration": 0.00039360899995699583,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp4",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004668060000767582,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.126877309000065,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp4>\n"
            },
            "teardown": {
                "duration": 0.00043208800002503267,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp5",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048267199986185005,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003154603999973915,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp5>\n"
            },
            "teardown": {
                "duration": 0.0003102569999100524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp6",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041710700020303193,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12310917500008145,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp6>\n"
            },
            "teardown": {
                "duration": 0.0004205590000765369,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp7",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045566000017061015,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12699406100000488,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp7>\n"
            },
            "teardown": {
                "duration": 0.0004032500000903383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp8",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005302110000684479,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026919713999859596,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp8>\n"
            },
            "teardown": {
                "duration": 0.0002677759998732654,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sqrt_test.py::JaxNumpyOperatorTests::testOp9",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004746279998926184,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11978101399995467,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOp9>\n"
            },
            "teardown": {
                "duration": 0.0005955510000603681,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack0",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008261169998604601,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4147918310000023,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStack0>\n"
            },
            "teardown": {
                "duration": 0.00045560700004898536,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack1",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.000489610999920842,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.25188273100002334,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStack1>\n"
            },
            "teardown": {
                "duration": 0.0005158479998499388,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack2",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007542690000263974,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20045451900000444,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStack2>\n"
            },
            "teardown": {
                "duration": 0.00047265800003515324,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack3",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005118689998653281,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21863640099991244,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStack3>\n"
            },
            "teardown": {
                "duration": 0.0006370600001446292,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack4",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006387240000549355,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13578676700012693,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStack4>\n"
            },
            "teardown": {
                "duration": 0.0005648139999721025,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack5",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005350559999897087,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08128765400010707,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStack5>\n"
            },
            "teardown": {
                "duration": 0.00042185500001323817,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack6",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004627209998488979,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11254754699984915,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStack6>\n"
            },
            "teardown": {
                "duration": 0.00057998200009024,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack7",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005508750000444707,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19337826099990707,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStack7>\n"
            },
            "teardown": {
                "duration": 0.0006322990000171558,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack8",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007157860000006622,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0734295629999906,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStack8>\n"
            },
            "teardown": {
                "duration": 0.0004244410001774668,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/stack_test.py::LaxBackedNumpyTests::testStack9",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004725030000827246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3752407160000075,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStack9>\n"
            },
            "teardown": {
                "duration": 0.0005751389999204548,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/stop_gradient_test.py::CustomLinearSolveTest::test_custom_linear_solve_nonsymmetric",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008862189999945258,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.8145016829998895,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_custom_linear_solve_nonsymmetric>\n"
            },
            "teardown": {
                "duration": 0.00045792000014444056,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/stop_gradient_test.py::CustomLinearSolveTest::test_custom_linear_solve_symmetric",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005117470000186586,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.4537534550001965,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_custom_linear_solve_symmetric>\n"
            },
            "teardown": {
                "duration": 0.0006452320001244516,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer0",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006686730000637908,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08866474999990714,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer0>\n"
            },
            "teardown": {
                "duration": 0.0005169440000827308,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer1",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047935099996720965,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0328427310000734,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer1>\n"
            },
            "teardown": {
                "duration": 0.0004825250000521919,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer2",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047374800010402396,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08766508000007889,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer2>\n"
            },
            "teardown": {
                "duration": 0.00039034699989315413,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer3",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043592399993030995,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025344652000057977,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer3>\n"
            },
            "teardown": {
                "duration": 0.0003412250000565109,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer4",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042154999982813024,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022265846999971473,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer4>\n"
            },
            "teardown": {
                "duration": 0.0004323949999616161,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer5",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004123630001231504,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09061792499983312,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer5>\n"
            },
            "teardown": {
                "duration": 0.0005946730000232492,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer6",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005464739999752055,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09294327200018415,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer6>\n"
            },
            "teardown": {
                "duration": 0.0005947519998699136,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer7",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007545050000317133,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.034230106999984855,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer7>\n"
            },
            "teardown": {
                "duration": 0.000474274999987756,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer8",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004356209999514249,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02521278200015331,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer8>\n"
            },
            "teardown": {
                "duration": 0.00041605700016589253,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/sum_test.py::JaxNumpyReducerTests::testReducer9",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047692799989818013,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08969657299985556,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducer9>\n"
            },
            "teardown": {
                "duration": 0.0007480340000256547,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnTinyElement0",
            "lineno": 168,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008070469998529006,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.0443659069999285,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdOnTinyElement0>\n"
            },
            "teardown": {
                "duration": 0.000491308999926332,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnTinyElement1",
            "lineno": 168,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004913840000426717,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.5768144539999867,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdOnTinyElement1>\n"
            },
            "teardown": {
                "duration": 0.0005005420000543381,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnTinyElement2",
            "lineno": 168,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005354610000267712,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.287229324000009,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdOnTinyElement2>\n"
            },
            "teardown": {
                "duration": 0.00047774199993000366,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero0",
            "lineno": 150,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005404609999004606,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04903304799995567,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdOnZero0>\n"
            },
            "teardown": {
                "duration": 0.00039231599998856836,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero1",
            "lineno": 150,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004933299999265728,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.27315468999995574,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdOnZero1>\n"
            },
            "teardown": {
                "duration": 0.0005686550000518764,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero2",
            "lineno": 150,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004692900001828093,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18497576099980506,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdOnZero2>\n"
            },
            "teardown": {
                "duration": 0.000766024000085963,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero3",
            "lineno": 150,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004889609999736422,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18949065399988285,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdOnZero3>\n"
            },
            "teardown": {
                "duration": 0.0004523969998899702,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero4",
            "lineno": 150,
            "outcome": "passed",
            "setup": {
                "duration": 0.000487842999973509,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003954306999958135,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdOnZero4>\n"
            },
            "teardown": {
                "duration": 0.0003021740001258877,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero5",
            "lineno": 150,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003948840001157805,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003930387000082192,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdOnZero5>\n"
            },
            "teardown": {
                "duration": 0.00031337199993686227,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero6",
            "lineno": 150,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003831589999663265,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007112335000101666,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdOnZero6>\n"
            },
            "teardown": {
                "duration": 0.000281418999975358,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero7",
            "lineno": 150,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003528290001213463,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00677743799997188,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdOnZero7>\n"
            },
            "teardown": {
                "duration": 0.0004059509999478905,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero8",
            "lineno": 150,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004208969999126566,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0038579659999413707,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdOnZero8>\n"
            },
            "teardown": {
                "duration": 0.00028381900006024807,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdOnZero9",
            "lineno": 150,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003798019999976532,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6144274359999145,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdOnZero9>\n"
            },
            "teardown": {
                "duration": 0.0005959279999387945,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput0",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007890480001151445,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.459201741000015,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithOnRankDeficientInput0>\n"
            },
            "teardown": {
                "duration": 0.0006826540000020032,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput1",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006880139999339008,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5239756789999319,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithOnRankDeficientInput1>\n"
            },
            "teardown": {
                "duration": 0.0004338290000305278,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput2",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.00052791400003116,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4957783520001158,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithOnRankDeficientInput2>\n"
            },
            "teardown": {
                "duration": 0.00044322700000520854,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput3",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004979150000963273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.37287217199991574,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithOnRankDeficientInput3>\n"
            },
            "teardown": {
                "duration": 0.0004844119998779206,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput4",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.000502955000001748,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3744938899999397,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithOnRankDeficientInput4>\n"
            },
            "teardown": {
                "duration": 0.00045008999995843624,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput5",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.000476995000099123,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.288558440000088,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithOnRankDeficientInput5>\n"
            },
            "teardown": {
                "duration": 0.00045665600009670015,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput6",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005049769999914133,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3540344269999878,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithOnRankDeficientInput6>\n"
            },
            "teardown": {
                "duration": 0.0004321950000303332,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput7",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004961350000485254,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.489279618000182,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithOnRankDeficientInput7>\n"
            },
            "teardown": {
                "duration": 0.0004438480000317213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput8",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047452700005123916,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.29375866999998834,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithOnRankDeficientInput8>\n"
            },
            "teardown": {
                "duration": 0.0004585739998219651,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithOnRankDeficientInput9",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005059550001078605,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.32753655700003037,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithOnRankDeficientInput9>\n"
            },
            "teardown": {
                "duration": 0.0003951010000946553,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput0",
            "lineno": 44,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004977830001280381,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.8944527880000805,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithRectangularInput0>\n"
            },
            "teardown": {
                "duration": 0.0006584400000519963,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput1",
            "lineno": 44,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006566360000306304,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.52670662100013,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithRectangularInput1>\n"
            },
            "teardown": {
                "duration": 0.00045040100008009176,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput2",
            "lineno": 44,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004822529999728431,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.2369693640000605,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithRectangularInput2>\n"
            },
            "teardown": {
                "duration": 0.0007022570000572159,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput3",
            "lineno": 44,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007035240000732301,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18190458599997328,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithRectangularInput3>\n"
            },
            "teardown": {
                "duration": 0.0004602519998115895,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput4",
            "lineno": 44,
            "outcome": "passed",
            "setup": {
                "duration": 0.000495647999969151,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8349674400001277,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithRectangularInput4>\n"
            },
            "teardown": {
                "duration": 0.0004622740000286285,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput5",
            "lineno": 44,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004976379998424818,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.0500587129999985,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithRectangularInput5>\n"
            },
            "teardown": {
                "duration": 0.00045256400017024134,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput6",
            "lineno": 44,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005190950000724115,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.2217320610000115,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithRectangularInput6>\n"
            },
            "teardown": {
                "duration": 0.0004555740001705999,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput7",
            "lineno": 44,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005543249999391264,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1707893130001139,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithRectangularInput7>\n"
            },
            "teardown": {
                "duration": 0.00044113299986747734,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput8",
            "lineno": 44,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047210999991875724,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18072863399993366,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithRectangularInput8>\n"
            },
            "teardown": {
                "duration": 0.000599964999992153,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithRectangularInput9",
            "lineno": 44,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004909550000320451,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17333468800006813,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithRectangularInput9>\n"
            },
            "teardown": {
                "duration": 0.0004544839998743555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithSkinnyTallInput0",
            "lineno": 104,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048378199994658644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.816308700000036,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithSkinnyTallInput0>\n"
            },
            "teardown": {
                "duration": 0.00046384400002352777,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/svd_test.py::SvdTest::testSvdWithSkinnyTallInput1",
            "lineno": 104,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045277600020199316,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.1380685409999387,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSvdWithSkinnyTallInput1>\n"
            },
            "teardown": {
                "duration": 0.0009368220000851579,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK0",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008362460000626015,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13616042100011327,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTopK0>\n"
            },
            "teardown": {
                "duration": 0.0004686059999130521,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK1",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005281549999835988,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12560040500011382,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTopK1>\n"
            },
            "teardown": {
                "duration": 0.0004475159998946765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK2",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046624999981759174,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12542410999981257,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTopK2>\n"
            },
            "teardown": {
                "duration": 0.0004757819999667845,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK3",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005028329999277048,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11333300900014365,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTopK3>\n"
            },
            "teardown": {
                "duration": 0.0004315739997764467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK4",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046259000009740703,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14963134000004175,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTopK4>\n"
            },
            "teardown": {
                "duration": 0.00043858000003638153,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK5",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.000458859999980632,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11769089700010227,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTopK5>\n"
            },
            "teardown": {
                "duration": 0.00047321100009867223,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK6",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.000500299999885101,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12378840899987154,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTopK6>\n"
            },
            "teardown": {
                "duration": 0.00045201300008557155,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK7",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047808399995119544,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11914554000009048,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTopK7>\n"
            },
            "teardown": {
                "duration": 0.00044570099998963997,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK8",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004854040000736859,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0688947209998787,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTopK8>\n"
            },
            "teardown": {
                "duration": 0.00044088999993618927,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/top_k_test.py::LaxTest::testTopK9",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005075599999599945,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11019416199997067,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTopK9>\n"
            },
            "teardown": {
                "duration": 0.0006251760000850481,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/trace_to_jax_pr_dynamic_test.py::DynamicShapesTest::test_staging_basic",
            "lineno": 196,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007810279998921033,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011111540000001696,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_staging_basic>\n"
            },
            "teardown": {
                "duration": 0.0004060149999531859,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tree_map_test.py::CoreTest::test_tree_map",
            "lineno": 195,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007227649998640118,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007588850000956882,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_tree_map>\n"
            },
            "teardown": {
                "duration": 0.0003583239999898069,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tree_unflatten_test.py::CoreTest::test_tree_unflatten",
            "lineno": 181,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007193520000328135,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006058660001144744,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_tree_unflatten>\n"
            },
            "teardown": {
                "duration": 0.00033026000005520473,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom0",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.00062555199997405,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.7299035240000649,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTrilIndicesFrom0>\n"
            },
            "teardown": {
                "duration": 0.000633784999990894,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom1",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005450800001653988,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.1186218359998747,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTrilIndicesFrom1>\n"
            },
            "teardown": {
                "duration": 0.0006147670001155348,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom2",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006152280000151222,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9806841009999516,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTrilIndicesFrom2>\n"
            },
            "teardown": {
                "duration": 0.0006230270000742166,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom3",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006876309998915531,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.1984109460001946,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTrilIndicesFrom3>\n"
            },
            "teardown": {
                "duration": 0.0004649979998703202,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom4",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004927720001433045,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.4357600060000095,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTrilIndicesFrom4>\n"
            },
            "teardown": {
                "duration": 0.0005358649998470355,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom5",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005245380000360456,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029567530000122133,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTrilIndicesFrom5>\n"
            },
            "teardown": {
                "duration": 0.0006459280000399303,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom6",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006365330000335234,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8798675820000881,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTrilIndicesFrom6>\n"
            },
            "teardown": {
                "duration": 0.00042308100000809645,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom7",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004518200000802608,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12594381100007013,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTrilIndicesFrom7>\n"
            },
            "teardown": {
                "duration": 0.00037844199982828286,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom8",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006201439998676506,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025630642999885822,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTrilIndicesFrom8>\n"
            },
            "teardown": {
                "duration": 0.00033540499998707674,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_indices_from_test.py::LaxBackedNumpyTests::testTrilIndicesFrom9",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004249989999607351,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3337550690000626,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTrilIndicesFrom9>\n"
            },
            "teardown": {
                "duration": 0.0005939800000760442,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU0",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008139470000969595,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15131371899997248,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriLU0>\n"
            },
            "teardown": {
                "duration": 0.0004265830000349524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU1",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004976210000222636,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3960171509997963,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriLU1>\n"
            },
            "teardown": {
                "duration": 0.00046231900000748283,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU2",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004632709999441431,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3421672420001869,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriLU2>\n"
            },
            "teardown": {
                "duration": 0.00045992399986971577,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU3",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004776060000040161,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17853645300010612,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriLU3>\n"
            },
            "teardown": {
                "duration": 0.0006318289999853732,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU4",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006150089998300245,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15115286100012781,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriLU4>\n"
            },
            "teardown": {
                "duration": 0.00041992399997070606,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU5",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004790460000094754,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.28356590900011724,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriLU5>\n"
            },
            "teardown": {
                "duration": 0.00044306299992058484,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU6",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005163839998658659,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003491833999987648,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriLU6>\n"
            },
            "teardown": {
                "duration": 0.0003260630001022946,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU7",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003846570000405336,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17673633499998687,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriLU7>\n"
            },
            "teardown": {
                "duration": 0.0005424970001968177,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU8",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007402100000035716,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0641251199999715,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriLU8>\n"
            },
            "teardown": {
                "duration": 0.0006078419999084872,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/tril_test.py::LaxBackedNumpyTests::testTriLU9",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.000752721000026213,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04950248699992699,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriLU9>\n"
            },
            "teardown": {
                "duration": 0.0007045170000310463,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices0",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006525710000460094,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7358129629999439,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriuIndices0>\n"
            },
            "teardown": {
                "duration": 0.00039858999980424414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices1",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004825250000521919,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19596888799992485,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriuIndices1>\n"
            },
            "teardown": {
                "duration": 0.0005578599998443678,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices2",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.000520044000040798,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.3704589619999297,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriuIndices2>\n"
            },
            "teardown": {
                "duration": 0.0004349060000095051,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices3",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.000490772000148354,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.44908450100001573,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriuIndices3>\n"
            },
            "teardown": {
                "duration": 0.00045271200019669777,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices4",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005256140000255982,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17136327399998663,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriuIndices4>\n"
            },
            "teardown": {
                "duration": 0.0005508709998593986,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices5",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005165969998870423,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10201416000018071,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriuIndices5>\n"
            },
            "teardown": {
                "duration": 0.0004215460000978055,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices6",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047199599998748454,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12270180900009109,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriuIndices6>\n"
            },
            "teardown": {
                "duration": 0.00063513400004922,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices7",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005906879998747172,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1242299840000669,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriuIndices7>\n"
            },
            "teardown": {
                "duration": 0.0004254499999660766,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices8",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004529320001438464,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027164136999999755,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriuIndices8>\n"
            },
            "teardown": {
                "duration": 0.0003303039998172608,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/triu_indices_test.py::LaxBackedNumpyTests::testTriuIndices9",
            "lineno": 189,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004260850000719074,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006084043999862843,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTriuIndices9>\n"
            },
            "teardown": {
                "duration": 0.0004569000000174128,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial0",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006806399999277346,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.38479014499989717,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial0>\n"
            },
            "teardown": {
                "duration": 0.0004103399999166868,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial1",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005067439999493217,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.26545467500000086,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial1>\n"
            },
            "teardown": {
                "duration": 0.0004249989999607351,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial2",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007678750000650325,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09259674899999482,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial2>\n"
            },
            "teardown": {
                "duration": 0.0004136029999699531,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial3",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045716599993284035,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2937375169999541,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial3>\n"
            },
            "teardown": {
                "duration": 0.00045910599988019385,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial4",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005095700000765646,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12980047399992145,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial4>\n"
            },
            "teardown": {
                "duration": 0.00046497199991790694,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial5",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005017359999328619,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9112127390001206,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial5>\n"
            },
            "teardown": {
                "duration": 0.0004692589998285257,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial6",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005158509998182126,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.29803894099995887,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial6>\n"
            },
            "teardown": {
                "duration": 0.00045200400018075015,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial7",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005064819999915926,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012099848999923779,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial7>\n"
            },
            "teardown": {
                "duration": 0.00035004300002583477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial8",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004763899999034038,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.35259587000018655,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial8>\n"
            },
            "teardown": {
                "duration": 0.00047049099998730526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/var_test.py::JaxNumpyReducerTests::testReducerWhereNoInitial9",
            "lineno": 183,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005293220001476584,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3014293040000666,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReducerWhereNoInitial9>\n"
            },
            "teardown": {
                "duration": 0.0006416609999178036,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_0",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.000836427999956868,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007537769999999,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_0>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_0>, f = <function simple_fun at 0x7f09c00dc790>\nargs = (array([[ 0.49671415, -0.1382643 ],\n       [ 0.64768854,  1.52302986],\n       [-0.23415337, -0.23413696]]), array([[ 1.57921282,  0.76743473],\n       [-0.46947439,  0.54256004],\n       [-0.46341769, -0.46572975]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002681890000530984,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_1",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004832580000311282,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008949310001753474,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_1>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_1>\nf = functools.partial(<function jvp at 0x7f09d10c83a0>, <function simple_fun at 0x7f09c00dc790>)\nargs = ((array([[ 0.49671415, -0.1382643 ],\n       [ 0.64768854,  1.52302986],\n       [-0.23415337, -0.23413696]]), array([[ ...3413696]]), array([[ 1.57921282,  0.76743473],\n       [-0.46947439,  0.54256004],\n       [-0.46341769, -0.46572975]])))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00026071499996760394,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_10",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004070160000537726,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007436860000780143,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_10>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_10>\nf = functools.partial(<function jvp_unlinearized at 0x7f09c00dd090>, <function simple_fun at 0x7f09c00dc790>)\nargs = ((array([[ 0.49671415, -0.1382643 ],\n       [ 0.64768854,  1.52302986],\n       [-0.23415337, -0.23413696]]), array([[ ...3413696]]), array([[ 1.57921282,  0.76743473],\n       [-0.46947439,  0.54256004],\n       [-0.46341769, -0.46572975]])))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00026191400002062437,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_100",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004039259999899514,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006848909999916941,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_100>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_100>\nf = functools.partial(<function jvp at 0x7f09d10c83a0>, <function fun_with_nested_calls_2 at 0x7f09c00dca60>)\nargs = ((array([[0.36139561, 1.53803657]]),), (array([[0.36139561, 1.53803657]]),))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00026658999991013843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_101",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.000392470999940997,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000734152999939397,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_101>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_101>\nf = <PjitFunction of <function fun_with_nested_calls_2 at 0x7f09c00dca60>>, args = (array([[0.36139561, 1.53803657]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002562000001944398,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_102",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00039453399995181826,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006994340001256205,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_102>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_102>\nf = <PjitFunction of <PjitFunction of <function fun_with_nested_calls_2 at 0x7f09c00dca60>>>, args = (array([[0.36139561, 1.53803657]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0003391909999663767,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_103",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005760249998729705,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006808180000916764,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_103>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_103>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_with_nested_calls_2 at 0x7f09c00dca60>)\nargs = (array([[0.36139561, 1.53803657]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002877809999972669,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_104",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004275920000509359,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006460150000293652,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_104>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_104>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <PjitFunction of <function fun_with_nested_calls_2 at 0x7f09c00dca60>>)\nargs = (array([[0.36139561, 1.53803657]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00028610100002879335,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_105",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004247090000717435,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006267950000165001,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_105>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_105>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_with_nested_calls_2 at 0x7f09c00dca60>))\nargs = (array([[0.36139561, 1.53803657]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023875700003372913,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_106",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00039375200003632926,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007083950001742778,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_106>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_106>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_with_nested_calls_2 at 0x7f09c00dca60>)\nargs = (array([[0.36139561, 1.53803657]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002398839999386837,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_107",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00040461899993715633,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006444509999710135,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_107>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_107>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <PjitFunction of <function fun_with_nested_calls_2 at 0x7f09c00dca60>>)\nargs = (array([[0.36139561, 1.53803657]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002467869999236427,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_108",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003918029999567807,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006771710000066378,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_108>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_108>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_with_nested_calls_2 at 0x7f09c00dca60>))\nargs = (array([[0.36139561, 1.53803657]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002558849998877122,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_109",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003780289998758235,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006651000001056673,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_109>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_109>\nf = functools.partial(<function jvp_unlinearized at 0x7f09c00dd090>, <function fun_with_nested_calls_2 at 0x7f09c00dca60>)\nargs = ((array([[0.36139561, 1.53803657]]),), (array([[0.36139561, 1.53803657]]),))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024506399995516404,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_11",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00038813799983472563,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006581479999567819,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_11>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_11>, f = <function simple_fun_fanout at 0x7f09c00dc820>\nargs = (array([[ 0.24196227, -1.91328024],\n       [-1.72491783, -0.56228753],\n       [-1.01283112,  0.31424733]]), array([[-0.90802408, -1.4123037 ],\n       [ 1.46564877, -0.2257763 ],\n       [ 0.0675282 , -1.42474819]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023979599995982426,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_12",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003997010001057788,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006557169999723556,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_12>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_12>\nf = functools.partial(<function jvp at 0x7f09d10c83a0>, <function simple_fun_fanout at 0x7f09c00dc820>)\nargs = ((array([[ 0.24196227, -1.91328024],\n       [-1.72491783, -0.56228753],\n       [-1.01283112,  0.31424733]]), array([[-...1424733]]), array([[-0.90802408, -1.4123037 ],\n       [ 1.46564877, -0.2257763 ],\n       [ 0.0675282 , -1.42474819]])))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002544870001202071,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_13",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003741470000022673,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006768769999325741,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_13>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_13>, f = <PjitFunction of <function simple_fun_fanout at 0x7f09c00dc820>>\nargs = (array([[ 0.24196227, -1.91328024],\n       [-1.72491783, -0.56228753],\n       [-1.01283112,  0.31424733]]), array([[-0.90802408, -1.4123037 ],\n       [ 1.46564877, -0.2257763 ],\n       [ 0.0675282 , -1.42474819]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002455670000927057,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_14",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00038790999997218023,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006858459998966282,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_14>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_14>\nf = <PjitFunction of <PjitFunction of <function simple_fun_fanout at 0x7f09c00dc820>>>\nargs = (array([[ 0.24196227, -1.91328024],\n       [-1.72491783, -0.56228753],\n       [-1.01283112,  0.31424733]]), array([[-0.90802408, -1.4123037 ],\n       [ 1.46564877, -0.2257763 ],\n       [ 0.0675282 , -1.42474819]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0003421689998504007,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_15",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004041330000745802,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005761859999893204,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_15>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_15>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <function simple_fun_fanout at 0x7f09c00dc820>)\nargs = (array([[ 0.24196227, -1.91328024],\n       [-1.72491783, -0.56228753],\n       [-1.01283112,  0.31424733]]), array([[-0.90802408, -1.4123037 ],\n       [ 1.46564877, -0.2257763 ],\n       [ 0.0675282 , -1.42474819]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00025201400012520025,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_16",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00038142199991852976,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006890330000715039,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_16>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_16>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <PjitFunction of <function simple_fun_fanout at 0x7f09c00dc820>>)\nargs = (array([[ 0.24196227, -1.91328024],\n       [-1.72491783, -0.56228753],\n       [-1.01283112,  0.31424733]]), array([[-0.90802408, -1.4123037 ],\n       [ 1.46564877, -0.2257763 ],\n       [ 0.0675282 , -1.42474819]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024958900007732154,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_17",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00037855200002923084,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006842450000021927,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_17>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_17>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, functools.partial(<function core_call at 0x7f09c00dc670>, <function simple_fun_fanout at 0x7f09c00dc820>))\nargs = (array([[ 0.24196227, -1.91328024],\n       [-1.72491783, -0.56228753],\n       [-1.01283112,  0.31424733]]), array([[-0.90802408, -1.4123037 ],\n       [ 1.46564877, -0.2257763 ],\n       [ 0.0675282 , -1.42474819]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024443999996037746,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_18",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003832639999927778,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006776449999961187,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_18>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_18>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function simple_fun_fanout at 0x7f09c00dc820>)\nargs = (array([[ 0.24196227, -1.91328024],\n       [-1.72491783, -0.56228753],\n       [-1.01283112,  0.31424733]]), array([[-0.90802408, -1.4123037 ],\n       [ 1.46564877, -0.2257763 ],\n       [ 0.0675282 , -1.42474819]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002444799999921088,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_19",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036476000013863086,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007029599998986669,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_19>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_19>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <PjitFunction of <function simple_fun_fanout at 0x7f09c00dc820>>)\nargs = (array([[ 0.24196227, -1.91328024],\n       [-1.72491783, -0.56228753],\n       [-1.01283112,  0.31424733]]), array([[-0.90802408, -1.4123037 ],\n       [ 1.46564877, -0.2257763 ],\n       [ 0.0675282 , -1.42474819]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023964999991221703,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_2",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003720930001236411,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007033550000414834,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_2>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_2>, f = <PjitFunction of <function simple_fun at 0x7f09c00dc790>>\nargs = (array([[ 0.49671415, -0.1382643 ],\n       [ 0.64768854,  1.52302986],\n       [-0.23415337, -0.23413696]]), array([[ 1.57921282,  0.76743473],\n       [-0.46947439,  0.54256004],\n       [-0.46341769, -0.46572975]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002517850000458566,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_20",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00039177200005724444,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006594619999304996,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_20>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_20>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function simple_fun_fanout at 0x7f09c00dc820>))\nargs = (array([[ 0.24196227, -1.91328024],\n       [-1.72491783, -0.56228753],\n       [-1.01283112,  0.31424733]]), array([[-0.90802408, -1.4123037 ],\n       [ 1.46564877, -0.2257763 ],\n       [ 0.0675282 , -1.42474819]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.000243202000092424,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_21",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.000385233999850243,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006751320001967542,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_21>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_21>\nf = functools.partial(<function jvp_unlinearized at 0x7f09c00dd090>, <function simple_fun_fanout at 0x7f09c00dc820>)\nargs = ((array([[ 0.24196227, -1.91328024],\n       [-1.72491783, -0.56228753],\n       [-1.01283112,  0.31424733]]), array([[-...1424733]]), array([[-0.90802408, -1.4123037 ],\n       [ 1.46564877, -0.2257763 ],\n       [ 0.0675282 , -1.42474819]])))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002587510000466864,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_22",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004073430000062217,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006420790000447596,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_22>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_22>, f = <function product_io_fun at 0x7f09c00dcca0>\nargs = ({'a': array([[-0.54438272,  0.11092259],\n       [-1.15099358,  0.37569802]]), 'b': array([[-0.60063869, -0.29169375],...967012],\n       [-1.32818605,  0.19686124]]), array([[ 0.73846658,  0.17136828],\n       [-0.11564828, -0.3011037 ]]))))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023647700004403305,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_23",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00039316199990935274,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006512219999876834,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_23>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_23>\nf = functools.partial(<function jvp at 0x7f09d10c83a0>, <function product_io_fun at 0x7f09c00dcca0>)\nargs = (({'a': array([[-0.54438272,  0.11092259],\n       [-1.15099358,  0.37569802]]), 'b': array([[-0.60063869, -0.29169375]...67012],\n       [-1.32818605,  0.19686124]]), array([[ 0.73846658,  0.17136828],\n       [-0.11564828, -0.3011037 ]])))))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023626799998055503,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_24",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003805619999184273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006801829999858455,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_24>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_24>, f = <PjitFunction of <function product_io_fun at 0x7f09c00dcca0>>\nargs = ({'a': array([[-0.54438272,  0.11092259],\n       [-1.15099358,  0.37569802]]), 'b': array([[-0.60063869, -0.29169375],...967012],\n       [-1.32818605,  0.19686124]]), array([[ 0.73846658,  0.17136828],\n       [-0.11564828, -0.3011037 ]]))))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023577299998578383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_25",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00035807400013254664,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000649604000045656,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_25>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_25>\nf = <PjitFunction of <PjitFunction of <function product_io_fun at 0x7f09c00dcca0>>>\nargs = ({'a': array([[-0.54438272,  0.11092259],\n       [-1.15099358,  0.37569802]]), 'b': array([[-0.60063869, -0.29169375],...967012],\n       [-1.32818605,  0.19686124]]), array([[ 0.73846658,  0.17136828],\n       [-0.11564828, -0.3011037 ]]))))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002333930001441331,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_26",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00035989000002700777,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006693349998840858,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_26>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_26>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <function product_io_fun at 0x7f09c00dcca0>)\nargs = ({'a': array([[-0.54438272,  0.11092259],\n       [-1.15099358,  0.37569802]]), 'b': array([[-0.60063869, -0.29169375],...967012],\n       [-1.32818605,  0.19686124]]), array([[ 0.73846658,  0.17136828],\n       [-0.11564828, -0.3011037 ]]))))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024599599987595866,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_27",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003750409998701798,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000707551000004969,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_27>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_27>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <PjitFunction of <function product_io_fun at 0x7f09c00dcca0>>)\nargs = ({'a': array([[-0.54438272,  0.11092259],\n       [-1.15099358,  0.37569802]]), 'b': array([[-0.60063869, -0.29169375],...967012],\n       [-1.32818605,  0.19686124]]), array([[ 0.73846658,  0.17136828],\n       [-0.11564828, -0.3011037 ]]))))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024002100008146954,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_28",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00037687600001845567,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006765830000858841,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_28>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_28>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, functools.partial(<function core_call at 0x7f09c00dc670>, <function product_io_fun at 0x7f09c00dcca0>))\nargs = ({'a': array([[-0.54438272,  0.11092259],\n       [-1.15099358,  0.37569802]]), 'b': array([[-0.60063869, -0.29169375],...967012],\n       [-1.32818605,  0.19686124]]), array([[ 0.73846658,  0.17136828],\n       [-0.11564828, -0.3011037 ]]))))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023948699981701793,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_29",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003602219999265799,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006777940000119997,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_29>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_29>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function product_io_fun at 0x7f09c00dcca0>)\nargs = ({'a': array([[-0.54438272,  0.11092259],\n       [-1.15099358,  0.37569802]]), 'b': array([[-0.60063869, -0.29169375],...967012],\n       [-1.32818605,  0.19686124]]), array([[ 0.73846658,  0.17136828],\n       [-0.11564828, -0.3011037 ]]))))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002453069998864521,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_3",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.000381009999955495,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006981429999086686,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_3>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_3>\nf = <PjitFunction of <PjitFunction of <function simple_fun at 0x7f09c00dc790>>>\nargs = (array([[ 0.49671415, -0.1382643 ],\n       [ 0.64768854,  1.52302986],\n       [-0.23415337, -0.23413696]]), array([[ 1.57921282,  0.76743473],\n       [-0.46947439,  0.54256004],\n       [-0.46341769, -0.46572975]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023323400000663241,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_30",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003738200000498182,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006639339999310323,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_30>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_30>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <PjitFunction of <function product_io_fun at 0x7f09c00dcca0>>)\nargs = ({'a': array([[-0.54438272,  0.11092259],\n       [-1.15099358,  0.37569802]]), 'b': array([[-0.60063869, -0.29169375],...967012],\n       [-1.32818605,  0.19686124]]), array([[ 0.73846658,  0.17136828],\n       [-0.11564828, -0.3011037 ]]))))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00025634899998294713,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_31",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003875760000937589,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006347769999592856,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_31>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_31>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function product_io_fun at 0x7f09c00dcca0>))\nargs = ({'a': array([[-0.54438272,  0.11092259],\n       [-1.15099358,  0.37569802]]), 'b': array([[-0.60063869, -0.29169375],...967012],\n       [-1.32818605,  0.19686124]]), array([[ 0.73846658,  0.17136828],\n       [-0.11564828, -0.3011037 ]]))))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00025142899994534673,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_32",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00038273600011962117,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007012460000623832,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_32>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_32>\nf = functools.partial(<function jvp_unlinearized at 0x7f09c00dd090>, <function product_io_fun at 0x7f09c00dcca0>)\nargs = (({'a': array([[-0.54438272,  0.11092259],\n       [-1.15099358,  0.37569802]]), 'b': array([[-0.60063869, -0.29169375]...67012],\n       [-1.32818605,  0.19686124]]), array([[ 0.73846658,  0.17136828],\n       [-0.11564828, -0.3011037 ]])))))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023616499993295292,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_33",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036668900020231376,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007130660001166689,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_33>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_33>, f = <function fun_with_call at 0x7f09c00dc8b0>\nargs = (array([[-1.47852199, -0.71984421],\n       [-0.46063877,  1.05712223],\n       [ 0.34361829, -1.76304016]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023798300003363693,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_34",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00037306100011846866,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006638580000526417,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_34>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_34>\nf = functools.partial(<function jvp at 0x7f09d10c83a0>, <function fun_with_call at 0x7f09c00dc8b0>)\nargs = ((array([[-1.47852199, -0.71984421],\n       [-0.46063877,  1.05712223],\n       [ 0.34361829, -1.76304016]]),), (array([[-1.47852199, -0.71984421],\n       [-0.46063877,  1.05712223],\n       [ 0.34361829, -1.76304016]]),))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00027608300001702446,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_35",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00037324000004446134,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006637429999045708,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_35>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_35>, f = <PjitFunction of <function fun_with_call at 0x7f09c00dc8b0>>\nargs = (array([[-1.47852199, -0.71984421],\n       [-0.46063877,  1.05712223],\n       [ 0.34361829, -1.76304016]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00025928599984581524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_36",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00034049400005642383,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006917890000295301,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_36>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_36>\nf = <PjitFunction of <PjitFunction of <function fun_with_call at 0x7f09c00dc8b0>>>\nargs = (array([[-1.47852199, -0.71984421],\n       [-0.46063877,  1.05712223],\n       [ 0.34361829, -1.76304016]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023670299992772925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_37",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.000379391000024043,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006242050001219468,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_37>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_37>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_with_call at 0x7f09c00dc8b0>)\nargs = (array([[-1.47852199, -0.71984421],\n       [-0.46063877,  1.05712223],\n       [ 0.34361829, -1.76304016]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.000250947000040469,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_38",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003730920000180049,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000708974999952261,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_38>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_38>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <PjitFunction of <function fun_with_call at 0x7f09c00dc8b0>>)\nargs = (array([[-1.47852199, -0.71984421],\n       [-0.46063877,  1.05712223],\n       [ 0.34361829, -1.76304016]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023963700004969724,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_39",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036079599999538914,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006747480001649819,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_39>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_39>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_with_call at 0x7f09c00dc8b0>))\nargs = (array([[-1.47852199, -0.71984421],\n       [-0.46063877,  1.05712223],\n       [ 0.34361829, -1.76304016]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00028083500001230277,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_4",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004002489999948011,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006448560000080761,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_4>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_4>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <function simple_fun at 0x7f09c00dc790>)\nargs = (array([[ 0.49671415, -0.1382643 ],\n       [ 0.64768854,  1.52302986],\n       [-0.23415337, -0.23413696]]), array([[ 1.57921282,  0.76743473],\n       [-0.46947439,  0.54256004],\n       [-0.46341769, -0.46572975]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002766109998901811,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_40",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007907359999990149,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008466150000003836,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_40>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_40>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_with_call at 0x7f09c00dc8b0>)\nargs = (array([[-1.47852199, -0.71984421],\n       [-0.46063877,  1.05712223],\n       [ 0.34361829, -1.76304016]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00027616299985311343,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_41",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003716030000759929,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007109910000053787,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_41>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_41>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <PjitFunction of <function fun_with_call at 0x7f09c00dc8b0>>)\nargs = (array([[-1.47852199, -0.71984421],\n       [-0.46063877,  1.05712223],\n       [ 0.34361829, -1.76304016]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024194499997065577,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_42",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00042502399992372375,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006838939998488058,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_42>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_42>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_with_call at 0x7f09c00dc8b0>))\nargs = (array([[-1.47852199, -0.71984421],\n       [-0.46063877,  1.05712223],\n       [ 0.34361829, -1.76304016]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002376600000388862,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_43",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00037316900011319376,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006641069999204774,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_43>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_43>\nf = functools.partial(<function jvp_unlinearized at 0x7f09c00dd090>, <function fun_with_call at 0x7f09c00dc8b0>)\nargs = ((array([[-1.47852199, -0.71984421],\n       [-0.46063877,  1.05712223],\n       [ 0.34361829, -1.76304016]]),), (array([[-1.47852199, -0.71984421],\n       [-0.46063877,  1.05712223],\n       [ 0.34361829, -1.76304016]]),))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023331200009124586,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_44",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00034346999996159866,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007024310000360856,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_44>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_44>, f = <function fun_with_two_calls at 0x7f09c00dcb80>\nargs = (array([[ 0.32408397, -0.38508228],\n       [-0.676922  ,  0.61167629],\n       [ 1.03099952,  0.93128012]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002545439999721566,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_45",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00037220599983811553,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006792040001073474,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_45>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_45>\nf = functools.partial(<function jvp at 0x7f09d10c83a0>, <function fun_with_two_calls at 0x7f09c00dcb80>)\nargs = ((array([[ 0.32408397, -0.38508228],\n       [-0.676922  ,  0.61167629],\n       [ 1.03099952,  0.93128012]]),), (array([[ 0.32408397, -0.38508228],\n       [-0.676922  ,  0.61167629],\n       [ 1.03099952,  0.93128012]]),))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023613700000169047,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_46",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003766800000448711,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000686699999960183,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_46>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_46>, f = <PjitFunction of <function fun_with_two_calls at 0x7f09c00dcb80>>\nargs = (array([[ 0.32408397, -0.38508228],\n       [-0.676922  ,  0.61167629],\n       [ 1.03099952,  0.93128012]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00026273900016349216,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_47",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003614320000906446,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006827390000125888,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_47>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_47>\nf = <PjitFunction of <PjitFunction of <function fun_with_two_calls at 0x7f09c00dcb80>>>\nargs = (array([[ 0.32408397, -0.38508228],\n       [-0.676922  ,  0.61167629],\n       [ 1.03099952,  0.93128012]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023256600002241612,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_48",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003615339999214484,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006930839999768068,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_48>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_48>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_with_two_calls at 0x7f09c00dcb80>)\nargs = (array([[ 0.32408397, -0.38508228],\n       [-0.676922  ,  0.61167629],\n       [ 1.03099952,  0.93128012]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002631770000789402,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_49",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004528169999957754,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006716999998843676,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_49>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_49>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <PjitFunction of <function fun_with_two_calls at 0x7f09c00dcb80>>)\nargs = (array([[ 0.32408397, -0.38508228],\n       [-0.676922  ,  0.61167629],\n       [ 1.03099952,  0.93128012]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002782240001124592,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_5",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036726799999087234,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006827510001130577,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_5>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_5>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <PjitFunction of <function simple_fun at 0x7f09c00dc790>>)\nargs = (array([[ 0.49671415, -0.1382643 ],\n       [ 0.64768854,  1.52302986],\n       [-0.23415337, -0.23413696]]), array([[ 1.57921282,  0.76743473],\n       [-0.46947439,  0.54256004],\n       [-0.46341769, -0.46572975]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024283300012939435,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_50",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003580509999210335,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006634530000155792,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_50>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_50>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_with_two_calls at 0x7f09c00dcb80>))\nargs = (array([[ 0.32408397, -0.38508228],\n       [-0.676922  ,  0.61167629],\n       [ 1.03099952,  0.93128012]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023533699982181133,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_51",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036780899995392247,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000755405000063547,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_51>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_51>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_with_two_calls at 0x7f09c00dcb80>)\nargs = (array([[ 0.32408397, -0.38508228],\n       [-0.676922  ,  0.61167629],\n       [ 1.03099952,  0.93128012]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00027836199978992227,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_52",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003707660000600299,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000655181999945853,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_52>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_52>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <PjitFunction of <function fun_with_two_calls at 0x7f09c00dcb80>>)\nargs = (array([[ 0.32408397, -0.38508228],\n       [-0.676922  ,  0.61167629],\n       [ 1.03099952,  0.93128012]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024202400004469382,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_53",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003768159999708587,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006915730000400799,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_53>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_53>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_with_two_calls at 0x7f09c00dcb80>))\nargs = (array([[ 0.32408397, -0.38508228],\n       [-0.676922  ,  0.61167629],\n       [ 1.03099952,  0.93128012]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.000252928999998403,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_54",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036399100008566165,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008012810001218895,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_54>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_54>\nf = functools.partial(<function jvp_unlinearized at 0x7f09c00dd090>, <function fun_with_two_calls at 0x7f09c00dcb80>)\nargs = ((array([[ 0.32408397, -0.38508228],\n       [-0.676922  ,  0.61167629],\n       [ 1.03099952,  0.93128012]]),), (array([[ 0.32408397, -0.38508228],\n       [-0.676922  ,  0.61167629],\n       [ 1.03099952,  0.93128012]]),))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024726099991312367,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_55",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00041782600010265014,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005931850000706618,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_55>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_55>, f = <function fun_with_call_closure at 0x7f09c00dcc10>\nargs = (array([[-0.83921752, -0.30921238],\n       [ 0.33126343,  0.97554513],\n       [-0.47917424, -0.18565898]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00026083399984599964,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_56",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.000396061999936137,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006826129999808472,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_56>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_56>\nf = functools.partial(<function jvp at 0x7f09d10c83a0>, <function fun_with_call_closure at 0x7f09c00dcc10>)\nargs = ((array([[-0.83921752, -0.30921238],\n       [ 0.33126343,  0.97554513],\n       [-0.47917424, -0.18565898]]),), (array([[-0.83921752, -0.30921238],\n       [ 0.33126343,  0.97554513],\n       [-0.47917424, -0.18565898]]),))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00025281799980803044,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_57",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003678539999327768,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006658640002115135,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_57>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_57>, f = <PjitFunction of <function fun_with_call_closure at 0x7f09c00dcc10>>\nargs = (array([[-0.83921752, -0.30921238],\n       [ 0.33126343,  0.97554513],\n       [-0.47917424, -0.18565898]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00026491699986763706,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_58",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00038093400007710443,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006958839999242628,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_58>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_58>\nf = <PjitFunction of <PjitFunction of <function fun_with_call_closure at 0x7f09c00dcc10>>>\nargs = (array([[-0.83921752, -0.30921238],\n       [ 0.33126343,  0.97554513],\n       [-0.47917424, -0.18565898]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00025661399990895006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_59",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004017169999315229,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007486800000151561,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_59>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_59>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_with_call_closure at 0x7f09c00dcc10>)\nargs = (array([[-0.83921752, -0.30921238],\n       [ 0.33126343,  0.97554513],\n       [-0.47917424, -0.18565898]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002563829998507572,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_6",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036863300010736566,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000703918999988673,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_6>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_6>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, functools.partial(<function core_call at 0x7f09c00dc670>, <function simple_fun at 0x7f09c00dc790>))\nargs = (array([[ 0.49671415, -0.1382643 ],\n       [ 0.64768854,  1.52302986],\n       [-0.23415337, -0.23413696]]), array([[ 1.57921282,  0.76743473],\n       [-0.46947439,  0.54256004],\n       [-0.46341769, -0.46572975]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024416899987045326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_60",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004017090000161261,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000714732999995249,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_60>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_60>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <PjitFunction of <function fun_with_call_closure at 0x7f09c00dcc10>>)\nargs = (array([[-0.83921752, -0.30921238],\n       [ 0.33126343,  0.97554513],\n       [-0.47917424, -0.18565898]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002558040000621986,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_61",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036582699999598844,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007150289998207882,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_61>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_61>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_with_call_closure at 0x7f09c00dcc10>))\nargs = (array([[-0.83921752, -0.30921238],\n       [ 0.33126343,  0.97554513],\n       [-0.47917424, -0.18565898]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024433599992335076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_62",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00035941199985245476,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006805380000969308,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_62>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_62>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_with_call_closure at 0x7f09c00dcc10>)\nargs = (array([[-0.83921752, -0.30921238],\n       [ 0.33126343,  0.97554513],\n       [-0.47917424, -0.18565898]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002598149999357702,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_63",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036704699982692546,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008336199998666416,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_63>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_63>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <PjitFunction of <function fun_with_call_closure at 0x7f09c00dcc10>>)\nargs = (array([[-0.83921752, -0.30921238],\n       [ 0.33126343,  0.97554513],\n       [-0.47917424, -0.18565898]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024677300007169833,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_64",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00038496599995596625,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007130049998522736,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_64>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_64>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_with_call_closure at 0x7f09c00dcc10>))\nargs = (array([[-0.83921752, -0.30921238],\n       [ 0.33126343,  0.97554513],\n       [-0.47917424, -0.18565898]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002567520000411605,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_65",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00037268300002324395,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007078800001636409,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_65>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_65>\nf = functools.partial(<function jvp_unlinearized at 0x7f09c00dd090>, <function fun_with_call_closure at 0x7f09c00dcc10>)\nargs = ((array([[-0.83921752, -0.30921238],\n       [ 0.33126343,  0.97554513],\n       [-0.47917424, -0.18565898]]),), (array([[-0.83921752, -0.30921238],\n       [ 0.33126343,  0.97554513],\n       [-0.47917424, -0.18565898]]),))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023985699999684584,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_66",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003662819999590283,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007245690001127514,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_66>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_66>, f = <function fun_call_jitted at 0x7f09c00dcaf0>\nargs = (array([-1.10633497]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023985400002857205,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_67",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036796300014430017,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006950609999876178,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_67>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_67>\nf = functools.partial(<function jvp at 0x7f09d10c83a0>, <function fun_call_jitted at 0x7f09c00dcaf0>)\nargs = ((array([-1.10633497]),), (array([-1.10633497]),))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024699899995539454,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_68",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00039874300000519725,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007104880000952107,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_68>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_68>, f = <PjitFunction of <function fun_call_jitted at 0x7f09c00dcaf0>>\nargs = (array([-1.10633497]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002575160001470067,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_69",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.000367720999975063,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007094810000580765,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_69>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_69>\nf = <PjitFunction of <PjitFunction of <function fun_call_jitted at 0x7f09c00dcaf0>>>, args = (array([-1.10633497]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024365500007661467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_7",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00037311999994926737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007247490000281687,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_7>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_7>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function simple_fun at 0x7f09c00dc790>)\nargs = (array([[ 0.49671415, -0.1382643 ],\n       [ 0.64768854,  1.52302986],\n       [-0.23415337, -0.23413696]]), array([[ 1.57921282,  0.76743473],\n       [-0.46947439,  0.54256004],\n       [-0.46341769, -0.46572975]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00025329999994028185,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_70",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00038833500002510846,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007255630000599922,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_70>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_70>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_call_jitted at 0x7f09c00dcaf0>), args = (array([-1.10633497]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002442350000819715,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_71",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003795200000240584,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007266719999279303,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_71>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_71>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <PjitFunction of <function fun_call_jitted at 0x7f09c00dcaf0>>)\nargs = (array([-1.10633497]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00025268600006711495,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_72",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003726579998328816,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006743999999798689,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_72>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_72>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_call_jitted at 0x7f09c00dcaf0>))\nargs = (array([-1.10633497]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00028553500010275457,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_73",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003832830000192189,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000795895000010205,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_73>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_73>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_call_jitted at 0x7f09c00dcaf0>), args = (array([-1.10633497]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00027459000011731405,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_74",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036913600001753366,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007216770000013639,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_74>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_74>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <PjitFunction of <function fun_call_jitted at 0x7f09c00dcaf0>>)\nargs = (array([-1.10633497]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002560899999934918,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_75",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036625200004891667,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007220690001759067,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_75>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_75>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_call_jitted at 0x7f09c00dcaf0>))\nargs = (array([-1.10633497]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002543889997923543,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_76",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003918749998774729,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006293110000115121,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_76>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_76>\nf = functools.partial(<function jvp_unlinearized at 0x7f09c00dd090>, <function fun_call_jitted at 0x7f09c00dcaf0>)\nargs = ((array([-1.10633497]),), (array([-1.10633497]),))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002593130000150268,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_77",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003700639999806299,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007204039998214284,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_77>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_77>, f = <function fun_with_nested_calls at 0x7f09c00dc940>\nargs = (-1.1962066240806708,)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002519290001146146,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_78",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00034590500013109704,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006659949999630044,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_78>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_78>\nf = functools.partial(<function jvp at 0x7f09d10c83a0>, <function fun_with_nested_calls at 0x7f09c00dc940>)\nargs = ((-1.1962066240806708,), (-1.1962066240806708,))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00026812500004780304,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_79",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036266200004320126,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007630029999745602,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_79>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_79>, f = <PjitFunction of <function fun_with_nested_calls at 0x7f09c00dc940>>\nargs = (-1.1962066240806708,)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023968200002855156,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_8",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003927999998722953,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006355489999805286,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_8>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_8>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <PjitFunction of <function simple_fun at 0x7f09c00dc790>>)\nargs = (array([[ 0.49671415, -0.1382643 ],\n       [ 0.64768854,  1.52302986],\n       [-0.23415337, -0.23413696]]), array([[ 1.57921282,  0.76743473],\n       [-0.46947439,  0.54256004],\n       [-0.46341769, -0.46572975]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00025446799986639235,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_80",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.000385093999966557,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006643359999998211,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_80>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_80>\nf = <PjitFunction of <PjitFunction of <function fun_with_nested_calls at 0x7f09c00dc940>>>, args = (-1.1962066240806708,)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00025321799989797,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_81",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.000390568000057101,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006943060000139667,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_81>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_81>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_with_nested_calls at 0x7f09c00dc940>), args = (-1.1962066240806708,)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002642239999204321,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_82",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00039553500005240494,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006738399999903777,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_82>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_82>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <PjitFunction of <function fun_with_nested_calls at 0x7f09c00dc940>>)\nargs = (-1.1962066240806708,)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002950449998024851,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_83",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00038181300010364794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006949199998871336,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_83>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_83>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_with_nested_calls at 0x7f09c00dc940>))\nargs = (-1.1962066240806708,)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00023908699995445204,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_84",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.000369897999917157,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006924619999608694,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_84>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_84>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_with_nested_calls at 0x7f09c00dc940>)\nargs = (-1.1962066240806708,)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002475929998126958,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_85",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00034790399990924925,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006668319999789674,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_85>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_85>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <PjitFunction of <function fun_with_nested_calls at 0x7f09c00dc940>>)\nargs = (-1.1962066240806708,)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002555220000886038,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_86",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003662809999696037,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007343350000610371,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_86>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_86>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_with_nested_calls at 0x7f09c00dc940>))\nargs = (-1.1962066240806708,)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002464720000716625,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_87",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.000364757999932408,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006881340000290948,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_87>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_87>\nf = functools.partial(<function jvp_unlinearized at 0x7f09c00dd090>, <function fun_with_nested_calls at 0x7f09c00dc940>)\nargs = ((-1.1962066240806708,), (-1.1962066240806708,))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0005685099999936938,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_88",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006884879999233817,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010347499999170395,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_88>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_88>, f = <function fun_with_nested_calls at 0x7f09c00dc940>\nargs = (array([[ 0.81252582,  1.35624003],\n       [-0.07201012,  1.0035329 ],\n       [ 0.36163603, -0.64511975]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002764070000011998,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_89",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00044865099994240154,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006871389998650557,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_89>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_89>\nf = functools.partial(<function jvp at 0x7f09d10c83a0>, <function fun_with_nested_calls at 0x7f09c00dc940>)\nargs = ((array([[ 0.81252582,  1.35624003],\n       [-0.07201012,  1.0035329 ],\n       [ 0.36163603, -0.64511975]]),), (array([[ 0.81252582,  1.35624003],\n       [-0.07201012,  1.0035329 ],\n       [ 0.36163603, -0.64511975]]),))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002505990000827296,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_9",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003906760000518261,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007098270000369666,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_9>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_9>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function simple_fun at 0x7f09c00dc790>))\nargs = (array([[ 0.49671415, -0.1382643 ],\n       [ 0.64768854,  1.52302986],\n       [-0.23415337, -0.23413696]]), array([[ 1.57921282,  0.76743473],\n       [-0.46947439,  0.54256004],\n       [-0.46341769, -0.46572975]]))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002885470000819623,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_90",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00041084000008595467,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006316369999694871,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_90>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_90>, f = <PjitFunction of <function fun_with_nested_calls at 0x7f09c00dc940>>\nargs = (array([[ 0.81252582,  1.35624003],\n       [-0.07201012,  1.0035329 ],\n       [ 0.36163603, -0.64511975]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00027382300004319404,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_91",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004072819999692001,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006231239999578975,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_91>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_91>\nf = <PjitFunction of <PjitFunction of <function fun_with_nested_calls at 0x7f09c00dc940>>>\nargs = (array([[ 0.81252582,  1.35624003],\n       [-0.07201012,  1.0035329 ],\n       [ 0.36163603, -0.64511975]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002454139998917526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_92",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00037820300008206686,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006736870000167983,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_92>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_92>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_with_nested_calls at 0x7f09c00dc940>)\nargs = (array([[ 0.81252582,  1.35624003],\n       [-0.07201012,  1.0035329 ],\n       [ 0.36163603, -0.64511975]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024360299994441448,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_93",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003981620000104158,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009222809999300807,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_93>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_93>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, <PjitFunction of <function fun_with_nested_calls at 0x7f09c00dc940>>)\nargs = (array([[ 0.81252582,  1.35624003],\n       [-0.07201012,  1.0035329 ],\n       [ 0.36163603, -0.64511975]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00027182899998479115,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_94",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00038928699996176874,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000703555999962191,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_94>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_94>\nf = functools.partial(<function core_call at 0x7f09c00dc670>, functools.partial(<function core_call at 0x7f09c00dc670>, <function fun_with_nested_calls at 0x7f09c00dc940>))\nargs = (array([[ 0.81252582,  1.35624003],\n       [-0.07201012,  1.0035329 ],\n       [ 0.36163603, -0.64511975]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002516019999347918,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_95",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005120309999711026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005603810000138765,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_95>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_95>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_with_nested_calls at 0x7f09c00dc940>)\nargs = (array([[ 0.81252582,  1.35624003],\n       [-0.07201012,  1.0035329 ],\n       [ 0.36163603, -0.64511975]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002552109999669483,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_96",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00037903500015090685,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007083590001002449,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_96>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_96>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, <PjitFunction of <function fun_with_nested_calls at 0x7f09c00dc940>>)\nargs = (array([[ 0.81252582,  1.35624003],\n       [-0.07201012,  1.0035329 ],\n       [ 0.36163603, -0.64511975]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0002517170000828628,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_97",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.000383893999924112,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006730519999109674,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_97>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_97>\nf = functools.partial(<function core_closed_call at 0x7f09c00dc700>, functools.partial(<function core_closed_call at 0x7f09c00dc700>, <function fun_with_nested_calls at 0x7f09c00dc940>))\nargs = (array([[ 0.81252582,  1.35624003],\n       [-0.07201012,  1.0035329 ],\n       [ 0.36163603, -0.64511975]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00024117299994941277,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_98",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003848139999718114,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006815609999648586,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_98>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_98>\nf = functools.partial(<function jvp_unlinearized at 0x7f09c00dd090>, <function fun_with_nested_calls at 0x7f09c00dc940>)\nargs = ((array([[ 0.81252582,  1.35624003],\n       [-0.07201012,  1.0035329 ],\n       [ 0.36163603, -0.64511975]]),), (array([[ 0.81252582,  1.35624003],\n       [-0.07201012,  1.0035329 ],\n       [ 0.36163603, -0.64511975]]),))\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.00022679499988953467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/vjp_test.py::CoreTest::test_vjp_99",
            "lineno": 195,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036112399993726285,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006413640001028398,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/vjp_test.py",
                    "lineno": 202,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 2 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/vjp_test.py",
                        "lineno": 202,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_vjp_99>\n",
                "longrepr": "self = <src.jax_tests_reduced.vjp_test.CoreTest testMethod=test_vjp_99>, f = <function fun_with_nested_calls_2 at 0x7f09c00dca60>\nargs = (array([[0.36139561, 1.53803657]]),)\n\n    @parameterized.named_parameters(\n        (str(i), *spec) for i, spec in enumerate(test_specs)\n    )\n    def test_vjp(self, f, args):\n        jtu.check_vjp(\n            f,\n>           partial_timed(vjp, f),\n            args,\n            rtol={np.float32: 3e-1, np.float64: 1e-5},\n            atol={np.float32: 1e-2, np.float64: 1e-5},\n        )\nE       TypeError: partial_timed() takes 1 positional argument but 2 were given\n\nsrc/jax_tests_reduced/vjp_test.py:202: TypeError"
            },
            "teardown": {
                "duration": 0.0013701229997877817,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes0",
            "lineno": 189,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005119879999710975,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005689269999038515,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/zeros_test.py",
                    "lineno": 207,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/zeros_test.py",
                        "lineno": 207,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes0>\n",
                "longrepr": "self = <src.jax_tests_reduced.zeros_test.LaxBackedNumpyTests testMethod=testZerosOnes0>, op = 'zeros', shape = 2, dtype = <class 'numpy.uint32'>\n\n    @jtu.sample_product(\n        op=[\"zeros\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/zeros_test.py:207: TypeError"
            },
            "teardown": {
                "duration": 0.00023182599989013397,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes1",
            "lineno": 189,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003459870001734089,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006511880001198733,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/zeros_test.py",
                    "lineno": 207,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/zeros_test.py",
                        "lineno": 207,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes1>\n",
                "longrepr": "self = <src.jax_tests_reduced.zeros_test.LaxBackedNumpyTests testMethod=testZerosOnes1>, op = 'zeros', shape = (2,), dtype = <class 'numpy.bool_'>\n\n    @jtu.sample_product(\n        op=[\"zeros\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/zeros_test.py:207: TypeError"
            },
            "teardown": {
                "duration": 0.00023365199990621477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes2",
            "lineno": 189,
            "outcome": "failed",
            "setup": {
                "duration": 0.00038209000013011973,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006489150000561494,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/zeros_test.py",
                    "lineno": 207,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/zeros_test.py",
                        "lineno": 207,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes2>\n",
                "longrepr": "self = <src.jax_tests_reduced.zeros_test.LaxBackedNumpyTests testMethod=testZerosOnes2>, op = 'zeros', shape = 2\ndtype = <class 'ml_dtypes.bfloat16'>\n\n    @jtu.sample_product(\n        op=[\"zeros\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/zeros_test.py:207: TypeError"
            },
            "teardown": {
                "duration": 0.0002301960000750114,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes3",
            "lineno": 189,
            "outcome": "failed",
            "setup": {
                "duration": 0.00039618499999960477,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006348990000333288,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/zeros_test.py",
                    "lineno": 207,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/zeros_test.py",
                        "lineno": 207,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes3>\n",
                "longrepr": "self = <src.jax_tests_reduced.zeros_test.LaxBackedNumpyTests testMethod=testZerosOnes3>, op = 'zeros', shape = (3, 0)\ndtype = <class 'numpy.uint8'>\n\n    @jtu.sample_product(\n        op=[\"zeros\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/zeros_test.py:207: TypeError"
            },
            "teardown": {
                "duration": 0.00022146600008454698,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes4",
            "lineno": 189,
            "outcome": "failed",
            "setup": {
                "duration": 0.00034402100004626845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006848799998806498,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/zeros_test.py",
                    "lineno": 207,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/zeros_test.py",
                        "lineno": 207,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes4>\n",
                "longrepr": "self = <src.jax_tests_reduced.zeros_test.LaxBackedNumpyTests testMethod=testZerosOnes4>, op = 'zeros', shape = array(4, dtype=int32)\ndtype = <class 'ml_dtypes.bfloat16'>\n\n    @jtu.sample_product(\n        op=[\"zeros\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/zeros_test.py:207: TypeError"
            },
            "teardown": {
                "duration": 0.00022922500011191005,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes5",
            "lineno": 189,
            "outcome": "failed",
            "setup": {
                "duration": 0.00034978700000465324,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006789440001284675,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/zeros_test.py",
                    "lineno": 207,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/zeros_test.py",
                        "lineno": 207,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes5>\n",
                "longrepr": "self = <src.jax_tests_reduced.zeros_test.LaxBackedNumpyTests testMethod=testZerosOnes5>, op = 'zeros', shape = (3, 0)\ndtype = <class 'numpy.bool_'>\n\n    @jtu.sample_product(\n        op=[\"zeros\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/zeros_test.py:207: TypeError"
            },
            "teardown": {
                "duration": 0.00024544600000808714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes6",
            "lineno": 189,
            "outcome": "failed",
            "setup": {
                "duration": 0.00038065200010350964,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006039090001195291,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/zeros_test.py",
                    "lineno": 207,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/zeros_test.py",
                        "lineno": 207,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes6>\n",
                "longrepr": "self = <src.jax_tests_reduced.zeros_test.LaxBackedNumpyTests testMethod=testZerosOnes6>, op = 'zeros', shape = array([4, 5, 6], dtype=int32)\ndtype = <class 'numpy.float32'>\n\n    @jtu.sample_product(\n        op=[\"zeros\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/zeros_test.py:207: TypeError"
            },
            "teardown": {
                "duration": 0.0002502160000403819,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes7",
            "lineno": 189,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003673400001389382,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006237299999156676,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/zeros_test.py",
                    "lineno": 207,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/zeros_test.py",
                        "lineno": 207,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes7>\n",
                "longrepr": "self = <src.jax_tests_reduced.zeros_test.LaxBackedNumpyTests testMethod=testZerosOnes7>, op = 'zeros', shape = 2, dtype = <class 'numpy.float32'>\n\n    @jtu.sample_product(\n        op=[\"zeros\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/zeros_test.py:207: TypeError"
            },
            "teardown": {
                "duration": 0.0002441900001031172,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes8",
            "lineno": 189,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036360600006446475,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006348979998165305,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/zeros_test.py",
                    "lineno": 207,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/zeros_test.py",
                        "lineno": 207,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes8>\n",
                "longrepr": "self = <src.jax_tests_reduced.zeros_test.LaxBackedNumpyTests testMethod=testZerosOnes8>, op = 'zeros', shape = array(4, dtype=int32)\ndtype = <class 'numpy.bool_'>\n\n    @jtu.sample_product(\n        op=[\"zeros\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/zeros_test.py:207: TypeError"
            },
            "teardown": {
                "duration": 0.00028466699995988165,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/jax_tests_reduced/zeros_test.py::LaxBackedNumpyTests::testZerosOnes9",
            "lineno": 189,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003599350000058621,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005339079998520901,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/jax_tests_reduced/zeros_test.py",
                    "lineno": 207,
                    "message": "TypeError: partial_timed() takes 1 positional argument but 3 were given"
                },
                "traceback": [
                    {
                        "path": "src/jax_tests_reduced/zeros_test.py",
                        "lineno": 207,
                        "message": "TypeError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testZerosOnes9>\n",
                "longrepr": "self = <src.jax_tests_reduced.zeros_test.LaxBackedNumpyTests testMethod=testZerosOnes9>, op = 'zeros', shape = 2, dtype = <class 'numpy.int16'>\n\n    @jtu.sample_product(\n        op=[\"zeros\"],\n        shape=[\n            2,\n            (),\n            (2,),\n            (3, 0),\n            np.array((4, 5, 6), dtype=np.int32),\n            np.array(4, dtype=np.int32),\n        ],\n        dtype=all_dtypes,\n    )\n    def testZerosOnes(self, op, shape, dtype):\n        np_op = getattr(np, op)\n        jnp_op = getattr(jnp, op)\n        args_maker = lambda: []\n        np_op = partial(np_op, shape, dtype)\n>       jnp_op = partial_timed(jnp_op, shape, dtype)\nE       TypeError: partial_timed() takes 1 positional argument but 3 were given\n\nsrc/jax_tests_reduced/zeros_test.py:207: TypeError"
            },
            "teardown": {
                "duration": 0.029980537000028562,
                "outcome": "passed"
            }
        }
    ],
    "warnings": [
        {
            "message": "Unknown pytest.mark.multiaccelerator - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
            "category": "PytestUnknownMarkWarning",
            "when": "collect",
            "filename": "/home/frasermince/portability/src/jax_tests_reduced/array_test.py",
            "lineno": 48
        },
        {
            "message": "backend and device argument on jit is deprecated. You can use a `jax.sharding.Mesh` context manager or device_put the arguments before passing them to `jit`. Please see https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html for more information.",
            "category": "DeprecationWarning",
            "when": "runtest",
            "filename": "/home/dunganhdinh2002/miniconda3/lib/python3.10/site-packages/jax/_src/pjit.py",
            "lineno": 314
        }
    ]
}