{
    "created": 1684009033.6112082,
    "duration": 324.68485021591187,
    "exitcode": 1,
    "root": "/home/frasermince/portability",
    "environment": {
        "Python": "3.10.10",
        "Platform": "Linux-4.19.0-24-cloud-amd64-x86_64-with-glibc2.28",
        "Packages": {
            "pytest": "7.2.2",
            "pluggy": "1.0.0"
        },
        "Plugins": {
            "hypothesis": "6.70.2",
            "xdist": "3.2.1",
            "forked": "1.6.0",
            "metadata": "2.0.4",
            "json-report": "1.5.0",
            "timeout": "2.1.0"
        }
    },
    "summary": {
        "passed": 869,
        "skipped": 261,
        "failed": 11,
        "total": 1141,
        "collected": 1141
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/__init__.py",
                    "type": "Package"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_stops_training_in_after_save",
                    "type": "TestCaseFunction",
                    "lineno": 211
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_default_saver",
                    "type": "TestCaseFunction",
                    "lineno": 235
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_monitored_session",
                    "type": "TestCaseFunction",
                    "lineno": 179
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_both_secs_and_steps",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_none_secs_and_steps",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_when_saver_and_scaffold_both_present",
                    "type": "TestCaseFunction",
                    "lineno": 117
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_checkpoint_before_first_train_step",
                    "type": "TestCaseFunction",
                    "lineno": 484
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def",
                    "type": "TestCaseFunction",
                    "lineno": 513
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def_false",
                    "type": "TestCaseFunction",
                    "lineno": 539
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_saves_at_end",
                    "type": "TestCaseFunction",
                    "lineno": 464
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_at_begin_and_end",
                    "type": "TestCaseFunction",
                    "lineno": 151
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_periodically",
                    "type": "TestCaseFunction",
                    "lineno": 360
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_in_first_step",
                    "type": "TestCaseFunction",
                    "lineno": 133
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_periodically",
                    "type": "TestCaseFunction",
                    "lineno": 312
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_in_first_step",
                    "type": "TestCaseFunction",
                    "lineno": 411
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_periodically",
                    "type": "TestCaseFunction",
                    "lineno": 429
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_saves_when_saver_and_scaffold_both_missing",
                    "type": "TestCaseFunction",
                    "lineno": 99
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_two_listeners_with_default_saver",
                    "type": "TestCaseFunction",
                    "lineno": 272
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_False",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_True",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_False",
                    "type": "TestCaseFunction",
                    "lineno": 125
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_True",
                    "type": "TestCaseFunction",
                    "lineno": 125
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_False",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_True",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_False",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_True",
                    "type": "TestCaseFunction",
                    "lineno": 90
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_illegal_args",
                    "type": "TestCaseFunction",
                    "lineno": 106
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_at_end_only",
                    "type": "TestCaseFunction",
                    "lineno": 117
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs",
                    "type": "TestCaseFunction",
                    "lineno": 238
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs_and_end",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps_and_end",
                    "type": "TestCaseFunction",
                    "lineno": 181
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_first_step",
                    "type": "TestCaseFunction",
                    "lineno": 187
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_formatter",
                    "type": "TestCaseFunction",
                    "lineno": 254
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
                    "type": "TestCaseFunction",
                    "lineno": 243
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNegativeSigmaFails",
                    "type": "TestCaseFunction",
                    "lineno": 524
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalCDF",
                    "type": "TestCaseFunction",
                    "lineno": 171
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropy",
                    "type": "TestCaseFunction",
                    "lineno": 315
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropyWithScalarInputs",
                    "type": "TestCaseFunction",
                    "lineno": 291
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalFullyReparameterized",
                    "type": "TestCaseFunction",
                    "lineno": 471
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogCDF",
                    "type": "TestCaseFunction",
                    "lineno": 218
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDF",
                    "type": "TestCaseFunction",
                    "lineno": 94
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDFMultidimensional",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 266
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalMeanAndMode",
                    "type": "TestCaseFunction",
                    "lineno": 337
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalNormalKL",
                    "type": "TestCaseFunction",
                    "lineno": 564
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalQuantile",
                    "type": "TestCaseFunction",
                    "lineno": 353
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSample",
                    "type": "TestCaseFunction",
                    "lineno": 435
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSampleMultiDimensional",
                    "type": "TestCaseFunction",
                    "lineno": 486
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShape",
                    "type": "TestCaseFunction",
                    "lineno": 531
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShapeWithPlaceholders",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalStandardDeviation",
                    "type": "TestCaseFunction",
                    "lineno": 422
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 194
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalVariance",
                    "type": "TestCaseFunction",
                    "lineno": 409
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalWithSoftplusScale",
                    "type": "TestCaseFunction",
                    "lineno": 85
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamShapes",
                    "type": "TestCaseFunction",
                    "lineno": 72
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamStaticShapes",
                    "type": "TestCaseFunction",
                    "lineno": 78
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 403
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 406
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testSampleLikeArgsGetDistDType",
                    "type": "TestCaseFunction",
                    "lineno": 61
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_once",
                    "type": "TestCaseFunction",
                    "lineno": 84
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_repeated",
                    "type": "TestCaseFunction",
                    "lineno": 1727
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizes",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithDynamicallyShapedWeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithScalarWeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithStaticShapedWeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMetricsCollection",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdates",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdatesWithWeightedValues",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndLabelsOfDifferentSizeRaisesValueError",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndWeightsOfDifferentSizeRaisesValueError",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testUpdatesCollection",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testVars",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 159
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasicCallableParams",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testMinimizeSparseResourceVariable",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testResourceBasic",
                    "type": "TestCaseFunction",
                    "lineno": 163
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::testPositiveDeltaUint8",
                    "type": "TestCaseFunction",
                    "lineno": 55
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphGradientVariable",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphModeWithGradients",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllPybind11DTypeConvertibleToDType",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConstructible",
                    "type": "TestCaseFunction",
                    "lineno": 42
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToDType",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToNumpyDtype",
                    "type": "TestCaseFunction",
                    "lineno": 59
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeInvalidArgument",
                    "type": "TestCaseFunction",
                    "lineno": 558
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeReturnsInternedVersion",
                    "type": "TestCaseFunction",
                    "lineno": 562
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization0",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization1",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization10",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization11",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization12",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization13",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization14",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization15",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization16",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization17",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization18",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization19",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization2",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization20",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization3",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization4",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization5",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization6",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization7",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization8",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization9",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSubtypes",
                    "type": "TestCaseFunction",
                    "lineno": 570
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSupertypes",
                    "type": "TestCaseFunction",
                    "lineno": 575
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypesHaveUniqueNames",
                    "type": "TestCaseFunction",
                    "lineno": 354
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testEqWithNonTFTypes",
                    "type": "TestCaseFunction",
                    "lineno": 521
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testInvalid",
                    "type": "TestCaseFunction",
                    "lineno": 94
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsComplex",
                    "type": "TestCaseFunction",
                    "lineno": 405
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsFloating",
                    "type": "TestCaseFunction",
                    "lineno": 385
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsInteger",
                    "type": "TestCaseFunction",
                    "lineno": 365
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsUnsigned",
                    "type": "TestCaseFunction",
                    "lineno": 425
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testLimitsUndefinedError",
                    "type": "TestCaseFunction",
                    "lineno": 505
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testMinMax",
                    "type": "TestCaseFunction",
                    "lineno": 445
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testNumpyConversion",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonLongConversion",
                    "type": "TestCaseFunction",
                    "lineno": 525
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonTypesConversion",
                    "type": "TestCaseFunction",
                    "lineno": 532
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRealDtype",
                    "type": "TestCaseFunction",
                    "lineno": 186
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testReduce",
                    "type": "TestCaseFunction",
                    "lineno": 544
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRepr",
                    "type": "TestCaseFunction",
                    "lineno": 509
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testStringConversion",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_noop_when_both_identical",
                    "type": "TestCaseFunction",
                    "lineno": 43
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_CanSetUnknownShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_MergesShapes",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenDimIncompatible",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenRankIncompatible",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_both_empty",
                    "type": "TestCaseFunction",
                    "lineno": 88
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less",
                    "type": "TestCaseFunction",
                    "lineno": 51
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less_and_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 63
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_equal",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_greater",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_less_but_non_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 75
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_returns_none_with_eager",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_static_check_in_graph_mode",
                    "type": "TestCaseFunction",
                    "lineno": 110
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_both_empty",
                    "type": "TestCaseFunction",
                    "lineno": 184
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_equal",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal",
                    "type": "TestCaseFunction",
                    "lineno": 144
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal_and_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_greater",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_less_equal_but_non_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 168
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_static_check_in_graph_mode",
                    "type": "TestCaseFunction",
                    "lineno": 197
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBfloat16",
                    "type": "TestCaseFunction",
                    "lineno": 93
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testCastToTypeOfVariable",
                    "type": "TestCaseFunction",
                    "lineno": 161
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testGradients",
                    "type": "TestCaseFunction",
                    "lineno": 172
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testInfNan",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testIntToFloatBoundary",
                    "type": "TestCaseFunction",
                    "lineno": 121
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testNotImplemented",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRandom",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRefDtype",
                    "type": "TestCaseFunction",
                    "lineno": 191
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testSmallValues",
                    "type": "TestCaseFunction",
                    "lineno": 84
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::testCast",
                    "type": "TestCaseFunction",
                    "lineno": 204
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::testClip",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput0",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput01",
                    "type": "TestCaseFunction",
                    "lineno": 77
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_concat",
                    "type": "TestCaseFunction",
                    "lineno": 1727
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number0",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number1",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number10",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number11",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number12",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number13",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number14",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number15",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number16",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number17",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number18",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number19",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number2",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number20",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number3",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number4",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number5",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number6",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number7",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number8",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number9",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_grad_error",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_pfor",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_xla",
                    "type": "TestCaseFunction",
                    "lineno": 50
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeInvalidOutputShape",
                    "type": "TestCaseFunction",
                    "lineno": 317
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSame",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeShapeInference",
                    "type": "TestCaseFunction",
                    "lineno": 303
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSingleStride",
                    "type": "TestCaseFunction",
                    "lineno": 22
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeValid",
                    "type": "TestCaseFunction",
                    "lineno": 105
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D1x1x1Filter",
                    "type": "TestCaseFunction",
                    "lineno": 268
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2Filter",
                    "type": "TestCaseFunction",
                    "lineno": 296
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2",
                    "type": "TestCaseFunction",
                    "lineno": 332
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2Same",
                    "type": "TestCaseFunction",
                    "lineno": 359
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DExpandedBatch",
                    "type": "TestCaseFunction",
                    "lineno": 204
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStride3",
                    "type": "TestCaseFunction",
                    "lineno": 343
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStrides",
                    "type": "TestCaseFunction",
                    "lineno": 311
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionClass3DExpandedBatch",
                    "type": "TestCaseFunction",
                    "lineno": 226
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionWith2SpatialDimensionsAndExpandedBatch",
                    "type": "TestCaseFunction",
                    "lineno": 252
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientKernelSizeMatchesInputSize",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOneFastPath",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientKernelSizeMatchesInputSize",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingDifferentStrides",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOneFastPath",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSizeMatchesInputSize",
                    "type": "TestCaseFunction",
                    "lineno": 444
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSmallerThanStride",
                    "type": "TestCaseFunction",
                    "lineno": 401
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testZeroSizedFilterThrowsIllegalArgument",
                    "type": "TestCaseFunction",
                    "lineno": 452
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::testToTensor",
                    "type": "TestCaseFunction",
                    "lineno": 69
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToInvalidTensorType",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToLongLongTensorType",
                    "type": "TestCaseFunction",
                    "lineno": 185
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorEager",
                    "type": "TestCaseFunction",
                    "lineno": 99
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorFromInvalidTensor",
                    "type": "TestCaseFunction",
                    "lineno": 196
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedArray",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedMix",
                    "type": "TestCaseFunction",
                    "lineno": 142
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTensors",
                    "type": "TestCaseFunction",
                    "lineno": 124
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTuple",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorPreferred",
                    "type": "TestCaseFunction",
                    "lineno": 152
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorProtocol",
                    "type": "TestCaseFunction",
                    "lineno": 202
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testNoConvert",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::testCumProdAndSum",
                    "type": "TestCaseFunction",
                    "lineno": 55
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testBool",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testComplex",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testFloat",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testHalfInt",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testInt",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testLargeInt",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::testDiagFlat",
                    "type": "TestCaseFunction",
                    "lineno": 145
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxGRY",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxHalf",
                    "type": "TestCaseFunction",
                    "lineno": 133
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCycling",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCyclingWithColors",
                    "type": "TestCaseFunction",
                    "lineno": 126
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCycling",
                    "type": "TestCaseFunction",
                    "lineno": 104
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCyclingWithColors",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testCreate",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseDefaultGraph",
                    "type": "TestCaseFunction",
                    "lineno": 96
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseExistingGraph",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesDeviceAssignment",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNames",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesNoDebias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScope",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScopeNoDebias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesWithControlDeps",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testBasicEager",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testCopyXlaSharding",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testImportedGraphVariablesToRestore",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNames",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNamesEager",
                    "type": "TestCaseFunction",
                    "lineno": 449
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::testArrayFill",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testDictInputs",
                    "type": "TestCaseFunction",
                    "lineno": 67
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_emptyinput",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_nonlistinput",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testLargeNInputs",
                    "type": "TestCaseFunction",
                    "lineno": 37
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testNonRectangularInputs",
                    "type": "TestCaseFunction",
                    "lineno": 55
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testTupleInputs",
                    "type": "TestCaseFunction",
                    "lineno": 43
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testUintInputs",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testDictionary",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testInvalidIndex",
                    "type": "TestCaseFunction",
                    "lineno": 108
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testMultipleElements",
                    "type": "TestCaseFunction",
                    "lineno": 138
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testName",
                    "type": "TestCaseFunction",
                    "lineno": 180
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testNumpy",
                    "type": "TestCaseFunction",
                    "lineno": 164
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testOneDimensionalArray",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testTwoDimensionalArray",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testCPUGPUMatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testDistinct",
                    "type": "TestCaseFunction",
                    "lineno": 136
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testEmptySamplingNoError",
                    "type": "TestCaseFunction",
                    "lineno": 57
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNoCSE",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallShape",
                    "type": "TestCaseFunction",
                    "lineno": 127
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallishShape",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNpDtypes",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testPositive",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSeed",
                    "type": "TestCaseFunction",
                    "lineno": 160
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSizeTooLarge",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collection",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_generator",
                    "type": "TestCaseFunction",
                    "lineno": 206
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_list",
                    "type": "TestCaseFunction",
                    "lineno": 178
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_set",
                    "type": "TestCaseFunction",
                    "lineno": 225
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_string",
                    "type": "TestCaseFunction",
                    "lineno": 240
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_tuple",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_uniquify",
                    "type": "TestCaseFunction",
                    "lineno": 168
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_default_graph",
                    "type": "TestCaseFunction",
                    "lineno": 249
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_get_collections",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_create_global_step",
                    "type": "TestCaseFunction",
                    "lineno": 67
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_global_step",
                    "type": "TestCaseFunction",
                    "lineno": 82
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_or_create_global_step",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_dtype",
                    "type": "TestCaseFunction",
                    "lineno": 31
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_shape",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testPerReplicaBatchSize",
                    "type": "TestCaseFunction",
                    "lineno": 32
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testProperties",
                    "type": "TestCaseFunction",
                    "lineno": 25
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testStr",
                    "type": "TestCaseFunction",
                    "lineno": 43
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testAddShape",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testScalarShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testShape",
                    "type": "TestCaseFunction",
                    "lineno": 69
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownDim",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignDifferentShapesAllowed",
                    "type": "TestCaseFunction",
                    "lineno": 143
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignments",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitialization",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializationOrder",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializerFunction",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testLoad",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testNoRefDataRace",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testOperators",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testResourceAssignments",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testSession",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testUseVariableAsTensor",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testZeroSizeVarSameAsConst",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::testAssertVariablesInitialized",
                    "type": "TestCaseFunction",
                    "lineno": 366
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testPartitionedVariableAssignments",
                    "type": "TestCaseFunction",
                    "lineno": 414
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testVariables",
                    "type": "TestCaseFunction",
                    "lineno": 399
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random0",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random1",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random10",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random11",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random12",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random13",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random14",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random15",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random16",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random17",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random18",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random19",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random2",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random20",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random21",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random22",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random23",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random24",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random25",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random26",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random27",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random28",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random29",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random3",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random30",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random31",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random32",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random33",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random34",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random35",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random36",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random37",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random38",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random39",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random4",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random40",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random41",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random42",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random43",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random44",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random45",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random46",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random47",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random48",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random49",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random5",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random50",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random51",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random52",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random53",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random54",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random55",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random56",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random57",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random58",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random59",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random6",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random60",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random61",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random62",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random63",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random64",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random65",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random66",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random67",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random68",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random69",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random7",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random70",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random71",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random72",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random73",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random74",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random75",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random76",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random77",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random78",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random79",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random8",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random9",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA0",
                    "type": "TestCaseFunction",
                    "lineno": 75
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA1",
                    "type": "TestCaseFunction",
                    "lineno": 75
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues0",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues1",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_difference_multirow_2d",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d_invalid_indices",
                    "type": "TestCaseFunction",
                    "lineno": 91
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_size_2d",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::testIsVariableInitialized",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testFSPath",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testGetAllVariables",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::testLaplaceLogSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::testMapStructureUpTo",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_numpy_arguments",
                    "type": "TestCaseFunction",
                    "lineno": 31
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateful",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateless",
                    "type": "TestCaseFunction",
                    "lineno": 43
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::testParamShapes",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_hash_bucket",
                    "type": "TestCaseFunction",
                    "lineno": 37
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_identity",
                    "type": "TestCaseFunction",
                    "lineno": 32
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_file",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_list",
                    "type": "TestCaseFunction",
                    "lineno": 42
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder0",
                    "type": "TestCaseFunction",
                    "lineno": 208
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder1",
                    "type": "TestCaseFunction",
                    "lineno": 208
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder2",
                    "type": "TestCaseFunction",
                    "lineno": 208
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_multiple_prints",
                    "type": "TestCaseFunction",
                    "lineno": 85
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_tf_print",
                    "type": "TestCaseFunction",
                    "lineno": 95
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 41
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testExceptionsCaptured",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testGracePeriod",
                    "type": "TestCaseFunction",
                    "lineno": 182
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testIgnoreMultiStarts",
                    "type": "TestCaseFunction",
                    "lineno": 220
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testMultipleSessions",
                    "type": "TestCaseFunction",
                    "lineno": 202
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testName",
                    "type": "TestCaseFunction",
                    "lineno": 269
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testQueueRunnerSerializationRoundTrip",
                    "type": "TestCaseFunction",
                    "lineno": 358
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRealDequeueEnqueue",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRequestStopOnException",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRespectCoordShouldStop",
                    "type": "TestCaseFunction",
                    "lineno": 140
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunners",
                    "type": "TestCaseFunction",
                    "lineno": 281
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersIgnoresMonitoredSession",
                    "type": "TestCaseFunction",
                    "lineno": 318
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersNonDefaultGraph",
                    "type": "TestCaseFunction",
                    "lineno": 335
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersRaisesIfNotASession",
                    "type": "TestCaseFunction",
                    "lineno": 302
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testThreads",
                    "type": "TestCaseFunction",
                    "lineno": 239
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testTwoOps",
                    "type": "TestCaseFunction",
                    "lineno": 64
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_bfloat16",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_float8_e4m3b11",
                    "type": "TestCaseFunction",
                    "lineno": 46
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 23
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testDType",
                    "type": "TestCaseFunction",
                    "lineno": 78
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 50
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testLimitOnly",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testMixedDType",
                    "type": "TestCaseFunction",
                    "lineno": 160
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNegativeDelta",
                    "type": "TestCaseFunction",
                    "lineno": 70
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNonInteger",
                    "type": "TestCaseFunction",
                    "lineno": 54
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testEmitDifferentStructureThanCellOutput",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopState",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopStateWithTensorArray",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNN",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNScope",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNZeroLength",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testInputOnGPUCellNotDeclared",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnCPU",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnGPU",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::testReduceLogSumExp",
                    "type": "TestCaseFunction",
                    "lineno": 29
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testNegAxes",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testSimple",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testZeros",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 443
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testComplex64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testDegenerate",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInfinity",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInt32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt16",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt8",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint16",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint8",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testUint8",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testComplex64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInfinity",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInt32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testSingleton",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 650
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testComplex64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testDegenerate",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testGradientWithZeros",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInfinity",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 767
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testDoubleReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 796
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testFloatReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 782
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient2",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient3",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient4",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testSpecialValues",
                    "type": "TestCaseFunction",
                    "lineno": 774
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 884
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testDoubleReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 927
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testFloatReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 913
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient2",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient3",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient4",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testInt64Reduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 899
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testSpecialValues",
                    "type": "TestCaseFunction",
                    "lineno": 891
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAll3D",
                    "type": "TestCaseFunction",
                    "lineno": 1025
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 1017
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 1039
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAll3D",
                    "type": "TestCaseFunction",
                    "lineno": 1074
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 1066
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 1088
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testBoolReduce1D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testDegenerate",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testExpand",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce1D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce4D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce",
                    "type": "TestCaseFunction",
                    "lineno": 1168
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce1D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce2D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testBoolBasic",
                    "type": "TestCaseFunction",
                    "lineno": 79
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testComplex64Basic",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testDoubleBasic",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testErrors",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatBasic",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 153
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeGradThreeDimensions",
                    "type": "TestCaseFunction",
                    "lineno": 137
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeThreeDimensions",
                    "type": "TestCaseFunction",
                    "lineno": 106
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimBegin",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimEnd",
                    "type": "TestCaseFunction",
                    "lineno": 118
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimOnly",
                    "type": "TestCaseFunction",
                    "lineno": 110
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt32Basic",
                    "type": "TestCaseFunction",
                    "lineno": 94
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt64Shape",
                    "type": "TestCaseFunction",
                    "lineno": 250
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testPartialShapes",
                    "type": "TestCaseFunction",
                    "lineno": 179
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testTensorShape",
                    "type": "TestCaseFunction",
                    "lineno": 235
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimBasic",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR1",
                    "type": "TestCaseFunction",
                    "lineno": 126
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR3",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimWithUnspecifiedDim",
                    "type": "TestCaseFunction",
                    "lineno": 162
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::testSerializeRestore",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testAutoConvertAndCheckData",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildCostModel",
                    "type": "TestCaseFunction",
                    "lineno": 1812
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDirect",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDist",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultGraph",
                    "type": "TestCaseFunction",
                    "lineno": 1200
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultServerTimeout",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDuplicatedInputs",
                    "type": "TestCaseFunction",
                    "lineno": 1496
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testErrorsReported",
                    "type": "TestCaseFunction",
                    "lineno": 123
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithGroupBy",
                    "type": "TestCaseFunction",
                    "lineno": 1175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatefulOperations",
                    "type": "TestCaseFunction",
                    "lineno": 1147
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatelessOperations",
                    "type": "TestCaseFunction",
                    "lineno": 1127
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedAndFetch",
                    "type": "TestCaseFunction",
                    "lineno": 1509
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedDictKeyException",
                    "type": "TestCaseFunction",
                    "lineno": 1788
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedError",
                    "type": "TestCaseFunction",
                    "lineno": 1598
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlices",
                    "type": "TestCaseFunction",
                    "lineno": 988
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlicesWithoutDenseShape",
                    "type": "TestCaseFunction",
                    "lineno": 1086
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedPrecisionLossError",
                    "type": "TestCaseFunction",
                    "lineno": 1611
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedShapeCompatibility",
                    "type": "TestCaseFunction",
                    "lineno": 1795
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholder",
                    "type": "TestCaseFunction",
                    "lineno": 823
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderConstantShape",
                    "type": "TestCaseFunction",
                    "lineno": 912
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderPartialShape",
                    "type": "TestCaseFunction",
                    "lineno": 867
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparseTensor",
                    "type": "TestCaseFunction",
                    "lineno": 757
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchAttrs",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchByNameDifferentStringTypes",
                    "type": "TestCaseFunction",
                    "lineno": 1663
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchDict",
                    "type": "TestCaseFunction",
                    "lineno": 241
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlices",
                    "type": "TestCaseFunction",
                    "lineno": 937
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlicesWithoutDenseShape",
                    "type": "TestCaseFunction",
                    "lineno": 1036
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchList",
                    "type": "TestCaseFunction",
                    "lineno": 181
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNamedTuple",
                    "type": "TestCaseFunction",
                    "lineno": 217
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestedAttrs",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingEmptyOneLevel",
                    "type": "TestCaseFunction",
                    "lineno": 360
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingOneLevel",
                    "type": "TestCaseFunction",
                    "lineno": 391
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNone",
                    "type": "TestCaseFunction",
                    "lineno": 132
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOperationObject",
                    "type": "TestCaseFunction",
                    "lineno": 643
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOrderedDict",
                    "type": "TestCaseFunction",
                    "lineno": 256
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchScalar",
                    "type": "TestCaseFunction",
                    "lineno": 603
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingleton",
                    "type": "TestCaseFunction",
                    "lineno": 145
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingletonByName",
                    "type": "TestCaseFunction",
                    "lineno": 166
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSparseTensor",
                    "type": "TestCaseFunction",
                    "lineno": 658
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTensorObject",
                    "type": "TestCaseFunction",
                    "lineno": 552
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTuple",
                    "type": "TestCaseFunction",
                    "lineno": 200
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testIncorrectGraph",
                    "type": "TestCaseFunction",
                    "lineno": 1760
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testLocalMasterSessionTimeout",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMakeCallableOnOperationWithRunOptions",
                    "type": "TestCaseFunction",
                    "lineno": 1574
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMultipleInteractiveSessionsWarning",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDirect",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDistributed",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRegisterFetchAndFeedConversionFunctions",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRunFeedDict",
                    "type": "TestCaseFunction",
                    "lineno": 1338
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testSessionInterOpThreadPool",
                    "type": "TestCaseFunction",
                    "lineno": 84
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testStringFeed",
                    "type": "TestCaseFunction",
                    "lineno": 1629
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testTimeoutWithShortOperations",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterClose",
                    "type": "TestCaseFunction",
                    "lineno": 1372
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterCloseConcurrent",
                    "type": "TestCaseFunction",
                    "lineno": 1381
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseEmptyGraph",
                    "type": "TestCaseFunction",
                    "lineno": 1401
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testDtypes",
                    "type": "TestCaseFunction",
                    "lineno": 101
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testExceptions",
                    "type": "TestCaseFunction",
                    "lineno": 41
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalDtypeWithoutMaxlen",
                    "type": "TestCaseFunction",
                    "lineno": 57
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithMaxlen",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithoutMaxlen",
                    "type": "TestCaseFunction",
                    "lineno": 68
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOutputDtype",
                    "type": "TestCaseFunction",
                    "lineno": 121
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testTwoDimensional",
                    "type": "TestCaseFunction",
                    "lineno": 78
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGrad",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGradWithNoShapeInformation",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShapeAtEval",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangular",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangularBatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquare",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquareBatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards2",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIteratorEndsBeforeFirstElem",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testLargerWorkerPool",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testName",
                    "type": "TestCaseFunction",
                    "lineno": 110
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNestedData",
                    "type": "TestCaseFunction",
                    "lineno": 27
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNumShardsLargerThanDataset",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testOffsetZero",
                    "type": "TestCaseFunction",
                    "lineno": 38
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testSimpleCase",
                    "type": "TestCaseFunction",
                    "lineno": 16
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testEmptyDataset",
                    "type": "TestCaseFunction",
                    "lineno": 163
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_3",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_4",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexGreaterThanNumElements",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexLessThanNumElements",
                    "type": "TestCaseFunction",
                    "lineno": 180
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsGreaterThanNumElementsIndexLess",
                    "type": "TestCaseFunction",
                    "lineno": 197
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne",
                    "type": "TestCaseFunction",
                    "lineno": 94
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone",
                    "type": "TestCaseFunction",
                    "lineno": 85
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds",
                    "type": "TestCaseFunction",
                    "lineno": 78
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 111
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs",
                    "type": "TestCaseFunction",
                    "lineno": 103
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize",
                    "type": "TestCaseFunction",
                    "lineno": 120
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling",
                    "type": "TestCaseFunction",
                    "lineno": 63
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds",
                    "type": "TestCaseFunction",
                    "lineno": 72
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize",
                    "type": "TestCaseFunction",
                    "lineno": 134
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::testSimpleSave",
                    "type": "TestCaseFunction",
                    "lineno": 36
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testEval",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testFalse",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg1",
                    "type": "TestCaseFunction",
                    "lineno": 102
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg2",
                    "type": "TestCaseFunction",
                    "lineno": 110
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testPlaceholderWithDefault",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testTrue",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testUnknown",
                    "type": "TestCaseFunction",
                    "lineno": 61
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::testSmallInput2x2Pad1x0",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testDirect",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimOneRemainingDim",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimZeroRemainingDims",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsOneRemainingDim",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsTwoRemainingDims",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsZeroRemainingDims",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::testSpaceToDepthTranspose",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSize0",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeLarger",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleBoth",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleHeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleWidth",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testInputWrongDimMissingBatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testUnknownShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall2",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmallPad1x1",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test0",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test1",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test2",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test3",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testNormalSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testSampleLikeArgsGetDistDType",
                    "type": "TestCaseFunction",
                    "lineno": 58
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testDeterminism",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testEmptyBatches",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testExecuteMultipleWithoutError",
                    "type": "TestCaseFunction",
                    "lineno": 112
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testThrowDeterminismError",
                    "type": "TestCaseFunction",
                    "lineno": 60
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithForwarding",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithStrings",
                    "type": "TestCaseFunction",
                    "lineno": 138
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSub",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSubGradients",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateMinMax",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices1D",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices2D",
                    "type": "TestCaseFunction",
                    "lineno": 173
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testDeterminism",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithForwarding",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithStrings",
                    "type": "TestCaseFunction",
                    "lineno": 138
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSub",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSubGradients",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateMinMax",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices1D",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices2D",
                    "type": "TestCaseFunction",
                    "lineno": 173
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::testInt32Basic",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::testConvertSingleVariable",
                    "type": "TestCaseFunction",
                    "lineno": 169
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_non_singular",
                    "type": "TestCaseFunction",
                    "lineno": 87
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_positive_definite",
                    "type": "TestCaseFunction",
                    "lineno": 82
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_self_adjoint",
                    "type": "TestCaseFunction",
                    "lineno": 92
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_is_x_flags",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 151
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 123
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 143
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 115
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_batch_shape_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_num_rows_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 103
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 127
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 97
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_ref_type_shape_args_raises",
                    "type": "TestCaseFunction",
                    "lineno": 193
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 165
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 159
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_zeros_matmul",
                    "type": "TestCaseFunction",
                    "lineno": 182
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/__init__.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py",
                    "type": "Module"
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_stops_training_in_after_save",
            "lineno": 211,
            "outcome": "passed",
            "setup": {
                "duration": 3.745296090011834,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.39910698401217815,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_listener_stops_training_in_after_save>\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Co",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/training/training_util.py:396: Variable.initialized_value (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse Variable.read_value. Variables in 2.X are initialized automatically both in eager and graph (inside tf.defun) contexts.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/training/training_util.py:396: Variable.initialized_value (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse Variable.read_value. Variables in 2.X are initialized automatically both in eager and graph (inside tf.defun) contexts.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008713.6798341,
                        "msecs": 679.0,
                        "relativeCreated": 10933.354616165161,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0026818950136657804,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_default_saver",
            "lineno": 235,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004640539991669357,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.31455480799195357,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_listener_with_default_saver>\nnst): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localho",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/training/saver.py:1173: get_checkpoint_mtimes (from tensorflow.python.checkpoint.checkpoint_management) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse standard file utilities to get mtimes.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/training/saver.py:1173: get_checkpoint_mtimes (from tensorflow.python.checkpoint.checkpoint_management) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse standard file utilities to get mtimes.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008714.3616447,
                        "msecs": 361.0,
                        "relativeCreated": 11615.16523361206,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0023568199976580217,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_monitored_session",
            "lineno": 179,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004934050084557384,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21094253699993715,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_listener_with_monitored_session>\nst/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localh"
            },
            "teardown": {
                "duration": 0.0024672209983691573,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_both_secs_and_steps",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005135400133440271,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013000150007428601,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raise_in_both_secs_and_steps>\n"
            },
            "teardown": {
                "duration": 0.0016116030019475147,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_none_secs_and_steps",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004514519969234243,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012290263999602757,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raise_in_none_secs_and_steps>\n"
            },
            "teardown": {
                "duration": 0.0017592079966561869,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_when_saver_and_scaffold_both_present",
            "lineno": 117,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042579798900987953,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011963607001234777,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raise_when_saver_and_scaffold_both_present>\n"
            },
            "teardown": {
                "duration": 0.0014110810006968677,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_checkpoint_before_first_train_step",
            "lineno": 484,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003871889930451289,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15432311499898788,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_checkpoint_before_first_train_step>\nost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/str"
            },
            "teardown": {
                "duration": 0.0022469749965239316,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def",
            "lineno": 513,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005039310053689405,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16363753900805023,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_graph_def>\nided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices:"
            },
            "teardown": {
                "duration": 0.0023079929960658774,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def_false",
            "lineno": 539,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004972729948349297,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12370296299923211,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_graph_def_false>\n (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:"
            },
            "teardown": {
                "duration": 0.002078681005514227,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_saves_at_end",
            "lineno": 464,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004916600009892136,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13627548101067077,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_saves_at_end>\n0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/rep"
            },
            "teardown": {
                "duration": 0.0024365970020880923,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_at_begin_and_end",
            "lineno": 151,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004986920102965087,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12797003700688947,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_secs_calls_listeners_at_begin_and_end>\nlica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/re"
            },
            "teardown": {
                "duration": 0.0024678460031282157,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_periodically",
            "lineno": 360,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004638440004782751,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1654824470024323,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_secs_calls_listeners_periodically>\nplica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_s"
            },
            "teardown": {
                "duration": 0.0029866569966543466,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_in_first_step",
            "lineno": 133,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005612649983959273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13146485199104063,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_secs_saves_in_first_step>\nlice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Cons"
            },
            "teardown": {
                "duration": 0.0028565130050992593,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_periodically",
            "lineno": 312,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005466609873110428,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1579469950083876,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_secs_saves_periodically>\nt): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task"
            },
            "teardown": {
                "duration": 0.0024326710117748007,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_in_first_step",
            "lineno": 411,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005264450010145083,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14620044799812604,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_steps_saves_in_first_step>\n:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0"
            },
            "teardown": {
                "duration": 0.0022994769969955087,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_periodically",
            "lineno": 429,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004989350127289072,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1509922609984642,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_steps_saves_periodically>\n/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:"
            },
            "teardown": {
                "duration": 0.002471430998411961,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_saves_when_saver_and_scaffold_both_missing",
            "lineno": 99,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006258859939407557,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12217116900137626,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_saves_when_saver_and_scaffold_both_missing>\n0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2"
            },
            "teardown": {
                "duration": 0.0022802829917054623,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005634799890685827,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013211708006565459,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/contextlib.py:103: TensorFlowTestCase.test_session (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `self.session()` or `self.cached_session()` instead.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/contextlib.py:103: TensorFlowTestCase.test_session (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `self.session()` or `self.cached_session()` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008716.2925875,
                        "msecs": 292.0,
                        "relativeCreated": 13546.10800743103,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0016423680062871426,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_two_listeners_with_default_saver",
            "lineno": 272,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004765229969052598,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3403970610088436,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_two_listeners_with_default_saver>\n/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0"
            },
            "teardown": {
                "duration": 0.0024608629901194945,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0009170480043394491,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005241460021352395,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0018618010071804747,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_False",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045541800500359386,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005123566996189766,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_int32_False>\n"
            },
            "teardown": {
                "duration": 0.0017996329988818616,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_True",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039875099901109934,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009082663003937341,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_int32_True>\n"
            },
            "teardown": {
                "duration": 0.0018079779983963817,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_False",
            "lineno": 125,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003493270050967112,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007924006000394002,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_int64_False>\n"
            },
            "teardown": {
                "duration": 0.0019018460006918758,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_True",
            "lineno": 125,
            "outcome": "passed",
            "setup": {
                "duration": 0.000387144013075158,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0037047520017949864,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_int64_True>\n"
            },
            "teardown": {
                "duration": 0.0015814390062587336,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_False",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043487700168043375,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006046528986189514,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_multiple_tables_False>\n"
            },
            "teardown": {
                "duration": 0.0018362170085310936,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_True",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003635270113591105,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005452737997984514,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_multiple_tables_True>\n"
            },
            "teardown": {
                "duration": 0.0017817890038713813,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003637779882410541,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039241999911610037,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001423431996954605,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_False",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040521299524698406,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004532164995907806,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_string_False>\n"
            },
            "teardown": {
                "duration": 0.001663386996369809,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_True",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003694199986057356,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004509824997512624,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_string_True>\n"
            },
            "teardown": {
                "duration": 0.0017887519934447482,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_illegal_args",
            "lineno": 106,
            "outcome": "passed",
            "setup": {
                "duration": 0.000606963993050158,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000474145999760367,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_illegal_args>\n"
            },
            "teardown": {
                "duration": 0.0018716850026976317,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_at_end_only",
            "lineno": 117,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048424399574287236,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019277476996649057,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_at_end_only>\n"
            },
            "teardown": {
                "duration": 0.001540406999993138,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs",
            "lineno": 238,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040725099097471684,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.031762885992066,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_every_n_secs>\n"
            },
            "teardown": {
                "duration": 0.001764341999660246,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs_and_end",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.000437044000136666,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03755217599973548,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_every_n_secs_and_end>\n"
            },
            "teardown": {
                "duration": 0.0018563500052550808,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps",
            "lineno": 175,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042336000478826463,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.047363054007291794,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_every_n_steps>\n"
            },
            "teardown": {
                "duration": 0.0015855520032346249,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps_and_end",
            "lineno": 181,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042066800233442336,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.053359306999482214,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_every_n_steps_and_end>\n"
            },
            "teardown": {
                "duration": 0.0020649680081987754,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_first_step",
            "lineno": 187,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004308729985496029,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015266429996700026,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_first_step>\n"
            },
            "teardown": {
                "duration": 0.001481646002503112,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_formatter",
            "lineno": 254,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041145099385175854,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015102691992069595,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_formatter>\n"
            },
            "teardown": {
                "duration": 0.0014723950007464737,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045416200009640306,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002659879974089563,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.0019488089892547578,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
            "lineno": 243,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007124330004444346,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.878766920999624,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFiniteGradientAtDifficultPoints>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:252: Normal.__init__ (from tensorflow.python.ops.distributions.normal) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.\nWARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/distributions/normal.py:149: Distribution.__init__ (from tensorflow.python.ops.distributions.distribution) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:252: Normal.__init__ (from tensorflow.python.ops.distributions.normal) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008716.9704242,
                        "msecs": 970.0,
                        "relativeCreated": 14223.944664001465,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/distributions/normal.py:149: Distribution.__init__ (from tensorflow.python.ops.distributions.distribution) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008716.9723964,
                        "msecs": 972.0,
                        "relativeCreated": 14225.916862487793,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.00242683500982821,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNegativeSigmaFails",
            "lineno": 524,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005027820006944239,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018015730995102786,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNegativeSigmaFails>\n"
            },
            "teardown": {
                "duration": 0.0025070020055864006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalCDF",
            "lineno": 171,
            "outcome": "passed",
            "setup": {
                "duration": 0.000455540997791104,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06123137100075837,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalCDF>\n"
            },
            "teardown": {
                "duration": 0.002126566003425978,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropy",
            "lineno": 315,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048757699551060796,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.042749326006742194,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalEntropy>\n"
            },
            "teardown": {
                "duration": 0.0019402519974391907,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropyWithScalarInputs",
            "lineno": 291,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043695799831766635,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.041653059000964276,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalEntropyWithScalarInputs>\n"
            },
            "teardown": {
                "duration": 0.001839213990024291,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalFullyReparameterized",
            "lineno": 471,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004633799981093034,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0207334339938825,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalFullyReparameterized>\n"
            },
            "teardown": {
                "duration": 0.0021384309948189184,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogCDF",
            "lineno": 218,
            "outcome": "passed",
            "setup": {
                "duration": 0.000407264000386931,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10717771798954345,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalLogCDF>\n"
            },
            "teardown": {
                "duration": 0.0022180169908097014,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDF",
            "lineno": 94,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004476019967114553,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08005101500020828,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalLogPDF>\n"
            },
            "teardown": {
                "duration": 0.002481941002770327,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDFMultidimensional",
            "lineno": 130,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005963610019534826,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1475047169951722,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalLogPDFMultidimensional>\n"
            },
            "teardown": {
                "duration": 0.0058277479984099045,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogSurvivalFunction",
            "lineno": 266,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007162770052673295,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19287895299203228,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalLogSurvivalFunction>\n"
            },
            "teardown": {
                "duration": 0.004441689001396298,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalMeanAndMode",
            "lineno": 337,
            "outcome": "passed",
            "setup": {
                "duration": 0.0012185469968244433,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.020526523992885,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalMeanAndMode>\n"
            },
            "teardown": {
                "duration": 0.004314064004574902,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalNormalKL",
            "lineno": 564,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009206510003423318,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07088988799660001,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalNormalKL>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:581: kl_divergence (from tensorflow.python.ops.distributions.kullback_leibler) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:581: kl_divergence (from tensorflow.python.ops.distributions.kullback_leibler) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008723.642642,
                        "msecs": 642.0,
                        "relativeCreated": 20896.162509918213,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.006023415000527166,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalQuantile",
            "lineno": 353,
            "outcome": "passed",
            "setup": {
                "duration": 0.000831730998470448,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3948624100012239,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalQuantile>\n"
            },
            "teardown": {
                "duration": 0.00556993400095962,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSample",
            "lineno": 435,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008028169977478683,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10151873699214775,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalSample>\n"
            },
            "teardown": {
                "duration": 0.006032737001078203,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSampleMultiDimensional",
            "lineno": 486,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009742239926708862,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11007282200444024,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalSampleMultiDimensional>\n"
            },
            "teardown": {
                "duration": 0.005106133001390845,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShape",
            "lineno": 531,
            "outcome": "passed",
            "setup": {
                "duration": 0.000914742995519191,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.040177183007472195,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalShape>\n"
            },
            "teardown": {
                "duration": 0.00445107500127051,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShapeWithPlaceholders",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.014444782995269634,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04222711600596085,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalShapeWithPlaceholders>\n"
            },
            "teardown": {
                "duration": 0.004877162995398976,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalStandardDeviation",
            "lineno": 422,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011548649927135557,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.051230375000159256,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalStandardDeviation>\n"
            },
            "teardown": {
                "duration": 0.005160686007002369,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSurvivalFunction",
            "lineno": 194,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010297419939888641,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.103166526008863,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalSurvivalFunction>\n"
            },
            "teardown": {
                "duration": 0.004887148999841884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalVariance",
            "lineno": 409,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010963660024572164,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.050663911999436095,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalVariance>\n"
            },
            "teardown": {
                "duration": 0.004936244004056789,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalWithSoftplusScale",
            "lineno": 85,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009968310041585937,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.1881284850096563,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalWithSoftplusScale>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:90: NormalWithSoftplusScale.__init__ (from tensorflow.python.ops.distributions.normal) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nUse `tfd.Normal(loc, tf.nn.softplus(scale)) instead.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:90: NormalWithSoftplusScale.__init__ (from tensorflow.python.ops.distributions.normal) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nUse `tfd.Normal(loc, tf.nn.softplus(scale)) instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008724.6983294,
                        "msecs": 698.0,
                        "relativeCreated": 21951.849937438965,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0033713269949657843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamShapes",
            "lineno": 72,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005076660017948598,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08037388000229839,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testParamShapes>\n"
            },
            "teardown": {
                "duration": 0.0033010650076903403,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamStaticShapes",
            "lineno": 78,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004991099995095283,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01305580500047654,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testParamStaticShapes>\n"
            },
            "teardown": {
                "duration": 0.002159583003958687,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat32",
            "lineno": 403,
            "outcome": "passed",
            "setup": {
                "duration": 0.000452924010460265,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6441234550002264,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testQuantileFiniteGradientAtDifficultPointsFloat32>\n"
            },
            "teardown": {
                "duration": 0.0032539149979129434,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat64",
            "lineno": 406,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006257720087887719,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6114463959966088,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testQuantileFiniteGradientAtDifficultPointsFloat64>\n"
            },
            "teardown": {
                "duration": 0.0024077160051092505,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testSampleLikeArgsGetDistDType",
            "lineno": 61,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046475599810946733,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.26566159700450953,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSampleLikeArgsGetDistDType>\n"
            },
            "teardown": {
                "duration": 0.002584368994575925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005335080059012398,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005529280024347827,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.0021374009957071394,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006820629932917655,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004612909979186952,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001884946002974175,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_once",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005458729865495116,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.8261336610012222,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_create_variable_once>\n"
            },
            "teardown": {
                "duration": 0.00297242499073036,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_repeated",
            "lineno": 1727,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005048390012234449,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05259273500996642,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_create_variable_repeated>\n"
            },
            "teardown": {
                "duration": 0.001952998005435802,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004584039998007938,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004478399932850152,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017140220006695017,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizes",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007493099983548746,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05419897900719661,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEffectivelyEquivalentSizes>\n"
            },
            "teardown": {
                "duration": 0.00192860999959521,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithDynamicallyShapedWeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004211350023979321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17361635199631564,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEffectivelyEquivalentSizesWithDynamicallyShapedWeight>\n"
            },
            "teardown": {
                "duration": 0.004469261999474838,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithScalarWeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007115790067473426,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05532897901139222,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEffectivelyEquivalentSizesWithScalarWeight>\n"
            },
            "teardown": {
                "duration": 0.0022083910007495433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithStaticShapedWeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004620369873009622,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05588575400179252,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEffectivelyEquivalentSizesWithStaticShapedWeight>\n"
            },
            "teardown": {
                "duration": 0.0018147230002796277,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMetricsCollection",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044298199645709246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01569433300755918,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMetricsCollection>\n"
            },
            "teardown": {
                "duration": 0.0020824800012633204,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdates",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041404399962630123,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09915213800559286,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleUpdates>\n"
            },
            "teardown": {
                "duration": 0.0021806060103699565,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdatesWithWeightedValues",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006329479947453365,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12164794901036657,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleUpdatesWithWeightedValues>\n"
            },
            "teardown": {
                "duration": 0.0025989209971157834,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndLabelsOfDifferentSizeRaisesValueError",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005465949943754822,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015995190042303875,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPredictionsAndLabelsOfDifferentSizeRaisesValueError>\n"
            },
            "teardown": {
                "duration": 0.001600652001798153,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndWeightsOfDifferentSizeRaisesValueError",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004227269964758307,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01094157800253015,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPredictionsAndWeightsOfDifferentSizeRaisesValueError>\n"
            },
            "teardown": {
                "duration": 0.0015847190079512075,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testUpdatesCollection",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041774200508370996,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01567217400588561,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdatesCollection>\n"
            },
            "teardown": {
                "duration": 0.0021865320013603196,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testVars",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000394203991163522,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015447718993527815,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testVars>\n"
            },
            "teardown": {
                "duration": 0.0015129319945117459,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004254100058460608,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002923909923993051,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.0022005240025464445,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasic",
            "lineno": 159,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006755130016244948,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1899779929954093,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic>\n"
            },
            "teardown": {
                "duration": 0.004662979990825988,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasicCallableParams",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005666039942298084,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17606684399652295,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasicCallableParams>\n"
            },
            "teardown": {
                "duration": 0.003282477002358064,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testMinimizeSparseResourceVariable",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005663240008288994,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2761071449931478,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMinimizeSparseResourceVariable>\n",
                "stderr": "2023-05-13 20:12:10.591267: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable/Adadelta_1/Assign' id:51 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable/Adadelta_1, Variable/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:10.675955: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_1/Adadelta_1/Assign' id:115 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_1/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_1/Adadelta_1, Variable_1/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0027265839889878407,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testResourceBasic",
            "lineno": 163,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005348350096028298,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.953789527004119,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testResourceBasic>\n",
                "stderr": "2023-05-13 20:12:10.874761: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_1/Adadelta_1/Assign' id:31 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_1/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_1/Adadelta_1, Variable_1/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:10.979885: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_3/Adadelta_1/Assign' id:75 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_3/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_3/Adadelta_1, Variable_3/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:11.085828: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_5/Adadelta_1/Assign' id:119 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_5/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_5/Adadelta_1, Variable_5/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:11.193704: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_7/Adadelta_1/Assign' id:163 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_7/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_7/Adadelta_1, Variable_7/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:11.313282: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_9/Adadelta_1/Assign' id:207 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_9/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_9/Adadelta_1, Variable_9/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:11.443023: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_11/Adadelta_1/Assign' id:251 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_11/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_11/Adadelta_1, Variable_11/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:11.583487: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_13/Adadelta_1/Assign' id:295 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_13/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_13/Adadelta_1, Variable_13/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:11.712938: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_15/Adadelta_1/Assign' id:339 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_15/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_15/Adadelta_1, Variable_15/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:11.848566: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_17/Adadelta_1/Assign' id:383 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_17/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_17/Adadelta_1, Variable_17/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:11.987802: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_19/Adadelta_1/Assign' id:427 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_19/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_19/Adadelta_1, Variable_19/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:12.132993: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_21/Adadelta_1/Assign' id:465 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_21/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_21/Adadelta_1, Variable_21/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:12.294776: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_23/Adadelta_1/Assign' id:503 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_23/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_23/Adadelta_1, Variable_23/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:12.468915: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_25/Adadelta_1/Assign' id:541 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_25/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_25/Adadelta_1, Variable_25/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:12.641006: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_27/Adadelta_1/Assign' id:579 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_27/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_27/Adadelta_1, Variable_27/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:12.845985: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_29/Adadelta_1/Assign' id:617 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_29/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_29/Adadelta_1, Variable_29/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:13.063805: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_31/Adadelta_1/Assign' id:655 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_31/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_31/Adadelta_1, Variable_31/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:12:13.289916: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_33/Adadelta_1/Assign' id:693 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_33/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_33/Adadelta_1, Variable_33/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0036175540008116513,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007744309987174347,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004785149940289557,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0020647880010074005,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::testPositiveDeltaUint8",
            "lineno": 55,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007644869911018759,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014432667012442835,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPositiveDeltaUint8>\n"
            },
            "teardown": {
                "duration": 0.0027858920075232163,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046628399286419153,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042558398854453117,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0020011209999211133,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphGradientVariable",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007245099986903369,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07590694401005749,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGraphGradientVariable>\n"
            },
            "teardown": {
                "duration": 0.002173122004023753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphModeWithGradients",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004935080069117248,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.056822825004928745,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGraphModeWithGradients>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/autograph/pyct/static_analysis/liveness.py:83: Analyzer.lamba_check (from tensorflow.python.autograph.pyct.static_analysis.liveness) is deprecated and will be removed after 2023-09-23.\nInstructions for updating:\nLambda fuctions will be no more assumed to be used in the statement where they are used, or at least in the same block. https://github.com/tensorflow/tensorflow/issues/56089\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/autograph/pyct/static_analysis/liveness.py:83: Analyzer.lamba_check (from tensorflow.python.autograph.pyct.static_analysis.liveness) is deprecated and will be removed after 2023-09-23.\nInstructions for updating:\nLambda fuctions will be no more assumed to be used in the statement where they are used, or at least in the same block. https://github.com/tensorflow/tensorflow/issues/56089",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008733.8235822,
                        "msecs": 823.0,
                        "relativeCreated": 31077.102661132812,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.002324800007045269,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004924840031890199,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005152819940121844,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001877869013696909,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllPybind11DTypeConvertibleToDType",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.000718016002792865,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011670060048345476,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAllPybind11DTypeConvertibleToDType>\n"
            },
            "teardown": {
                "duration": 0.0017043889965862036,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConstructible",
            "lineno": 42,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004400229954626411,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004907139955321327,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAllTypesConstructible>\n"
            },
            "teardown": {
                "duration": 0.0015360310062533244,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToDType",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003659469948615879,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007232019997900352,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAllTypesConvertibleToDType>\n"
            },
            "teardown": {
                "duration": 0.001963468996109441,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToNumpyDtype",
            "lineno": 59,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040173999150283635,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0013825009955326095,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAllTypesConvertibleToNumpyDtype>\n"
            },
            "teardown": {
                "duration": 0.0016667430027155206,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeInvalidArgument",
            "lineno": 558,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039262400241568685,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042803499673027545,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAsDtypeInvalidArgument>\n"
            },
            "teardown": {
                "duration": 0.0014181519945850596,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeReturnsInternedVersion",
            "lineno": 562,
            "outcome": "passed",
            "setup": {
                "duration": 0.000553853009478189,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005314879963407293,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAsDtypeReturnsInternedVersion>\n"
            },
            "teardown": {
                "duration": 0.0018419550033286214,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization0",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005234359996393323,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006618220068048686,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization0>\n"
            },
            "teardown": {
                "duration": 0.0019639600068330765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization1",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035341699549462646,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041990200406871736,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization1>\n"
            },
            "teardown": {
                "duration": 0.0015433670050697401,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization10",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038416500319726765,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004505660035647452,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization10>\n"
            },
            "teardown": {
                "duration": 0.0014901029935572296,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization11",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041911799053195864,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004969200090272352,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization11>\n"
            },
            "teardown": {
                "duration": 0.0015613209980074316,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization12",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003962199989473447,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004609800089383498,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization12>\n"
            },
            "teardown": {
                "duration": 0.002047654998023063,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization13",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004008690011687577,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042382099491078407,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization13>\n"
            },
            "teardown": {
                "duration": 0.001504999992903322,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization14",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041878198680933565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047014599840622395,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization14>\n"
            },
            "teardown": {
                "duration": 0.0017157429974758998,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization15",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039181800093501806,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004624279972631484,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization15>\n"
            },
            "teardown": {
                "duration": 0.0016214650095207617,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization16",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004498579946812242,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004948509886162356,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization16>\n"
            },
            "teardown": {
                "duration": 0.0020539120014291257,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization17",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039631000254303217,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004919689963571727,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization17>\n"
            },
            "teardown": {
                "duration": 0.001783689993317239,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization18",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045182301255408674,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000474860004032962,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization18>\n"
            },
            "teardown": {
                "duration": 0.0017306910012848675,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization19",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004316079866839573,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004585529968608171,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization19>\n"
            },
            "teardown": {
                "duration": 0.0016999299987219274,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization2",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004863190115429461,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005008540028939024,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization2>\n"
            },
            "teardown": {
                "duration": 0.0022559890057891607,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization20",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004087810084456578,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004614689969457686,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization20>\n"
            },
            "teardown": {
                "duration": 0.001657850996707566,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization3",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004682669969042763,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004960380028933287,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization3>\n"
            },
            "teardown": {
                "duration": 0.0016555020119994879,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization4",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042706400563474745,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005115969979669899,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization4>\n"
            },
            "teardown": {
                "duration": 0.0016909380065044388,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization5",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046533400018233806,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046468300570268184,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization5>\n"
            },
            "teardown": {
                "duration": 0.002227998003945686,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization6",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039580700104124844,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005073170032119378,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization6>\n"
            },
            "teardown": {
                "duration": 0.0017564060108270496,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization7",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005003410042263567,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005191899981582537,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization7>\n"
            },
            "teardown": {
                "duration": 0.001660652007558383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization8",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041596499795559794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004568920121528208,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization8>\n"
            },
            "teardown": {
                "duration": 0.0016398120060330257,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization9",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004351859970483929,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004640520055545494,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization9>\n"
            },
            "teardown": {
                "duration": 0.0021282439993228763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSubtypes",
            "lineno": 570,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004400320030981675,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000477344001410529,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSubtypes>\n"
            },
            "teardown": {
                "duration": 0.0016671040066285059,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSupertypes",
            "lineno": 575,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043938300223089755,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004426260129548609,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSupertypes>\n"
            },
            "teardown": {
                "duration": 0.0016901389899430797,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypesHaveUniqueNames",
            "lineno": 354,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004117969947401434,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005279659962980077,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypesHaveUniqueNames>\n"
            },
            "teardown": {
                "duration": 0.0018470200011506677,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testEqWithNonTFTypes",
            "lineno": 521,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004952730087097734,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004620039981091395,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEqWithNonTFTypes>\n"
            },
            "teardown": {
                "duration": 0.002111201989464462,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testInvalid",
            "lineno": 94,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043319100223015994,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006881229928694665,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInvalid>\n"
            },
            "teardown": {
                "duration": 0.001785583997843787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsComplex",
            "lineno": 405,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046083200140856206,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044523000542540103,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIsComplex>\n"
            },
            "teardown": {
                "duration": 0.0017771760030882433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsFloating",
            "lineno": 385,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044740700104739517,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004498409980442375,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIsFloating>\n"
            },
            "teardown": {
                "duration": 0.0016955859900917858,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsInteger",
            "lineno": 365,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046356499660760164,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046214899339247495,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIsInteger>\n"
            },
            "teardown": {
                "duration": 0.003296599999885075,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsUnsigned",
            "lineno": 425,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047078799980226904,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048593999235890806,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIsUnsigned>\n"
            },
            "teardown": {
                "duration": 0.002077408993500285,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testLimitsUndefinedError",
            "lineno": 505,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004409440007293597,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004726200131699443,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLimitsUndefinedError>\n"
            },
            "teardown": {
                "duration": 0.0016899990005185828,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testMinMax",
            "lineno": 445,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003978449967689812,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002385772007983178,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMinMax>\n<dtype: 'float32'>: -3.4028235e+38 - 3.4028235e+38\n<dtype: 'float64'>: -1.7976931348623157e+308 - 1.7976931348623157e+308\n<dtype: 'int32'>: -2147483648 - 2147483647\n<dtype: 'uint8'>: 0 - 255\n<dtype: 'int16'>: -32768 - 32767\n<dtype: 'int8'>: -128 - 127\n<dtype: 'int64'>: -9223372036854775808 - 9223372036854775807\n<dtype: 'bfloat16'>: -3.38953e+38 - 3.38953e+38\n<dtype: 'uint16'>: 0 - 65535\n<dtype: 'float16'>: -65500.0 - 65500.0\n<dtype: 'uint32'>: 0 - 4294967295\n<dtype: 'uint64'>: 0 - 18446744073709551615\n<dtype: 'float32_ref'>: -3.4028235e+38 - 3.4028235e+38\n<dtype: 'float64_ref'>: -1.7976931348623157e+308 - 1.7976931348623157e+308\n<dtype: 'int32_ref'>: -2147483648 - 2147483647\n<dtype: 'uint8_ref'>: 0 - 255\n<dtype: 'int16_ref'>: -32768 - 32767\n<dtype: 'int8_ref'>: -128 - 127\n<dtype: 'int64_ref'>: -9223372036854775808 - 9223372036854775807\n<dtype: 'bfloat16_ref'>: -3.38953e+38 - 3.38953e+38\n<dtype: 'uint16_ref'>: 0 - 65535\n<dtype: 'float16_ref'>: -65500.0 - 65500.0\n<dtype: 'uint32_ref'>: 0 - 4294967295\n<dtype: 'uint64_ref'>: 0 - 18446744073709551615\n"
            },
            "teardown": {
                "duration": 0.0018794150091707706,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testNumpyConversion",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.000411390996305272,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006293969927355647,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNumpyConversion>\n"
            },
            "teardown": {
                "duration": 0.0022346159967128187,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonLongConversion",
            "lineno": 525,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041755700658541173,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004718300042441115,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPythonLongConversion>\n"
            },
            "teardown": {
                "duration": 0.001652003003982827,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonTypesConversion",
            "lineno": 532,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003840510034933686,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038981599209364504,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPythonTypesConversion>\n"
            },
            "teardown": {
                "duration": 0.0017519029934192076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRealDtype",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046158701297827065,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038782699266448617,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRealDtype>\n"
            },
            "teardown": {
                "duration": 0.0016059329936979339,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testReduce",
            "lineno": 544,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041203699947800487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009685700060799718,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReduce>\n"
            },
            "teardown": {
                "duration": 0.0021223400108283386,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRepr",
            "lineno": 509,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004562050016829744,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004756410053232685,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRepr>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/as_dtype_test.py', 510, 'Skipped: b/142725777')"
            },
            "teardown": {
                "duration": 0.0015953990077832714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testStringConversion",
            "lineno": 195,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039462599670514464,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006149389955680817,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStringConversion>\n"
            },
            "teardown": {
                "duration": 0.0016208360029850155,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044625600276049227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037195999175310135,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.003218083002138883,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_noop_when_both_identical",
            "lineno": 43,
            "outcome": "passed",
            "setup": {
                "duration": 0.000677527001244016,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01187924099212978,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_noop_when_both_identical>\n"
            },
            "teardown": {
                "duration": 0.001747774993418716,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000439527997514233,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003745989961316809,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015975069982232526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048418500227853656,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0018783769919537008,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStaticShape>\n"
            },
            "teardown": {
                "duration": 0.0019170489977113903,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_CanSetUnknownShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040050600364338607,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004290225988370366,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStaticShape_CanSetUnknownShape>\n"
            },
            "teardown": {
                "duration": 0.0017310239927610382,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_MergesShapes",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039728400588501245,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015122779877856374,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStaticShape_MergesShapes>\n"
            },
            "teardown": {
                "duration": 0.001571832995978184,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenDimIncompatible",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003896770067512989,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015014250093372539,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStaticShape_RaisesErrorWhenDimIncompatible>\n"
            },
            "teardown": {
                "duration": 0.0019495820015436038,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenRankIncompatible",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004126109997741878,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0016420620086137205,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStaticShape_RaisesErrorWhenRankIncompatible>\n"
            },
            "teardown": {
                "duration": 0.0015103290061233565,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000388130996725522,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004249339981470257,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017638429999351501,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_both_empty",
            "lineno": 88,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006296180072240531,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.055286360991885886,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_both_empty>\n"
            },
            "teardown": {
                "duration": 0.0021666530083166435,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less",
            "lineno": 51,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004412540001794696,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03555217001121491,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_less>\n"
            },
            "teardown": {
                "duration": 0.0025960040075005963,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less_and_broadcastable_shapes",
            "lineno": 63,
            "outcome": "passed",
            "setup": {
                "duration": 0.000469217004138045,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03510795900365338,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_less_and_broadcastable_shapes>\n"
            },
            "teardown": {
                "duration": 0.002415626004221849,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_equal",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004709469940280542,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014696740996441804,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raises_when_equal>\n"
            },
            "teardown": {
                "duration": 0.0017694620037218556,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_greater",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004395540017867461,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015274531993782148,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raises_when_greater>\n"
            },
            "teardown": {
                "duration": 0.0017554189980728552,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_less_but_non_broadcastable_shapes",
            "lineno": 75,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004959020006936044,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014201715996023268,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raises_when_less_but_non_broadcastable_shapes>\n"
            },
            "teardown": {
                "duration": 0.0019401509925955907,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_returns_none_with_eager",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042529999336693436,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005047045997343957,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_returns_none_with_eager>\n"
            },
            "teardown": {
                "duration": 0.0019194750057067722,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039350500446744263,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039431999903172255,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002211186001659371,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_static_check_in_graph_mode",
            "lineno": 110,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042311700235586613,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004852330996072851,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_static_check_in_graph_mode>\n"
            },
            "teardown": {
                "duration": 0.0019527709955582395,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_both_empty",
            "lineno": 184,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006837860128143802,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06230551999760792,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_both_empty>\n",
                "stderr": "ERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/AssertGuard/Identity' type=Identity>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\nERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\nERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/AssertGuard/Identity' type=Identity>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684008734.2997835,
                        "msecs": 299.0,
                        "relativeCreated": 31553.303956985474,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684008734.30038,
                        "msecs": 300.0,
                        "relativeCreated": 31553.900480270386,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684008734.300769,
                        "msecs": 300.0,
                        "relativeCreated": 31554.28957939148,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0029046479903627187,
                "outcome": "passed",
                "stderr": "ERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/AssertGuard/Identity' type=Identity>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/AssertGuard/Identity' type=Identity>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684008734.3467693,
                        "msecs": 346.0,
                        "relativeCreated": 31600.289821624756,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_equal",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046295499487314373,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03274235600838438,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_equal>\n"
            },
            "teardown": {
                "duration": 0.003544810999301262,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal",
            "lineno": 144,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045520300045609474,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03491386699897703,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_less_equal>\n",
                "stderr": "ERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684008734.3877504,
                        "msecs": 387.0,
                        "relativeCreated": 31641.270875930786,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.002613268996356055,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal_and_broadcastable_shapes",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005221499886829406,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03889698098646477,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_less_equal_and_broadcastable_shapes>\n",
                "stderr": "ERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684008734.439773,
                        "msecs": 439.0,
                        "relativeCreated": 31693.293571472168,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0026937469956465065,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_greater",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048725600936450064,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016098455002065748,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raises_when_greater>\n"
            },
            "teardown": {
                "duration": 0.0029693149990634993,
                "outcome": "passed",
                "stderr": "ERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684008734.48652,
                        "msecs": 486.0,
                        "relativeCreated": 31740.04054069519,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_less_equal_but_non_broadcastable_shapes",
            "lineno": 168,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005202570027904585,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015478619010536931,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raises_when_less_equal_but_non_broadcastable_shapes>\n"
            },
            "teardown": {
                "duration": 0.0022272659989539534,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004787840007338673,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044279699795879424,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017055080097634345,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_static_check_in_graph_mode",
            "lineno": 197,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004409529938129708,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005151853998540901,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_static_check_in_graph_mode>\n"
            },
            "teardown": {
                "duration": 0.0017965099978027865,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBasic",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006586280069313943,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3519994929956738,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py:1940: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.config.list_physical_devices('GPU')` instead.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py:1940: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.config.list_physical_devices('GPU')` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008734.5862107,
                        "msecs": 586.0,
                        "relativeCreated": 31839.731216430664,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0055331170005956665,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBfloat16",
            "lineno": 93,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005794619937660173,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007926970996777527,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBfloat16>\n***B /job:localhost/replica:0/task:0/device:GPU:0\n"
            },
            "teardown": {
                "duration": 0.002932207004050724,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testCastToTypeOfVariable",
            "lineno": 161,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005311800050549209,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011595996009418741,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCastToTypeOfVariable>\n"
            },
            "teardown": {
                "duration": 0.002957232005428523,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testGradients",
            "lineno": 172,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005415519990492612,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08898751600645483,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradients>\n"
            },
            "teardown": {
                "duration": 0.0038981120014796034,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testInfNan",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006173800065880641,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0638806549977744,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfNan>\n"
            },
            "teardown": {
                "duration": 0.003161304004606791,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testIntToFloatBoundary",
            "lineno": 121,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005555630050366744,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005784330001915805,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIntToFloatBoundary>\n"
            },
            "teardown": {
                "duration": 0.002941106999060139,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testNotImplemented",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.000541646993951872,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005801088991574943,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNotImplemented>\n",
                "stderr": "2023-05-13 20:12:15.086817: W tensorflow/core/framework/op_kernel.cc:1807] OP_REQUIRES failed at cast_op.cc:121 : UNIMPLEMENTED: Cast int64 to string is not supported\n"
            },
            "teardown": {
                "duration": 0.0024183229979826137,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRandom",
            "lineno": 109,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005047030135756359,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7241104399872711,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRandom>\n"
            },
            "teardown": {
                "duration": 0.005048592007369734,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRefDtype",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004995939962100238,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009766306000528857,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRefDtype>\n"
            },
            "teardown": {
                "duration": 0.00204661900352221,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testSmallValues",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006172709981910884,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.29218249800032936,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmallValues>\n"
            },
            "teardown": {
                "duration": 0.00480849199811928,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000571465992834419,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00052218500059098,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0019547270057955757,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::testCast",
            "lineno": 204,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004848649987252429,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004242110007908195,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCast>\n"
            },
            "teardown": {
                "duration": 0.0018357469962211326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00041665199387352914,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004339729930507019,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002089307992719114,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::testClip",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006332880002446473,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.25751228201261256,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testClip>\n"
            },
            "teardown": {
                "duration": 0.0038547619915334508,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000460715004010126,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004408269887790084,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002071355003863573,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput0",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006784470024285838,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.1430123720056145,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOutputAndGradient2DInput0>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/compute_gradient_error_test.py:56: compute_gradient_error (from tensorflow.python.ops.gradient_checker) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.test.compute_gradient in 2.0, which has better support for functions. Note that the two versions have different usage, so code change is needed.\nWARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gradient_checker.py:390: compute_gradient (from tensorflow.python.ops.gradient_checker) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.test.compute_gradient in 2.0, which has better support for functions. Note that the two versions have different usage, so code change is needed.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/compute_gradient_error_test.py:56: compute_gradient_error (from tensorflow.python.ops.gradient_checker) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.test.compute_gradient in 2.0, which has better support for functions. Note that the two versions have different usage, so code change is needed.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008736.430938,
                        "msecs": 430.0,
                        "relativeCreated": 33684.4584941864,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gradient_checker.py:390: compute_gradient (from tensorflow.python.ops.gradient_checker) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.test.compute_gradient in 2.0, which has better support for functions. Note that the two versions have different usage, so code change is needed.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008736.4311755,
                        "msecs": 431.0,
                        "relativeCreated": 33684.69595909119,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0031170669972198084,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput01",
            "lineno": 77,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005530779890250415,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.00332604299183,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOutputAndGradient2DInput01>\n"
            },
            "teardown": {
                "duration": 0.002221483999164775,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005021300021326169,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004819030000362545,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0020455240010051057,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_concat",
            "lineno": 1727,
            "outcome": "passed",
            "setup": {
                "duration": 0.000856991988257505,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004101332990103401,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_concat>\n"
            },
            "teardown": {
                "duration": 0.0020673510007327422,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004260599962435663,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004112189926672727,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00853782900958322,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number0",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006684370018774644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005903690034756437,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number0>\n"
            },
            "teardown": {
                "duration": 0.001843960999394767,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number1",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041132701153401285,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004560349916573614,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number1>\n"
            },
            "teardown": {
                "duration": 0.0016283970035146922,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number10",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039102500886656344,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004449719999684021,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number10>\n"
            },
            "teardown": {
                "duration": 0.0015420609997818246,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number11",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003718270017998293,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004162779951002449,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number11>\n"
            },
            "teardown": {
                "duration": 0.002072620001854375,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number12",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004053779994137585,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004526859993347898,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number12>\n"
            },
            "teardown": {
                "duration": 0.0014873659965815023,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number13",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045511600910685956,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004327509959693998,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number13>\n"
            },
            "teardown": {
                "duration": 0.0015100059972610325,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number14",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042310300341341645,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004185779980616644,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number14>\n"
            },
            "teardown": {
                "duration": 0.0015858430124353617,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number15",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004063540109200403,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040626199916005135,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number15>\n"
            },
            "teardown": {
                "duration": 0.0018937899876618758,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number16",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005056520021753386,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000447711005108431,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number16>\n"
            },
            "teardown": {
                "duration": 0.0015380390104837716,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number17",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036977599665988237,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041354200220666826,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number17>\n"
            },
            "teardown": {
                "duration": 0.0014866650017211214,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number18",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048104600864462554,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046328599273692816,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number18>\n"
            },
            "teardown": {
                "duration": 0.0015266650007106364,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number19",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.000384174010832794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041004498780239373,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number19>\n"
            },
            "teardown": {
                "duration": 0.0019214630010537803,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number2",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045585300540551543,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004423990030772984,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number2>\n"
            },
            "teardown": {
                "duration": 0.0015891350049059838,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number20",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040568500116933137,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004547800053842366,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number20>\n"
            },
            "teardown": {
                "duration": 0.001495403004810214,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number3",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042139299330301583,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043205299880355597,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number3>\n"
            },
            "teardown": {
                "duration": 0.001632482002605684,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number4",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035439299244899303,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040753699431661516,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number4>\n"
            },
            "teardown": {
                "duration": 0.001781457001925446,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number5",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041356199653819203,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004750320076709613,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number5>\n"
            },
            "teardown": {
                "duration": 0.0016290260100504383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number6",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003782069979934022,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003927360085071996,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number6>\n"
            },
            "teardown": {
                "duration": 0.0014587040059268475,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number7",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036765600088983774,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041275400144513696,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number7>\n"
            },
            "teardown": {
                "duration": 0.001528988010250032,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number8",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041166199662256986,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043601599463727325,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number8>\n"
            },
            "teardown": {
                "duration": 0.0020491909963311628,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number9",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003761260013561696,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004462870128918439,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number9>\n"
            },
            "teardown": {
                "duration": 0.0014979410043451935,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_grad_error",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037285700091160834,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07500257699575741,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_eager_const_grad_error>\n"
            },
            "teardown": {
                "duration": 0.0016451550036435947,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_pfor",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004256329993950203,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0750668249966111,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_eager_const_pfor>\n"
            },
            "teardown": {
                "duration": 0.0017098040116252378,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_xla",
            "lineno": 50,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047593499766662717,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.26709944299363997,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_eager_const_xla>\n"
            },
            "teardown": {
                "duration": 0.002505475000361912,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004758540017064661,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045696600864175707,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0022083740041125566,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeInvalidOutputShape",
            "lineno": 317,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007441820052918047,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008722015001694672,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv2DTransposeInvalidOutputShape>\n",
                "stderr": "2023-05-13 20:12:25.100389: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at conv_grad_input_ops.h:431 : INVALID_ARGUMENT: Conv2DBackpropInput: elements of input_sizes must be >= 0, not 2x-2\n"
            },
            "teardown": {
                "duration": 0.0017699319869279861,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSame",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003712879988597706,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.2674971550004557,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv2DTransposeSame>\n"
            },
            "teardown": {
                "duration": 0.0034276649967068806,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeShapeInference",
            "lineno": 303,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005538599943974987,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1054606249963399,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv2DTransposeShapeInference>\n"
            },
            "teardown": {
                "duration": 0.004258055007085204,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSingleStride",
            "lineno": 22,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005267289961921051,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03727904199331533,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv2DTransposeSingleStride>\n"
            },
            "teardown": {
                "duration": 0.003229588008252904,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeValid",
            "lineno": 105,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005004479899071157,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013495152001269162,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv2DTransposeValid>\n"
            },
            "teardown": {
                "duration": 0.0025493749999441206,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005012609908590093,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.1563650140014943,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient>\nconv2d_transpose gradient err = 0.000259936 \n"
            },
            "teardown": {
                "duration": 0.002757646012469195,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005956519889878109,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005361889925552532,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0028277530072955415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D1x1x1Filter",
            "lineno": 268,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008195249974960461,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0440595870022662,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv3D1x1x1Filter>\n***config [('NDHWC', False), ('NDHWC', True)]\n***config [('NDHWC', False), ('NDHWC', True)]\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.003226104992791079,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2Filter",
            "lineno": 296,
            "outcome": "passed",
            "setup": {
                "duration": 0.000544877999345772,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07455583399860188,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv3D2x2x2Filter>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0031824070028960705,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2",
            "lineno": 332,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005609259969787672,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03452398499939591,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv3D2x2x2FilterStride2>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.003486160989268683,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2Same",
            "lineno": 359,
            "outcome": "passed",
            "setup": {
                "duration": 0.000562463013920933,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.032584127999143675,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv3D2x2x2FilterStride2Same>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.003343166012200527,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DExpandedBatch",
            "lineno": 204,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008226009958889335,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.055592333010281436,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv3DExpandedBatch>\n"
            },
            "teardown": {
                "duration": 0.003187715992680751,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStride3",
            "lineno": 343,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005894280038774014,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04475026599538978,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv3DStride3>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.003252929003792815,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStrides",
            "lineno": 311,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005777990008937195,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03438753700174857,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv3DStrides>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0030679379997309297,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionClass3DExpandedBatch",
            "lineno": 226,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005314790032571182,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04723249000380747,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutionClass3DExpandedBatch>\n"
            },
            "teardown": {
                "duration": 0.003376173001015559,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionWith2SpatialDimensionsAndExpandedBatch",
            "lineno": 252,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005768670089310035,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04941954200330656,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutionWith2SpatialDimensionsAndExpandedBatch>\n"
            },
            "teardown": {
                "duration": 0.0038072169991210103,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientKernelSizeMatchesInputSize",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006627449911320582,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.6179239749908447,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientKernelSizeMatchesInputSize>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0025207860016962513,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideOne",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005429799930425361,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.099394806995406,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientSamePaddingStrideOne>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002398890006588772,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideThree",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005080239934613928,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.692916708008852,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientSamePaddingStrideThree>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0025857760047074407,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideTwo",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005297369934851304,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.543297807002091,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientSamePaddingStrideTwo>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0022564520040759817,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOne",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004715109971584752,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.34504847000062,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientValidPaddingStrideOne>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002413027992588468,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOneFastPath",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005458319938043132,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.2103553150082007,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientValidPaddingStrideOneFastPath>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0030761829984840006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideThree",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005568850028794259,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.597466981998878,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientValidPaddingStrideThree>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002881571010220796,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideTwo",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005944719887338579,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.4239379259961424,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientValidPaddingStrideTwo>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002423407990136184,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientKernelSizeMatchesInputSize",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004647160094464198,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.7316621339996345,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientKernelSizeMatchesInputSize>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0033977630082517862,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingDifferentStrides",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009465710027143359,
                "outcome": "passed"
            },
            "call": {
                "duration": 7.923141252991627,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientSamePaddingDifferentStrides>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002626779009005986,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideOne",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005568420019699261,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8486371949984459,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientSamePaddingStrideOne>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0022509529953822494,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideThree",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004926139954477549,
                "outcome": "passed"
            },
            "call": {
                "duration": 7.628922200005036,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientSamePaddingStrideThree>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002459466995787807,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideTwo",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005553380033234134,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.8705052309960593,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientSamePaddingStrideTwo>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.003001495002536103,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOne",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005878359952475876,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.083790566000971,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientValidPaddingStrideOne>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0024914289970183745,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOneFastPath",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004617209924617782,
                "outcome": "passed"
            },
            "call": {
                "duration": 11.603929292003158,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientValidPaddingStrideOneFastPath>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002760786999715492,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideThree",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004888990079052746,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.980240505989059,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientValidPaddingStrideThree>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002492319996235892,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideTwo",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004508909914875403,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.31439569099166,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientValidPaddingStrideTwo>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0023384469968732446,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSizeMatchesInputSize",
            "lineno": 444,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005728450050810352,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018526104991906323,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testKernelSizeMatchesInputSize>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002821247006068006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSmallerThanStride",
            "lineno": 401,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004301839944673702,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08596849400782958,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testKernelSmallerThanStride>\n***config [('NDHWC', False), ('NDHWC', True)]\n***config [('NDHWC', False), ('NDHWC', True)]\n***config [('NDHWC', False), ('NDHWC', True)]\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0031037740118335932,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testZeroSizedFilterThrowsIllegalArgument",
            "lineno": 452,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004995749914087355,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0030654279980808496,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroSizedFilterThrowsIllegalArgument>\n"
            },
            "teardown": {
                "duration": 0.0018359719979343936,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003988429962191731,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042491700151003897,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0020475230121519417,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::testToTensor",
            "lineno": 69,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006294899940257892,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029194821006967686,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testToTensor>\n"
            },
            "teardown": {
                "duration": 0.0020534570066956803,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004592909972416237,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041692599188536406,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016434760036645457,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToInvalidTensorType",
            "lineno": 175,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042124598985537887,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00927663900074549,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToInvalidTensorType>\n"
            },
            "teardown": {
                "duration": 0.0015040250000311062,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToLongLongTensorType",
            "lineno": 185,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043221100349910557,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012107452988857403,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToLongLongTensorType>\n"
            },
            "teardown": {
                "duration": 0.001951824000570923,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorEager",
            "lineno": 99,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039457100501749665,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014805039972998202,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorEager>\n"
            },
            "teardown": {
                "duration": 0.001570324006024748,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorFromInvalidTensor",
            "lineno": 196,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045100100396666676,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010627782990923151,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorFromInvalidTensor>\n"
            },
            "teardown": {
                "duration": 0.0013935339957242832,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedArray",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003654470056062564,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01436697600001935,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorNestedArray>\n"
            },
            "teardown": {
                "duration": 0.002158890987630002,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedMix",
            "lineno": 142,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043805599852930754,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02207985999120865,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorNestedMix>\n"
            },
            "teardown": {
                "duration": 0.001997059996938333,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTensors",
            "lineno": 124,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004196700028842315,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.031987958995159715,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorNestedTensors>\n"
            },
            "teardown": {
                "duration": 0.0019555000035325065,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTuple",
            "lineno": 114,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004378119920147583,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01438782199693378,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorNestedTuple>\n"
            },
            "teardown": {
                "duration": 0.0015399840049212798,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorPreferred",
            "lineno": 152,
            "outcome": "passed",
            "setup": {
                "duration": 0.000398200994823128,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01278784399619326,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorPreferred>\n"
            },
            "teardown": {
                "duration": 0.0016852270055096596,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorProtocol",
            "lineno": 202,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041988999873865396,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014611840000725351,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorProtocol>\n"
            },
            "teardown": {
                "duration": 0.0018089500081259757,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testNoConvert",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043475399434100837,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009831029892666265,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNoConvert>\n"
            },
            "teardown": {
                "duration": 0.0015024890017230064,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039718899643048644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041547699947841465,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017181269940920174,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::testCumProdAndSum",
            "lineno": 55,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006117599987192079,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037804400199092925,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCumProdAndSum>\n"
            },
            "teardown": {
                "duration": 0.005822685998282395,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039323799137491733,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003674460022011772,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015530859964201227,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testBool",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006234390020836145,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013749662000918761,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBool>\n"
            },
            "teardown": {
                "duration": 0.0016204729909077287,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testComplex",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003924939956050366,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.32110460600233637,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testComplex>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_14' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 249, in testComplex\n      output = string_ops.as_string(input_, scientific=True, shortest=True)\nNode: 'AsString_14'\nCannot select both scientific and shortest notation\n\t [[{{node AsString_14}}]]\n\nOriginal stack trace for 'AsString_14':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 249, in testComplex\n    output = string_ops.as_string(input_, scientific=True, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_14' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 249, in testComplex\n      output = string_ops.as_string(input_, scientific=True, shortest=True)\nNode: 'AsString_14'\nCannot select both scientific and shortest notation\n\t [[{{node AsString_14}}]]\n\nOriginal stack trace for 'AsString_14':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 249, in testComplex\n    output = string_ops.as_string(input_, scientific=True, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008830.4480793,
                        "msecs": 448.0,
                        "relativeCreated": 127701.59983634949,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0026011509908130392,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testFloat",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005640809977194294,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21423565701115876,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat>\n***RESULT [b'0.000000e+00' b'1.000000e+00' b'-1.000000e+00' b'5.000000e-01'\n b'2.500000e-01' b'1.250000e-01' b'inf' b'nan' b'-inf']\n***RESULT [b'0.000000e+00' b'1.000000e+00' b'-1.000000e+00' b'5.000000e-01'\n b'2.500000e-01' b'1.250000e-01' b'inf' b'nan' b'-inf']\n***RESULT [b'0.000000e+00' b'1.000000e+00' b'-1.000000e+00' b'5.000000e-01'\n b'2.500000e-01' b'1.250000e-01' b'inf' b'nan' b'-inf']\n***RESULT [b'0.000000e+00' b'1.000000e+00' b'-1.000000e+00' b'5.000000e-01'\n b'2.500000e-01' b'1.250000e-01' b'inf' b'nan' b'-inf']\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_32' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 82, in testFloat\n      output = string_ops.as_string(input_, scientific=True, shortest=True)\nNode: 'AsString_32'\nCannot select both scientific and shortest notation\n\t [[{{node AsString_32}}]]\n\nOriginal stack trace for 'AsString_32':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 82, in testFloat\n    output = string_ops.as_string(input_, scientific=True, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_33' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 86, in testFloat\n      output = string_ops.as_string(input_, fill=\"ab\")\nNode: 'AsString_33'\nFill string must be one or fewer characters\n\t [[{{node AsString_33}}]]\n\nOriginal stack trace for 'AsString_33':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 86, in testFloat\n    output = string_ops.as_string(input_, fill=\"ab\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_32' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 82, in testFloat\n      output = string_ops.as_string(input_, scientific=True, shortest=True)\nNode: 'AsString_32'\nCannot select both scientific and shortest notation\n\t [[{{node AsString_32}}]]\n\nOriginal stack trace for 'AsString_32':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 82, in testFloat\n    output = string_ops.as_string(input_, scientific=True, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008830.658477,
                        "msecs": 658.0,
                        "relativeCreated": 127911.9975566864,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_33' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 86, in testFloat\n      output = string_ops.as_string(input_, fill=\"ab\")\nNode: 'AsString_33'\nFill string must be one or fewer characters\n\t [[{{node AsString_33}}]]\n\nOriginal stack trace for 'AsString_33':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 86, in testFloat\n    output = string_ops.as_string(input_, fill=\"ab\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008830.6660528,
                        "msecs": 666.0,
                        "relativeCreated": 127919.57330703735,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0025739389966474846,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testHalfInt",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005754890007665381,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021324041998013854,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testHalfInt>\n"
            },
            "teardown": {
                "duration": 0.002143274003174156,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testInt",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005174289981368929,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16020525700878352,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_9' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n      output = string_ops.as_string(input_, scientific=True)\nNode: 'AsString_9'\nscientific and shortest format not supported for datatype int64\n\t [[{{node AsString_9}}]]\n\nOriginal stack trace for 'AsString_9':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n    output = string_ops.as_string(input_, scientific=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_10' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n      output = string_ops.as_string(input_, shortest=True)\nNode: 'AsString_10'\nscientific and shortest format not supported for datatype int64\n\t [[{{node AsString_10}}]]\n\nOriginal stack trace for 'AsString_10':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n    output = string_ops.as_string(input_, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_11' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n      output = string_ops.as_string(input_, precision=0)\nNode: 'AsString_11'\nprecision not supported for datatype int64\n\t [[{{node AsString_11}}]]\n\nOriginal stack trace for 'AsString_11':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n    output = string_ops.as_string(input_, precision=0)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_21' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n      output = string_ops.as_string(input_, scientific=True)\nNode: 'AsString_21'\nscientific and shortest format not supported for datatype uint64\n\t [[{{node AsString_21}}]]\n\nOriginal stack trace for 'AsString_21':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n    output = string_ops.as_string(input_, scientific=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_22' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n      output = string_ops.as_string(input_, shortest=True)\nNode: 'AsString_22'\nscientific and shortest format not supported for datatype uint64\n\t [[{{node AsString_22}}]]\n\nOriginal stack trace for 'AsString_22':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n    output = string_ops.as_string(input_, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_23' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n      output = string_ops.as_string(input_, precision=0)\nNode: 'AsString_23'\nprecision not supported for datatype uint64\n\t [[{{node AsString_23}}]]\n\nOriginal stack trace for 'AsString_23':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n    output = string_ops.as_string(input_, precision=0)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_9' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n      output = string_ops.as_string(input_, scientific=True)\nNode: 'AsString_9'\nscientific and shortest format not supported for datatype int64\n\t [[{{node AsString_9}}]]\n\nOriginal stack trace for 'AsString_9':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n    output = string_ops.as_string(input_, scientific=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008830.765149,
                        "msecs": 765.0,
                        "relativeCreated": 128018.66960525513,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_10' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n      output = string_ops.as_string(input_, shortest=True)\nNode: 'AsString_10'\nscientific and shortest format not supported for datatype int64\n\t [[{{node AsString_10}}]]\n\nOriginal stack trace for 'AsString_10':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n    output = string_ops.as_string(input_, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008830.7728107,
                        "msecs": 772.0,
                        "relativeCreated": 128026.33118629456,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_11' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n      output = string_ops.as_string(input_, precision=0)\nNode: 'AsString_11'\nprecision not supported for datatype int64\n\t [[{{node AsString_11}}]]\n\nOriginal stack trace for 'AsString_11':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n    output = string_ops.as_string(input_, precision=0)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008830.7804706,
                        "msecs": 780.0,
                        "relativeCreated": 128033.99109840393,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_21' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n      output = string_ops.as_string(input_, scientific=True)\nNode: 'AsString_21'\nscientific and shortest format not supported for datatype uint64\n\t [[{{node AsString_21}}]]\n\nOriginal stack trace for 'AsString_21':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n    output = string_ops.as_string(input_, scientific=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008830.8421686,
                        "msecs": 842.0,
                        "relativeCreated": 128095.68905830383,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_22' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n      output = string_ops.as_string(input_, shortest=True)\nNode: 'AsString_22'\nscientific and shortest format not supported for datatype uint64\n\t [[{{node AsString_22}}]]\n\nOriginal stack trace for 'AsString_22':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n    output = string_ops.as_string(input_, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008830.8493128,
                        "msecs": 849.0,
                        "relativeCreated": 128102.83327102661,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_23' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n      output = string_ops.as_string(input_, precision=0)\nNode: 'AsString_23'\nprecision not supported for datatype uint64\n\t [[{{node AsString_23}}]]\n\nOriginal stack trace for 'AsString_23':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n    output = string_ops.as_string(input_, precision=0)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008830.8559964,
                        "msecs": 855.0,
                        "relativeCreated": 128109.51685905457,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0021543400071095675,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testLargeInt",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000491147002321668,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020723688998259604,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLargeInt>\n"
            },
            "teardown": {
                "duration": 0.0029030330042587593,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005789879942312837,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004958589997841045,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0022858150041429326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0008221699972636998,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008409889996983111,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002536864994908683,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006791449995944276,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007468080002581701,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0031319119880208746,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005130010104039684,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006013090023770928,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002310007010237314,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005824029940413311,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007336499984376132,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0025206620048265904,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005684780044248328,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006185399979585782,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.003052583007956855,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005402989918366075,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006050750089343637,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002517198008717969,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005398469947976992,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006072070100344718,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0025783199962461367,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006931340030860156,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006253719911910594,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002961645004688762,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005245240026852116,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006329420139081776,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0028226249996805564,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005712640122510493,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006341589905787259,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002707580992137082,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000559020001674071,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007171449979068711,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0031989420094760135,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005621479940600693,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005671959952451289,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0025601849920349196,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005528600013349205,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000620621009147726,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0024685009993845597,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005508829926839098,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005919469986110926,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0026765959919430315,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004603159904945642,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005507680034497753,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001983292997465469,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004176420043222606,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000523936003446579,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0019102730002487078,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004313509998610243,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004597369988914579,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00233890900562983,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005007979925721884,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006519340095110238,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0021912809897912666,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005077170062577352,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005667929945047945,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002324418004718609,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005085960001451895,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000538120002602227,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002267308998852968,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004424049984663725,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046284600102808326,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017936229996848851,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005182429886190221,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004600729880621657,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001643327996134758,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004671749920817092,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046259800728876144,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.004954949996317737,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004227150056976825,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004612030024873093,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017300129984505475,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00040816499677021056,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004666969907702878,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017986890015890822,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004348259972175583,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045685000077355653,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0021494879911188036,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039701801142655313,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004277219995856285,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017764160002116114,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005519109981833026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000541553003131412,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0016641590045765042,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004324660112615675,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043772600474767387,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002148539002519101,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00043484500201884657,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005762829969171435,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0022402659960789606,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005198139988351613,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005754199955845252,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0025574019964551553,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005532349896384403,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005731660057790577,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0029041789966868237,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004509430000325665,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005415229970822111,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002258431995869614,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004670710040954873,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005236630095168948,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001959424000233412,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004331350064603612,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004719080025097355,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0023053129989420995,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004003200010629371,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044151001202408224,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017810939898481593,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003969819954363629,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004397200100356713,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001731694006593898,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004634710057871416,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044169099419377744,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002108838001731783,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00038387899985536933,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042889200267381966,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0016357169952243567,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046640000073239207,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004977939970558509,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001663752002059482,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004104169929632917,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004408489912748337,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0020590220083249733,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003779719991143793,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004134800110477954,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001546479994431138,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00038056200719438493,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044885699753649533,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001772000003256835,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006019700085744262,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004683250008383766,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002005704998737201,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003754900099011138,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004678450059145689,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0016495540039613843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004427329986356199,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047221098793670535,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0015877149999141693,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00037289901229087263,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045430599129758775,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002075846990919672,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004351859970483929,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042975498945452273,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0016566909907851368,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004022390057798475,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004368959926068783,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001698349995422177,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00043313299829605967,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004546790005406365,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0021100659942021593,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004119139921385795,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004424330109031871,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0016999420040519908,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00047975800407584757,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045663501077797264,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0016790170047897846,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003722649998962879,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004155269998591393,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0020470759918680415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004331340023782104,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040117400931194425,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0015673479938413948,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044462698861025274,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16679122699133586,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.004094746996997856,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006751219916623086,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4145017409900902,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.003230644011637196,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005541779974009842,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21892276499420404,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.003642213996499777,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044728499779012054,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24358698299329262,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.0034244130074512213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009557720040902495,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4824064979911782,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.005355956993298605,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005560779973166063,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.37785759899998084,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.0049103550118161365,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006443199963541701,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07740844199724961,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.0028430289967218414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006353879871312529,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10241266099910717,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.003470546012977138,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005432230100268498,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08029989400529303,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.003516201992169954,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005215150013100356,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10892325500026345,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.003727968010935001,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005658779991790652,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12572953299968503,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.0033594870037632063,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004801869945367798,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12742470800003503,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.0031956460006767884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005115219973959029,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05653293200884946,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.0023634779936401173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005150279903318733,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.055898499995237216,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.0028048910025972873,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005169939977349713,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05770581999968272,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.002741986987530254,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004561440000543371,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017180467999423854,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.0020658739958889782,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045109199709258974,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04306521399121266,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.0025483650097157806,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004772160027641803,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04454653599532321,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.002543688999139704,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004388579982332885,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01815895500476472,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.0018633860017871484,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000488516001496464,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02586719700775575,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.002463120996253565,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045137399865780026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028865563988802023,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.002294594989507459,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004255189996911213,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08956100299837999,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.002201241994043812,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004590619937516749,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11208092499873601,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.003134175989544019,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005420110101113096,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11619052200694568,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.0027981810126220807,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004953730094712228,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07031681400258094,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.0031367589981528,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005157609994057566,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07249783599399962,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.003069019003305584,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004914809978799894,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09825864699087106,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.0028705759905278683,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046359199041035026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1437113110005157,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.00393664299917873,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006273829931160435,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7028812360076699,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.0036400079989107326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005062309937784448,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.37876102700829506,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.003777520003495738,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006808250036556274,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20303083000180777,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.0033198309974977747,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005050570034654811,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7310191959986696,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.0046466409985441715,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000469683000119403,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3527818339935038,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.004692194008384831,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010609799937810749,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0604501609923318,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.003018971998244524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009133059938903898,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10791216799407266,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.004093247000128031,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005799790087621659,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10637759200471919,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.003285501996288076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007022579957265407,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09897087900026236,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.0033585630008019507,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005057910020695999,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13122375699458644,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.00392178499896545,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005485700094141066,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13294080400373787,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.003287999003077857,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005205079942243174,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04178611199313309,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.002574411002569832,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004765369958477095,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09335668699350208,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.002886857997509651,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004843709903070703,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.061341039996477775,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.0026373020082246512,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004798320005647838,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01906826200138312,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.0024042469885898754,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004951839946443215,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0452867980056908,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.0025995619944296777,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047961200471036136,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04550384700996801,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.002488236001227051,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004724239988718182,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018544342994573526,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.0023287749936571345,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004300290020182729,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026434061001054943,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.0024338310031453148,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045281399798113853,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03436530299950391,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.0027032719954149798,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004985790001228452,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06814157299231738,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.0025594789913157,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004967629938619211,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10952957300469279,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.0026124559954041615,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043906099745072424,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11422081101045478,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.002730757012614049,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046645999827887863,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.043333068999345414,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0>\n"
            },
            "teardown": {
                "duration": 0.0023645769979339093,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042326100810896605,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06339392199879512,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20>\n"
            },
            "teardown": {
                "duration": 0.002355486009037122,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042126599873881787,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06765039901074488,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23>\n"
            },
            "teardown": {
                "duration": 0.003232342001865618,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006717119977110997,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006598600011784583,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0026771670090965927,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005644759949063882,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006326770089799538,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0028270809998502955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005825839907629415,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005859649972990155,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0028335849929135293,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00042231299448758364,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004906559915980324,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0019621740066213533,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000490423000883311,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005058509996160865,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002259079003124498,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005834220064571127,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006209970015333965,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0027981519961031154,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004532550083240494,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007059820054564625,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017993619985645637,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00041350300307385623,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004390660033095628,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017914659983944148,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004070490103913471,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045279201003722847,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0021227110119070858,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00042941099673043936,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005271630070637912,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017008620052365586,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004116320051252842,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042455999937374145,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0018254949973197654,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046098200255073607,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043901000753976405,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.005744248002883978,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005338939954526722,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005921919946558774,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001714000987703912,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005788059934275225,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004251180071150884,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0018225600069854409,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00042133200622629374,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004133750044275075,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.15375112000037916,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0009505999914836138,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005113640072522685,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017025589913828298,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004210399929434061,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000444479999714531,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017448629951104522,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039599199953954667,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043333799112588167,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0018689589924179018,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039146599010564387,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004317190032452345,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017540779954288155,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004242249997332692,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004029400006402284,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0015535689890384674,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036526199255604297,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037154699384700507,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0021538659930229187,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00037084100767970085,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004799559974344447,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0016167059948202223,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003723779955180362,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003931039973394945,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014046949945623055,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035493199538905174,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004472670116228983,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001948211996932514,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003638199996203184,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043466400529723614,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001533754009869881,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003885530022671446,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004294829996069893,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013899699988542125,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003409630007809028,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003840140125248581,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017754250002326444,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039146700873970985,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037711199547629803,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0016247320018010214,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000519059001817368,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045797500933986157,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013949450076324865,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035342900082468987,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000510445999680087,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.007783706008922309,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036381499376147985,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038607999158557504,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001617084999452345,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003341249976074323,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003842939913738519,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013571199961006641,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003739480016520247,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004520880029303953,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0020674100087489933,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00033003499265760183,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037203299871180207,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013429679966066033,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034239199885632843,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004305500042391941,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00161701999604702,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00033602600160520524,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041580700781196356,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002067938999971375,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004019250045530498,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042632299300748855,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001748013004544191,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00048090099880937487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005493619974004105,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017146249883808196,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004765359917655587,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005165619950275868,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001974159007659182,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034589500864967704,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003829649940598756,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001587605001986958,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003375180094735697,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044954000622965395,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014512769994325936,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034051199327223003,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003912659885827452,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0019935659947805107,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003970070101786405,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000374045004718937,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014734519936610013,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034930800029542297,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003760230029001832,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013881329941796139,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035671300429385155,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004507169942371547,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0019477089954307303,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003751759941224009,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003894689871231094,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014002740063006058,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003494020056677982,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042922599823214114,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014487959997495636,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039175599522423,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003999229957116768,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0018224029918201268,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000445822995970957,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004458069888642058,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013978389906696975,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003408390039112419,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038452599255833775,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001365568008623086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003379299887456,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043462400208227336,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0030082099983701482,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004334740078775212,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038491499435622245,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014117519895080477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035672700323630124,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043144899245817214,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0015911789960227907,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003849810018436983,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041611900087445974,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002018743005464785,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004236109962221235,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20028656099748332,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "stderr": "2023-05-13 20:13:59.244441: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nSize: GPU CPU \nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Size) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n  Const_1 (Const) /device:GPU:0\n  Size_1 (Size) /device:GPU:0\n  sub_1/y (Const) /device:GPU:0\n  sub_1 (Sub) /device:GPU:0\n\n2023-05-13 20:13:59.265677: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:13:59.266927: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:13:59.267408: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:13:59.267819: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0025935019948519766,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005697769956896082,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2999348080047639,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "stderr": "2023-05-13 20:13:59.374676: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:13:59.383540: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:13:59.384869: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:13:59.532232: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:13:59.533454: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:13:59.534022: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:13:59.534440: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0025490459956927225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000527395008248277,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6870954480109503,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "stderr": "2023-05-13 20:13:59.680921: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:13:59.690548: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:13:59.692050: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:13:59.832832: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:13:59.834083: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:13:59.834513: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:13:59.834910: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002722677993006073,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005342060030670837,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2688143090053927,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:00.480864: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nSize: GPU CPU \nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Size) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n  Const_1 (Const) /device:GPU:0\n  Size_1 (Size) /device:GPU:0\n  sub_1/y (Const) /device:GPU:0\n  sub_1 (Sub) /device:GPU:0\n  RaggedFromVariant_1/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const_2 (Const) /device:GPU:0\n  Size_2 (Size) /device:GPU:0\n  sub_2/y (Const) /device:GPU:0\n  sub_2 (Sub) /device:GPU:0\n  RaggedFromVariant_2/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  RaggedFromVariant_3/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 20:14:00.509655: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:00.510816: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:00.511257: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:00.511648: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002506303004338406,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047437200555577874,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6979727700090734,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:00.649624: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:00.658736: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:00.659842: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:00.860843: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:00.862024: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:00.862472: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:00.862894: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002938436999102123,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005850360030308366,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.346102499999688,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:01.355808: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:01.365883: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:01.367122: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:01.683663: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:01.685199: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:01.686146: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:01.686858: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0033360529923811555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000755493005272001,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1052951879973989,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:02.722933: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 20:14:02.737660: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:02.738947: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:02.739689: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:02.740137: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0030046700121602044,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006705520063405856,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19883979699807242,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:02.811026: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:02.821094: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:02.822259: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:02.915275: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:02.916449: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:02.916962: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:02.917431: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0026492880133446306,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000651594004011713,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23124541400466114,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:03.014642: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:03.024250: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.025531: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.113041: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.114495: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.115067: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.115557: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0029555469955084845,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007656570087419823,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2042072470067069,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:03.317231: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nSize: GPU CPU \nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Size) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n\n2023-05-13 20:14:03.337292: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.338584: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.339077: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.339549: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.00711258698720485,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008685369975864887,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4212938279961236,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:03.483237: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:03.495291: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.496848: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.641320: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.642894: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.643665: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.644162: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.003535763011313975,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009941309981513768,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4255089319922263,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:03.898909: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:03.910504: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:03.911925: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.074274: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.075774: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.076360: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.076854: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.003664385003503412,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011535350058693439,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1014789059991017,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:04.350990: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nBatchDatasetV2: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:04.366049: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.367387: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.367978: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.368497: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.003059010996366851,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008120319980662316,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2062641770025948,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:04.434784: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:04.446069: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.447400: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.535545: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.536870: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.537407: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.537925: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0025409350055269897,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005230459937592968,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19901274298899807,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:04.643827: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:04.653944: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.655042: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.711989: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.713161: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.713636: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.714060: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.00206441200862173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045638201117981225,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04459804799989797,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:04.842935: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nBatchDatasetV2: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:04.850475: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.851547: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.851992: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0020048959995619953,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004924739914713427,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08357531900401227,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:04.884063: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nRaggedTensorFromVariant: CPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 20:14:04.889704: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 20:14:04.890309: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.926775: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 20:14:04.927435: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.927860: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:04.928279: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0018566299986559898,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004552869941107929,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08808869100175798,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:04.971283: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nRaggedTensorFromVariant: CPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 20:14:04.977917: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 20:14:04.978858: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.016258: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 20:14:05.017103: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.017533: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.017961: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0018602570053189993,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00054568299674429,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.042040441010612994,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:05.068411: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nBatchDatasetV2: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:05.075254: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.076095: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.076495: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.001556495000841096,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043898698640987277,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0705165620020125,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:05.110658: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:05.144279: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.145321: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.145755: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.001673058999585919,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005072610074421391,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06476569300866686,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:05.177243: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:05.211207: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.212160: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.212590: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0017776509921532124,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048534400411881506,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09460558900900651,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:05.272734: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  RaggedFromVariant_1/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 20:14:05.285962: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.286825: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.287232: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.287620: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002145814010873437,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000705493992427364,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21334873999876436,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:05.362429: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:05.370845: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.372076: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.443117: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.444351: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.444781: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.445161: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002544775008573197,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005168460047570989,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19598593199043535,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:05.571842: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:05.579591: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.580724: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.654028: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.655259: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.655698: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.656089: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002903715008869767,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005727230018237606,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07600068699684925,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:05.784169: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 20:14:05.793857: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.795070: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.795516: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.795922: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0026633310044417158,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005386589909903705,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.142038544989191,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:05.849819: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:05.857928: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.859200: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.926970: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.928193: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.928665: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:05.929073: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.00263093899411615,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005482510023284703,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.25995805399725214,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:05.997246: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:06.005930: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.007197: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.063833: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.064936: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.065399: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.065813: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0027964299952145666,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005202460015425459,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18076656399352942,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:06.335885: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nSize: GPU CPU \nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Const) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n  Const_1 (Const) /device:GPU:0\n  Size_1 (Size) /device:GPU:0\n  sub_1/y (Const) /device:GPU:0\n  sub_1 (Sub) /device:GPU:0\n\n2023-05-13 20:14:06.352745: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.354018: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.354515: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.354959: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002519757006666623,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005199879960855469,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.38218505200347863,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:06.446074: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:06.454854: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.456229: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.618805: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.619939: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.620408: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.620821: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0023762729979353026,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004897250037174672,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.675554020999698,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:06.832337: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:06.840098: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:06.841233: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:07.132742: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:07.133897: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:07.134366: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:07.134799: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002646241002366878,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005020259995944798,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.27546186599647626,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:07.632292: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nSize: GPU CPU \nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Const) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n  Const_1 (Const) /device:GPU:0\n  Size_1 (Size) /device:GPU:0\n  sub_1/y (Const) /device:GPU:0\n  sub_1 (Sub) /device:GPU:0\n  RaggedFromVariant_1/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const_2 (Const) /device:GPU:0\n  Size_2 (Const) /device:GPU:0\n  sub_2/y (Const) /device:GPU:0\n  sub_2 (Sub) /device:GPU:0\n  RaggedFromVariant_2/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  RaggedFromVariant_3/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 20:14:07.662669: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:07.663823: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:07.664266: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:07.664697: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002661539998371154,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005726289964513853,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4323949180106865,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:07.804220: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:07.813869: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:07.815140: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:08.026624: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:08.027994: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:08.028622: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:08.029036: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0026126490120077506,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005908099992666394,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7070899270038353,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:08.242244: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:08.253064: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:08.254639: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:08.462781: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:08.464049: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:08.464492: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:08.464926: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002443425008095801,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005360380018828437,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07314064299862366,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:08.950655: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 20:14:08.960834: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:08.961952: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:08.962404: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:08.962838: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002041372994426638,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004998460062779486,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12528171300073154,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:09.012925: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:09.020605: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.021589: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.073813: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.074819: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.075237: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.075628: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002227739998488687,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004875070007983595,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.186457399991923,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:09.141875: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:09.148806: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.149759: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.202000: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.203095: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.203508: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.203954: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002672198010259308,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046648900024592876,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11571296499460004,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:09.369763: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Const) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n\n2023-05-13 20:14:09.382479: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.383631: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.384092: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.384522: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0021878039988223463,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005321510107023641,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3695815310056787,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:09.452777: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:09.460390: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.461527: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.603579: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.604979: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.605586: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.606061: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0026788649993250147,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005319300107657909,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18359802999475505,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:09.826050: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:09.833710: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.834940: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.914200: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.915402: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.915837: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:09.916232: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0025143889943137765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005301789933582768,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06923650999669917,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:10.027244: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nBatchDatasetV2: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:10.037405: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.038730: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.039257: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.039665: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0027240909985266626,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005578980053542182,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11926288899849169,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:10.087873: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:10.096106: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.097407: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.151467: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.152725: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.153189: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.153591: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002523228991776705,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005317230097716674,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19090021699958015,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:10.211281: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:10.219450: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.220681: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.276785: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.278091: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.278567: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.278982: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0025285140000050887,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005414439947344363,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0519200310081942,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:10.411463: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nBatchDatasetV2: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:10.420305: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.421566: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.422337: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0029304289928404614,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000673643997288309,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10380290099419653,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:10.462123: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nRaggedTensorFromVariant: CPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 20:14:10.470145: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 20:14:10.471609: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.517073: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 20:14:10.518282: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.518842: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.519295: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0022714969963999465,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048659800086170435,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12490469399199355,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:10.576824: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nRaggedTensorFromVariant: CPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 20:14:10.584687: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 20:14:10.585932: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.630730: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 20:14:10.631978: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.632392: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.632786: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0025756019895197824,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004826920048799366,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05175173899624497,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:10.703532: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nBatchDatasetV2: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:10.713511: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.714909: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.715510: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002329765004105866,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004760879965033382,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06506582100701053,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:10.746874: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:10.781464: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.782554: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.782977: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0017209430079674348,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004965120024280623,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06436943500011694,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:10.814342: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:10.849026: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.849885: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.850304: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0018821039993781596,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004789060039911419,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09137160400860012,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:10.908602: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  RaggedFromVariant_1/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 20:14:10.920731: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.921679: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.922086: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.922460: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002459951996570453,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005029590101912618,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15180657999007963,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:10.988994: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:10.996630: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:10.997655: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.064242: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.065167: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.065601: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.066011: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0020604509918484837,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004992239992134273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.197955310010002,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:11.142765: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:11.149712: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.150585: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.220511: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.221365: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.221806: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.222217: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.00252956899930723,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005161709996173158,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07594383299874607,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0>\n",
                "stderr": "2023-05-13 20:14:11.361397: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 20:14:11.370868: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.371900: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.372305: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.372681: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0018262439989484847,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004495249886531383,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.25803664200066123,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20>\n",
                "stderr": "2023-05-13 20:14:11.418869: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:11.425353: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.426107: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.491530: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.492544: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.492960: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.493337: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002675329989870079,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045921899436507374,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2561093650001567,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23>\n",
                "stderr": "2023-05-13 20:14:11.682622: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 20:14:11.689979: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.691071: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.746621: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.747896: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.748987: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:11.750002: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0023389010020764545,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045174000842962414,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048755400348454714,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testWithStructuredElements_test_mode_eager_tfapiversion_1>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001531563000753522,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004476989997783676,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2078241400013212,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testWithStructuredElements_test_mode_eager_tfapiversion_2>\n"
            },
            "teardown": {
                "duration": 0.005027984996559098,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000570156000321731,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006890189979458228,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testWithStructuredElements_test_mode_graph_tfapiversion_1>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0021211239945841953,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004623709974111989,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21252338100748602,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testWithStructuredElements_test_mode_graph_tfapiversion_2>\n",
                "stderr": "2023-05-13 20:14:12.227691: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nDeserializeSparse: CPU \nSize: GPU CPU \nPack: GPU CPU \nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nUnpack: GPU CPU \nBatchDatasetV2: CPU \nOneShotIterator: CPU \nIteratorToStringHandle: CPU GPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  RaggedFromVariant_1/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Size) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n  DeserializeSparse (DeserializeSparse) /device:GPU:0\n  unstack (Unpack) /device:GPU:0\n  Const_1 (Const) /device:GPU:0\n  stack (Pack) /device:GPU:0\n\n2023-05-13 20:14:12.249432: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:12.250778: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:12.251248: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 20:14:12.251641: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002525798001443036,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005786620022263378,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000524104994838126,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.004199478993541561,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::testDiagFlat",
            "lineno": 145,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007943430100567639,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.5155193120008335,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDiagFlat>\n"
            },
            "teardown": {
                "duration": 0.004103044993826188,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004802110051969066,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005218770093051717,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0018913520034402609,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxGRY",
            "lineno": 114,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006053249962860718,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024310356995556504,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDrawBoundingBoxGRY>\n"
            },
            "teardown": {
                "duration": 0.0022269300097832456,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxHalf",
            "lineno": 133,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044657599937636405,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028782537003280595,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDrawBoundingBoxHalf>\n"
            },
            "teardown": {
                "duration": 0.0023713639966445044,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCycling",
            "lineno": 109,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004727060004370287,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04070985900762025,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDrawBoundingBoxRGBAColorCycling>\n"
            },
            "teardown": {
                "duration": 0.003785591004998423,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCyclingWithColors",
            "lineno": 126,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005603089957730845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026658987000701018,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDrawBoundingBoxRGBAColorCyclingWithColors>\n"
            },
            "teardown": {
                "duration": 0.0028767699986929074,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCycling",
            "lineno": 104,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004804210038855672,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03588076899177395,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDrawBoundingBoxRGBColorCycling>\n"
            },
            "teardown": {
                "duration": 0.0028148080018581823,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCyclingWithColors",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004877089959336445,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027347951006959192,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDrawBoundingBoxRGBColorCyclingWithColors>\n"
            },
            "teardown": {
                "duration": 0.0025681559927761555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004854040016653016,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047709100181236863,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001916429988341406,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testCreate",
            "lineno": 109,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007030359993223101,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01856028600013815,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCreate>\n"
            },
            "teardown": {
                "duration": 0.0017461370007367805,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseDefaultGraph",
            "lineno": 96,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004868359974352643,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01583186400239356,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUseDefaultGraph>\n"
            },
            "teardown": {
                "duration": 0.001850375992944464,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseExistingGraph",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046660201041959226,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01417794699955266,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUseExistingGraph>\n"
            },
            "teardown": {
                "duration": 0.00174364099802915,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004611530021065846,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004385619977256283,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016984700050670654,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesDeviceAssignment",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006843139999546111,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03594688199518714,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesDeviceAssignment>\n"
            },
            "teardown": {
                "duration": 0.001778704987373203,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNames",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048625300405547023,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05454398499568924,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNames>\n"
            },
            "teardown": {
                "duration": 0.0017500230023870245,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesNoDebias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048240800970233977,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04744484199909493,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNamesNoDebias>\n"
            },
            "teardown": {
                "duration": 0.0020254980045137927,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScope",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005831320013385266,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06131859800370876,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNamesRespectScope>\n"
            },
            "teardown": {
                "duration": 0.0021530980011448264,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScopeNoDebias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005581299919867888,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04633240299881436,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNamesRespectScopeNoDebias>\n"
            },
            "teardown": {
                "duration": 0.0022907050006324425,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005357129994081333,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.150075679004658,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Scalar>\n",
                "stderr": "2023-05-13 20:14:16.504813: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.01239741400058847,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005874439957551658,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1557244710129453,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Scalar_Debias>\n",
                "stderr": "2023-05-13 20:14:16.669871: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0035979670064989477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005315349990269169,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18986341699201148,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Scalar_Debias_DynamicDecay>\n",
                "stderr": "2023-05-13 20:14:16.849097: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0030174610001267865,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005303509969962761,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15099932100565638,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Scalar_DynamicDecay>\n",
                "stderr": "2023-05-13 20:14:17.018522: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0032618069963064045,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005492469936143607,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12216891600110102,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Vector>\n",
                "stderr": "2023-05-13 20:14:17.161852: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.002539171007811092,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000523825001437217,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13704533501004335,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Vector_Debias>\n",
                "stderr": "2023-05-13 20:14:17.299221: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0021360259997891262,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004692229995271191,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16477498300082516,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Vector_Debias_DynamicDecay>\n",
                "stderr": "2023-05-13 20:14:17.452489: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0027289420104352757,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000512743994477205,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1377451260050293,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Vector_DynamicDecay>\n",
                "stderr": "2023-05-13 20:14:17.606023: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0024668100086273625,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004355139972176403,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1191486790048657,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Scalar>\n",
                "stderr": "2023-05-13 20:14:17.738562: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0023114070063456893,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004334310069680214,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13192602900380734,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Scalar_Debias>\n",
                "stderr": "2023-05-13 20:14:17.869138: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0024523119936930016,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004820100002689287,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1610637650010176,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Scalar_Debias_DynamicDecay>\n",
                "stderr": "2023-05-13 20:14:18.021048: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.002511689002858475,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044035300379619,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16311220100033097,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Scalar_DynamicDecay>\n",
                "stderr": "2023-05-13 20:14:18.185103: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0031440849998034537,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005104390002088621,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12881112399918493,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Vector>\n",
                "stderr": "2023-05-13 20:14:18.333461: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.003184650995535776,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005413509934442118,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16028912799083628,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Vector_Debias>\n",
                "stderr": "2023-05-13 20:14:18.481718: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0031268800084944814,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000631998002063483,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19329506299982313,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Vector_Debias_DynamicDecay>\n",
                "stderr": "2023-05-13 20:14:18.663756: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.00304133900499437,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005077110108686611,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16900942199572455,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Vector_DynamicDecay>\n",
                "stderr": "2023-05-13 20:14:18.843357: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.003483166001387872,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesWithControlDeps",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006974040006753057,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08362419500190299,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesWithControlDeps>\n"
            },
            "teardown": {
                "duration": 0.0033587860089028254,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testBasicEager",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005361869989428669,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020727308990899473,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasicEager>\n"
            },
            "teardown": {
                "duration": 0.002939304002211429,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testCopyXlaSharding",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004995880008209497,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04228038799192291,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCopyXlaSharding>\n"
            },
            "teardown": {
                "duration": 0.001945160998729989,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testImportedGraphVariablesToRestore",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005568509950535372,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012440296995919198,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testImportedGraphVariablesToRestore>\n"
            },
            "teardown": {
                "duration": 0.0017621410079300404,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNames",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004912300064461306,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04407461400842294,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSubsetAverageVariablesNames>\n"
            },
            "teardown": {
                "duration": 0.0017899649974424392,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNamesEager",
            "lineno": 449,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005259080062387511,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016059080997365527,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSubsetAverageVariablesNamesEager>\n"
            },
            "teardown": {
                "duration": 0.002549369994085282,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005599040014203638,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005573649978032336,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0027114230033475906,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::testArrayFill",
            "lineno": 44,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006855890096630901,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005947076992015354,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testArrayFill>\n"
            },
            "teardown": {
                "duration": 0.002026118992944248,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000430935004260391,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003999859909527004,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016629309975542128,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testDictInputs",
            "lineno": 67,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006584869988728315,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01265919599973131,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDictInputs>\n"
            },
            "teardown": {
                "duration": 0.0021694890019716695,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_emptyinput",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00042082800064235926,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006289029988693073,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 334,
                    "message": "ValueError: The test does not take parameters that were passed : {'elements'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 334,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testInvalidInputs_test_elements_emptyinput>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testInvalidInputs_test_elements_emptyinput>\nkwargs = {'elements': empty_input}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7ffacbe92860>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7ffaa0243010>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n        raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\n      missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n          set(requested_parameters))\n      if missing_arguments:\n>       raise ValueError(\"The test does not take parameters that were passed \"\n                         \": {} .\".format(missing_arguments))\nE       ValueError: The test does not take parameters that were passed : {'elements'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:334: ValueError"
            },
            "teardown": {
                "duration": 0.002263351998408325,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_nonlistinput",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005587609921349213,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007600050012115389,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 334,
                    "message": "ValueError: The test does not take parameters that were passed : {'elements'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 334,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testInvalidInputs_test_elements_nonlistinput>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testInvalidInputs_test_elements_nonlistinput>\nkwargs = {'elements': non-list_input}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7ffacbe92860>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7ff6884f43a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n        raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\n      missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n          set(requested_parameters))\n      if missing_arguments:\n>       raise ValueError(\"The test does not take parameters that were passed \"\n                         \": {} .\".format(missing_arguments))\nE       ValueError: The test does not take parameters that were passed : {'elements'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:334: ValueError"
            },
            "teardown": {
                "duration": 0.0024201860069297254,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testLargeNInputs",
            "lineno": 37,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005485109868459404,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.26664020199677907,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLargeNInputs>\n"
            },
            "teardown": {
                "duration": 0.002744628000073135,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testNonRectangularInputs",
            "lineno": 55,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004897830076515675,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010776861003250815,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNonRectangularInputs>\n"
            },
            "teardown": {
                "duration": 0.001963613001862541,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testTupleInputs",
            "lineno": 43,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047875499876681715,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014880382994306274,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTupleInputs>\n"
            },
            "teardown": {
                "duration": 0.0052985439979238436,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testUintInputs",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004619690007530153,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01761638600146398,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUintInputs>\n"
            },
            "teardown": {
                "duration": 0.002499195994460024,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045453099301084876,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046033100807107985,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0019720629934454337,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testDictionary",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.000552655998035334,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006365380002534948,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDictionary>\n"
            },
            "teardown": {
                "duration": 0.001965653005754575,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testInvalidIndex",
            "lineno": 108,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044456000614445657,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006007848001900129,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInvalidIndex>\n"
            },
            "teardown": {
                "duration": 0.0018436020036460832,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testMultipleElements",
            "lineno": 138,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004332950047682971,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0072556830127723515,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleElements>\n"
            },
            "teardown": {
                "duration": 0.0019722589931916445,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testName",
            "lineno": 180,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046364999434445053,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008285303993034177,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testName>\n"
            },
            "teardown": {
                "duration": 0.0019995579932583496,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testNumpy",
            "lineno": 164,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003843099984806031,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009021067002322525,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNumpy>\n"
            },
            "teardown": {
                "duration": 0.0018038840062217787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testOneDimensionalArray",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041441999201197177,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006230350991245359,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOneDimensionalArray>\n"
            },
            "teardown": {
                "duration": 0.001812706992495805,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testTwoDimensionalArray",
            "lineno": 130,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003971820115111768,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006598637992283329,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTwoDimensionalArray>\n"
            },
            "teardown": {
                "duration": 0.0019152489985572174,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00040095999429468066,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039236899465322495,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017299909959547222,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047444300435017794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.046177113996236585,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDict_test_verifyfn_verifyexhaustediterator>\n"
            },
            "teardown": {
                "duration": 0.002986064995639026,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000419892996433191,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.043329484993591905,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDict_test_verifyfn_verifyfullyusediterator>\n"
            },
            "teardown": {
                "duration": 0.0030417480011237785,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004406469961395487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1232594750035787,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDict_test_verifyfn_verifymultiplebreaks>\n"
            },
            "teardown": {
                "duration": 0.003602362994570285,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045459398825187236,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009614500013412908,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testDict_test_verifyfn_verifyresetrestorediterator>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped: Eager mode iteration do not support re-initialization.')"
            },
            "teardown": {
                "duration": 0.001716758997645229,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004083880048710853,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04526584500854369,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDict_test_verifyfn_verifyunusediterator>\n"
            },
            "teardown": {
                "duration": 0.00300626500393264,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004259510023985058,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041744799818843603,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015020910068415105,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040909800736699253,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0419700170023134,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyexhaustediterator>\n"
            },
            "teardown": {
                "duration": 0.003176462007104419,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004466599930310622,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05075146199669689,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyfullyusediterator>\n"
            },
            "teardown": {
                "duration": 0.0030145339987939224,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005762899963883683,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1376837300049374,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifymultiplebreaks>\n"
            },
            "teardown": {
                "duration": 0.00354178600537125,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005530760099645704,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010548980062594637,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyresetrestorediterator>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped: Eager mode iteration do not support re-initialization.')"
            },
            "teardown": {
                "duration": 0.00167311099357903,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044478100608102977,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.050491497007897124,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyunusediterator>\n"
            },
            "teardown": {
                "duration": 0.0032592360075796023,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testCPUGPUMatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006904019974172115,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19286412200017367,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCPUGPUMatch>\n"
            },
            "teardown": {
                "duration": 0.0023251800012076274,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testDistinct",
            "lineno": 136,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005638930015265942,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03501515000243671,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDistinct>\n"
            },
            "teardown": {
                "duration": 0.004134561997489072,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testEmptySamplingNoError",
            "lineno": 57,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005134590028319508,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00943091299268417,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmptySamplingNoError>\n"
            },
            "teardown": {
                "duration": 0.002258660999359563,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040215300396084785,
                "outcome": "passed"
            },
            "call": {
                "duration": 14.569051298996783,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMomentsFloat32>\n"
            },
            "teardown": {
                "duration": 0.0025621189997764304,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005780139908893034,
                "outcome": "passed"
            },
            "call": {
                "duration": 20.6525704950036,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMomentsFloat64>\n"
            },
            "teardown": {
                "duration": 0.0027464669983601198,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNoCSE",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007356729911407456,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07142684399150312,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNoCSE>\n"
            },
            "teardown": {
                "duration": 0.0016146300040418282,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallShape",
            "lineno": 127,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046560900227632374,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.031099308995180763,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNonZeroSmallShape>\n"
            },
            "teardown": {
                "duration": 0.0024015990056796,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallishShape",
            "lineno": 130,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046505600039381534,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.030384037992917,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNonZeroSmallishShape>\n"
            },
            "teardown": {
                "duration": 0.0021221539936959743,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNpDtypes",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037472500116564333,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009337294002762064,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNpDtypes>\n"
            },
            "teardown": {
                "duration": 0.0019293590012239292,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testPositive",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003661680093500763,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06092254699615296,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPositive>\n"
            },
            "teardown": {
                "duration": 0.001676266998401843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSeed",
            "lineno": 160,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044831600098405033,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0291137229942251,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSeed>\n"
            },
            "teardown": {
                "duration": 0.002152557994122617,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003607780090533197,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03927064800518565,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testShape>\n"
            },
            "teardown": {
                "duration": 0.001462569009163417,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSizeTooLarge",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003630119899753481,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008182744000805542,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSizeTooLarge>\n",
                "stderr": "2023-05-13 20:14:56.021352: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at random_op.cc:169 : INVALID_ARGUMENT: Encountered overflow when multiplying 4840914843677363160 with 4, result: -1\n"
            },
            "teardown": {
                "duration": 0.0017111170018324628,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034963600046467036,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002952490031020716,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.0016332670056726784,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collection",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.000671046000206843,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001132188001065515,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collection>\n"
            },
            "teardown": {
                "duration": 0.0014718750026077032,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_generator",
            "lineno": 206,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003445920010562986,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047920699580572546,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collections_from_generator>\n"
            },
            "teardown": {
                "duration": 0.001771852999809198,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_list",
            "lineno": 178,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033872300991788507,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004691990034189075,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collections_from_list>\n"
            },
            "teardown": {
                "duration": 0.0012977809965377674,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_set",
            "lineno": 225,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034787300683092326,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005641620082315058,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collections_from_set>\n"
            },
            "teardown": {
                "duration": 0.0014794300077483058,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_string",
            "lineno": 240,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003921089955838397,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048449699534103274,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collections_from_string>\n"
            },
            "teardown": {
                "duration": 0.001433507990441285,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_tuple",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003437919949647039,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046919999294914305,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collections_from_tuple>\n"
            },
            "teardown": {
                "duration": 0.0016218670061789453,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_uniquify",
            "lineno": 168,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003864650061586872,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004665620072046295,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collections_uniquify>\n"
            },
            "teardown": {
                "duration": 0.0015230830031214282,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_default_graph",
            "lineno": 249,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003429200005484745,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005580860015470535,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_default_graph>\n"
            },
            "teardown": {
                "duration": 0.001300125994021073,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_get_collections",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034931300615426153,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005048849998274818,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_get_collections>\n"
            },
            "teardown": {
                "duration": 0.00134720400092192,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003595610032789409,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00035894999746233225,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017825160030042753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_create_global_step",
            "lineno": 67,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006406280008377507,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006893717989441939,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_create_global_step>\n"
            },
            "teardown": {
                "duration": 0.0013652390043716878,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_global_step",
            "lineno": 82,
            "outcome": "passed",
            "setup": {
                "duration": 0.000403152997023426,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0033918419940164313,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_get_global_step>\n"
            },
            "teardown": {
                "duration": 0.0013236550003057346,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_or_create_global_step",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036070699570700526,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0033188629895448685,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_get_or_create_global_step>\n"
            },
            "teardown": {
                "duration": 0.0015267130074789748,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_dtype",
            "lineno": 31,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036380899837240577,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0030857239908073097,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_invalid_dtype>\n"
            },
            "teardown": {
                "duration": 0.005031630003941245,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_shape",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042384098924230784,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0031385380134452134,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_invalid_shape>\n"
            },
            "teardown": {
                "duration": 0.0013511020079022273,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003453450044617057,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00035915200714953244,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001408691008691676,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testPerReplicaBatchSize",
            "lineno": 32,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006581240013474599,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042135900002904236,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPerReplicaBatchSize>\n"
            },
            "teardown": {
                "duration": 0.0017939980025403202,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testProperties",
            "lineno": 25,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003372329956619069,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00033285500830970705,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testProperties>\n"
            },
            "teardown": {
                "duration": 0.0013192150072427467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testStr",
            "lineno": 43,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035463800304569304,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003940980095649138,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStr>\n"
            },
            "teardown": {
                "duration": 0.0013738989946432412,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000351253998815082,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00034387399500701576,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001637146997381933,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testAddShape",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005805119872093201,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004074575001141056,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAddShape>\n"
            },
            "teardown": {
                "duration": 0.0019516750035108998,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testScalarShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034952600253745914,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010092278011143208,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScalarShape>\n"
            },
            "teardown": {
                "duration": 0.0015607189998263493,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testShape",
            "lineno": 69,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003388759942026809,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007028359977994114,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testShape>\n"
            },
            "teardown": {
                "duration": 0.00141901099414099,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownDim",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035069099976681173,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01022209000075236,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnknownDim>\n"
            },
            "teardown": {
                "duration": 0.0013201399997342378,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034729400067590177,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009837792997132055,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnknownShape>\n"
            },
            "teardown": {
                "duration": 0.0013250589981907979,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003662429953692481,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042439000390004367,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016020649927668273,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignDifferentShapesAllowed",
            "lineno": 143,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005761240026913583,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04317417299898807,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAssignDifferentShapesAllowed>\n***VAR /device:GPU:0\n***VAR /job:localhost/replica:0/task:0/device:GPU:0\n"
            },
            "teardown": {
                "duration": 0.0017158959963126108,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignments",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003673690080177039,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04307444300502539,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAssignments>\n"
            },
            "teardown": {
                "duration": 0.0014161709987092763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitialization",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003610339917941019,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039961200673133135,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testInitialization>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0018541669996920973,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializationOrder",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004117150092497468,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003745560097740963,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testInitializationOrder>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0015384430007543415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializerFunction",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000396878007450141,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003921790048480034,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testInitializerFunction>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0013927109976066276,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testLoad",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037922500632703304,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026879908007686026,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLoad>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py:360: Variable.load (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\nInstructions for updating:\nPrefer Variable.assign which has equivalent behavior in 2.X.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py:360: Variable.load (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\nInstructions for updating:\nPrefer Variable.assign which has equivalent behavior in 2.X.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008896.2800355,
                        "msecs": 280.0,
                        "relativeCreated": 193533.55598449707,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0016515899915248156,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testNoRefDataRace",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000376943004084751,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041806000808719546,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testNoRefDataRace>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0014711539988638833,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testOperators",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040548600372858346,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22746127199206967,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOperators>\n",
                "stderr": "2023-05-13 20:14:56.350961: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  Variable_1/Initializer/initial_value (Const) \n  Variable_1 (VarHandleOp) /device:GPU:0\n  Variable_1/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  Variable_1/Assign (AssignVariableOp) /device:GPU:0\n  Variable_1/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n  ReadVariableOp_18 (ReadVariableOp) \n  ReadVariableOp_19 (ReadVariableOp) \n\n"
            },
            "teardown": {
                "duration": 0.002337312005693093,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testResourceAssignments",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005003330006729811,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04532431000552606,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testResourceAssignments>\n"
            },
            "teardown": {
                "duration": 0.001861914002802223,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testSession",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005223630141699687,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022712513993610628,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSession>\n",
                "stderr": "2023-05-13 20:14:56.587514: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  Variable/Initializer/initial_value (Const) \n  Variable (VarHandleOp) /device:GPU:0\n  Variable/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  Variable/Assign (AssignVariableOp) /device:GPU:0\n  Variable/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n\n"
            },
            "teardown": {
                "duration": 0.001918951005791314,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testUseVariableAsTensor",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005021899996791035,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.037531510010012425,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUseVariableAsTensor>\n"
            },
            "teardown": {
                "duration": 0.0017422079981770366,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testZeroSizeVarSameAsConst",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000436632995842956,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028326729996479116,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroSizeVarSameAsConst>\n"
            },
            "teardown": {
                "duration": 0.0014246659993659705,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003951580001739785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000395866998587735,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0019699120020959526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::testAssertVariablesInitialized",
            "lineno": 366,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004294719983590767,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.058455256003071554,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAssertVariablesInitialized>\n",
                "stderr": "2023-05-13 20:14:56.708265: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  v/Initializer/initial_value (Const) \n  v (VarHandleOp) /device:GPU:0\n  v/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  v/Assign (AssignVariableOp) /device:GPU:0\n  v/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n  report_uninitialized_variables/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n\n2023-05-13 20:14:56.708337: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  w/Initializer/initial_value (Const) \n  w (VarHandleOp) /device:GPU:0\n  w/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  w/Assign (AssignVariableOp) /device:GPU:0\n  w/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n  report_uninitialized_variables/VarIsInitializedOp_1 (VarIsInitializedOp) /device:GPU:0\n\n2023-05-13 20:14:56.719935: W tensorflow/c/c_api.cc:291] Operation '{name:'w/Assign' id:10 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node w/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_INT32, validate_shape=false, _device=\"/device:GPU:0\"](w, w/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0021466319885803387,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00096875500457827,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007280870049726218,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002297625003848225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testPartitionedVariableAssignments",
            "lineno": 414,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007222059939522296,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047540300874970853,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testPartitionedVariableAssignments>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py', 415, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.002356964992941357,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testVariables",
            "lineno": 399,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007163840055000037,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004986340063624084,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testVariables>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py', 400, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00180218399327714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003842799924314022,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002841620007529855,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0024778539955150336,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random0",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008047279989114031,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2987822120048804,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random0>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0038889399875188246,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random1",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005333500012056902,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028794505007681437,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random1>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003150327000184916,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random10",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005447349976748228,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047261000145226717,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random10>\n"
            },
            "teardown": {
                "duration": 0.001988345989957452,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random11",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004939539940096438,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004739099967991933,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random11>\n"
            },
            "teardown": {
                "duration": 0.00180085698957555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random12",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042159800068475306,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004477499896893278,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random12>\n"
            },
            "teardown": {
                "duration": 0.0021784440032206476,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random13",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004283700109226629,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005069689941592515,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random13>\n"
            },
            "teardown": {
                "duration": 0.001661834990954958,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random14",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004429880063980818,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004539860092336312,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random14>\n"
            },
            "teardown": {
                "duration": 0.0016370480007026345,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random15",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004887709947070107,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040707299194764346,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random15>\n"
            },
            "teardown": {
                "duration": 0.0016563359968131408,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random16",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041464000241830945,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004009039985248819,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random16>\n"
            },
            "teardown": {
                "duration": 0.0021571020042756572,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random17",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004587370058288798,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005422459944384173,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random17>\n"
            },
            "teardown": {
                "duration": 0.0017157660040538758,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random18",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004307320050429553,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004145440034335479,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random18>\n"
            },
            "teardown": {
                "duration": 0.0016690889897290617,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random19",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046772899804636836,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004267659969627857,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random19>\n"
            },
            "teardown": {
                "duration": 0.0017115350055973977,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random2",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043510999239515513,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027000271002179943,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random2>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0039124390023062006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random20",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005685719952452928,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.057520342990756035,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random20>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004522732007899322,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random21",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007619609968969598,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.050880861992482096,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random21>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0038634449883829802,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random22",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005737379979109392,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04555763999815099,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random22>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004719813005067408,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random23",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007297849952010438,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.045616795992827974,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random23>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004442720004590228,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random24",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005755319871241227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.042989110996131785,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random24>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0037389159988379106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random25",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005073280044598505,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04117661500640679,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random25>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003739823994692415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random26",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005178730061743408,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.043406223005149513,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random26>\n***idct\n"
            },
            "teardown": {
                "duration": 0.00312012700305786,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random27",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045605799823533744,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04267954900569748,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random27>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004842930007725954,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random28",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006893030076753348,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04812862600374501,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random28>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003346151002915576,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random29",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005089210026198998,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.042631989999790676,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random29>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0030904890008969232,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random3",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004620909894583747,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024336810995009728,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random3>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0024727109994273633,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random30",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043942399497609586,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04859618098998908,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random30>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0033652470010565594,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random31",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010204569989582524,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05058536400611047,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random31>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0028912249981658533,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random32",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043808200280182064,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.046563373995013535,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random32>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0027487829938763753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random33",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004202900017844513,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04562444800103549,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random33>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0024478109990013763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random34",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036446499871090055,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.045576235992484726,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random34>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002939318001153879,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random35",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004067270056111738,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04844272299669683,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random35>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002863150992197916,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random36",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004159259988227859,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04900449499837123,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random36>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0029588460020022467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random37",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004136179923079908,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.048447117005707696,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random37>\n***idct\n"
            },
            "teardown": {
                "duration": 0.00290764999226667,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random38",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004321879969211295,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.047062869009096175,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random38>\n***idct\n"
            },
            "teardown": {
                "duration": 0.00325111199344974,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random39",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004253350052749738,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04708100399875548,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random39>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0027100830047857016,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random4",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003996919986093417,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023711380999884568,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random4>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0022775539982831106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random40",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045667000813409686,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.038574535996303894,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random40>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002716270988457836,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random41",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004195829969830811,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.039199064995045774,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random41>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0028861350001534447,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random42",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040196899499278516,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03823453500808682,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random42>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0026353419962106273,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random43",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043117399036418647,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03924972299137153,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random43>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0027753610047511756,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random44",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004715779941761866,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.039779427999746986,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random44>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0025641329993959516,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random45",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040171599539462477,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03840794900315814,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random45>\n***idct\n"
            },
            "teardown": {
                "duration": 0.00402491599379573,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random46",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038877400220371783,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03905615000985563,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random46>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0025585520052118227,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random47",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042936000681947917,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04001920401060488,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random47>\n***idct\n"
            },
            "teardown": {
                "duration": 0.00278419500682503,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random48",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003925439959857613,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04412167899135966,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random48>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004172701999777928,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random49",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004993199981981888,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04349024800467305,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random49>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004076142009580508,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random5",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047492599696852267,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024582162004662678,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random5>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0028498589963419363,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random50",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004938329948345199,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0477173440012848,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random50>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0037181039951974526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random51",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004366959910839796,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04664339699957054,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random51>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0032028689893195406,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random52",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046351199853233993,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04961662300047465,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random52>\n***idct\n"
            },
            "teardown": {
                "duration": 0.005119349007145502,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random53",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005332959990482777,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.053562724991934374,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random53>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004659375990740955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random54",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006158510077511892,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05562686300254427,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random54>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004575202998239547,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random55",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000599974999204278,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05514656999730505,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random55>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004626400987035595,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random56",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006045589980203658,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05547627700434532,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random56>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004963585990481079,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random57",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006170480046421289,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05658413599303458,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random57>\n***idct\n"
            },
            "teardown": {
                "duration": 0.005210002986132167,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random58",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006446499901358038,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05619299999671057,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random58>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004604103000019677,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random59",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005781249928986654,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05648009799188003,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random59>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004503994001424871,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random6",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006368199974531308,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03418623600737192,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random6>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0039085989992599934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random60",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005838689976371825,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.051744980009971187,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random60>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004563348993542604,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random61",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000705441998434253,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05147810599009972,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random61>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004005572001915425,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random62",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005490199982887134,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.046015542990062386,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random62>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003936025997973047,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random63",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005288840038701892,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.044679280996206217,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random63>\n***idct\n"
            },
            "teardown": {
                "duration": 0.004608374001691118,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random64",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006737169896950945,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0465296010079328,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random64>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003777707999688573,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random65",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005015609931433573,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.044690458991681226,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random65>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0036917929974151775,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random66",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005410040030255914,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05084206500032451,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random66>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003931737010134384,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random67",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005327920080162585,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04634638500283472,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random67>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0039978540007723495,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random68",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000542433001101017,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04688036999141332,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random68>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0034803790040314198,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random69",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000483023002743721,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.046158842989825644,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random69>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0036035869998158887,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random7",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004975290066795424,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027831774001242593,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random7>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003130540993879549,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random70",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047794000420253724,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04625454200140666,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random70>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0033343230024911463,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random71",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004905780078843236,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04642430700187106,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random71>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003756529011297971,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random72",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005287009989842772,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04628150699136313,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random72>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003445864000241272,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random73",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005211009993217885,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.045221031992696226,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random73>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0033984559995587915,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random74",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004647009918699041,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0452969369944185,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random74>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003148079995298758,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random75",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046965900401119143,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.043203173991059884,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random75>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003285319995484315,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random76",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004451620043255389,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04304883400618564,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random76>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0025804559991229326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random77",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004066379915457219,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.044761836994439363,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random77>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0032843250082805753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random78",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045172499085310847,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0450779629900353,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random78>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0028961149946553633,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random79",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004216759989503771,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.044286087999353185,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random79>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0032031050068326294,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random8",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043252600880805403,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02581539899983909,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random8>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002753364999080077,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random9",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004452330031199381,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025892106990795583,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random9>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0025939390034181997,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000416738010244444,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042148098873440176,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002936438992037438,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA0",
            "lineno": 75,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007451770070474595,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5275737929914612,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLargeXSmallA0>\n"
            },
            "teardown": {
                "duration": 0.002995217000716366,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA1",
            "lineno": 75,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006030730000929907,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.47933439099870156,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLargeXSmallA1>\n"
            },
            "teardown": {
                "duration": 0.0033377170038875192,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues0",
            "lineno": 86,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005966770113445818,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014049179997527972,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmallValues0>\n"
            },
            "teardown": {
                "duration": 0.003309636013000272,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues1",
            "lineno": 86,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006268110009841621,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013699261995498091,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmallValues1>\n"
            },
            "teardown": {
                "duration": 0.002560826003900729,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005274230061331764,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005244260100880638,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002095417003147304,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007189410098362714,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045889300236012787,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0018764150008792058,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_difference_multirow_2d",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004903270018985495,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.7397621429990977,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_set_difference_multirow_2d>\n"
            },
            "teardown": {
                "duration": 0.005047097001806833,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009158559987554327,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.2432553030084819,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_set_intersection_3d>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: sparse_to_dense (from tensorflow.python.ops.sparse_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nCreate a `tf.sparse.SparseTensor` and use `tf.sparse.to_dense` instead.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: sparse_to_dense (from tensorflow.python.ops.sparse_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nCreate a `tf.sparse.SparseTensor` and use `tf.sparse.to_dense` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008903.365222,
                        "msecs": 365.0,
                        "relativeCreated": 200618.7424659729,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.008756691997405142,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d_invalid_indices",
            "lineno": 91,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008151490037562326,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04641807300504297,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_set_intersection_3d_invalid_indices>\n",
                "stderr": "2023-05-13 20:15:04.550084: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at set_kernels.cc:636 : INVALID_ARGUMENT: indices[6] = [0,0,0] is out of order. Many sparse ops require sorted indices.\n    Use `tf.sparse.reorder` to create a correctly ordered copy.\n\n\n2023-05-13 20:15:04.555976: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at set_kernels.cc:636 : INVALID_ARGUMENT: indices[6] = [0,0,0] is out of order. Many sparse ops require sorted indices.\n    Use `tf.sparse.reorder` to create a correctly ordered copy.\n\n\n2023-05-13 20:15:04.562216: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at set_kernels.cc:636 : INVALID_ARGUMENT: indices[6] = [0,0,0] is out of order. Many sparse ops require sorted indices.\n    Use `tf.sparse.reorder` to create a correctly ordered copy.\n\n\n2023-05-13 20:15:04.569032: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at set_kernels.cc:636 : INVALID_ARGUMENT: indices[6] = [0,0,0] is out of order. Many sparse ops require sorted indices.\n    Use `tf.sparse.reorder` to create a correctly ordered copy.\n\n\n2023-05-13 20:15:04.575902: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at set_kernels.cc:636 : INVALID_ARGUMENT: indices[6] = [0,0,0] is out of order. Many sparse ops require sorted indices.\n    Use `tf.sparse.reorder` to create a correctly ordered copy.\n\n\n2023-05-13 20:15:04.581066: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at set_kernels.cc:636 : INVALID_ARGUMENT: indices[6] = [0,0,0] is out of order. Many sparse ops require sorted indices.\n    Use `tf.sparse.reorder` to create a correctly ordered copy.\n\n\n2023-05-13 20:15:04.586918: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at set_kernels.cc:636 : INVALID_ARGUMENT: indices[6] = [0,0,0] is out of order. Many sparse ops require sorted indices.\n    Use `tf.sparse.reorder` to create a correctly ordered copy.\n\n\n"
            },
            "teardown": {
                "duration": 0.004805282995221205,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_size_2d",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010566029959591106,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.42252484399068635,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_set_size_2d>\n"
            },
            "teardown": {
                "duration": 0.0034651559981284663,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::testIsVariableInitialized",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010983079992001876,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07080493398825638,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIsVariableInitialized>\n"
            },
            "teardown": {
                "duration": 0.002904155000578612,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007277910044649616,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008066860027611256,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002546436997363344,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testFSPath",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011377729970263317,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1306865679944167,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFSPath>\n"
            },
            "teardown": {
                "duration": 0.002505181997548789,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testGetAllVariables",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005115259991725907,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09757534999516793,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGetAllVariables>\n"
            },
            "teardown": {
                "duration": 0.0025212420005118474,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005593359965132549,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005104080046294257,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0022570919973077253,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::testLaplaceLogSurvivalFunction",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007522770029027015,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05060071400657762,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLaplaceLogSurvivalFunction>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/log_survival_function_test.py:55: Laplace.__init__ (from tensorflow.python.ops.distributions.laplace) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/log_survival_function_test.py:55: Laplace.__init__ (from tensorflow.python.ops.distributions.laplace) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008905.3619795,
                        "msecs": 361.0,
                        "relativeCreated": 202615.49997329712,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.003011502994922921,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005380049988161772,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005126839969307184,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002330956995137967,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0008105650049401447,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005695379950338975,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testMapStructure_test_mode_eager_tfapiversion_1>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0019816850108327344,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004595989885274321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0032389699917985126,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMapStructure_test_mode_eager_tfapiversion_2>\n"
            },
            "teardown": {
                "duration": 0.00208670599386096,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005002309917472303,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005301959899952635,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testMapStructure_test_mode_graph_tfapiversion_1>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002463684999383986,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004885530070168898,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014866490091662854,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMapStructure_test_mode_graph_tfapiversion_2>\n"
            },
            "teardown": {
                "duration": 0.0019891429983545095,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.002562894005677663,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006113640120020136,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0028919829928781837,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::testMapStructureUpTo",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008127629989758134,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0030344420083565637,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMapStructureUpTo>\n"
            },
            "teardown": {
                "duration": 0.002266630996018648,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005089080077596009,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005499489925568923,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0022259839897742495,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_numpy_arguments",
            "lineno": 31,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007417800079565495,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02517618100682739,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_numpy_arguments>\n"
            },
            "teardown": {
                "duration": 0.0028241469990462065,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005740040069213137,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000693801004672423,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0026603779988363385,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateful",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007138469954952598,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10082566698838491,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_stateful>\n"
            },
            "teardown": {
                "duration": 0.0028328810003586113,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateless",
            "lineno": 43,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005397350032581016,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0983276220067637,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_stateless>\n"
            },
            "teardown": {
                "duration": 0.002900175008107908,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::testParamShapes",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.000951469992287457,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09307222499046475,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testParamShapes>\n"
            },
            "teardown": {
                "duration": 0.0034043530031340197,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005164239992154762,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005568219930864871,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.0020285670034354553,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_hash_bucket",
            "lineno": 37,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007372069958364591,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011491493991343305,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_seq_ex_in_sequence_categorical_column_with_hash_bucket>\n"
            },
            "teardown": {
                "duration": 0.0036660609912360087,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_identity",
            "lineno": 32,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004855230072280392,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009061780001502484,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_seq_ex_in_sequence_categorical_column_with_identity>\n"
            },
            "teardown": {
                "duration": 0.00244816999475006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_file",
            "lineno": 48,
            "outcome": "passed",
            "setup": {
                "duration": 0.000518702989211306,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0099892370053567,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_seq_ex_in_sequence_categorical_column_with_vocabulary_file>\n"
            },
            "teardown": {
                "duration": 0.0026305519859306514,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_list",
            "lineno": 42,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005942750140093267,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008768449988565408,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_seq_ex_in_sequence_categorical_column_with_vocabulary_list>\n"
            },
            "teardown": {
                "duration": 0.0023797409958206117,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045561099250335246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004935250035487115,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002362523999181576,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007250269991345704,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048097700346261263,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0019467630045255646,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder0",
            "lineno": 208,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047690300561953336,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09547122201183811,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_placeholder0>\n"
            },
            "teardown": {
                "duration": 0.00340089199016802,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder1",
            "lineno": 208,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047318299766629934,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08085844400920905,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_placeholder1>\n"
            },
            "teardown": {
                "duration": 0.0021575340069830418,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder2",
            "lineno": 208,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048527099716011435,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09403386499616317,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_placeholder2>\n"
            },
            "teardown": {
                "duration": 0.002292727993335575,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004843150090891868,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044712499948218465,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001807808002922684,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_multiple_prints",
            "lineno": 85,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007127599965315312,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09318274501129054,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_multiple_prints>\n/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\n",
                "stderr": "x is 1\ny is 2\nx is 1\ny is 2\nx is [1 2 3]\ny is 4\nx is array([1, 2, 3])\ny is 4\n"
            },
            "teardown": {
                "duration": 0.002220124995801598,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004360579914646223,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004510489961830899,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014993549993960187,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_tf_print",
            "lineno": 95,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003639409987954423,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.031792316993232816,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_tf_print>\n",
                "stderr": "0\n0\n"
            },
            "teardown": {
                "duration": 0.0019304560119053349,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testBasic",
            "lineno": 41,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006447699997806922,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00030509199132211506,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 42, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.001671824007644318,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testExceptionsCaptured",
            "lineno": 90,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004091970040462911,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002747670077951625,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testExceptionsCaptured>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 91, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0015224789967760444,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testGracePeriod",
            "lineno": 182,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004137659998377785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002828050055541098,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testGracePeriod>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 183, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.002003900008276105,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testIgnoreMultiStarts",
            "lineno": 220,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003680540103232488,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002790540020214394,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testIgnoreMultiStarts>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 221, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0014752179995412007,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testMultipleSessions",
            "lineno": 202,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035834498703479767,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002715879963943735,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testMultipleSessions>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 203, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0014580190036213025,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testName",
            "lineno": 269,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004015589947812259,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028357599512673914,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testName>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 270, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.002160011004889384,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testQueueRunnerSerializationRoundTrip",
            "lineno": 358,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004066520050400868,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00031038999441079795,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testQueueRunnerSerializationRoundTrip>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 359, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0019225209980504587,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRealDequeueEnqueue",
            "lineno": 109,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003742740082088858,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00030765200790483505,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRealDequeueEnqueue>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 110, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.001561907003633678,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRequestStopOnException",
            "lineno": 167,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003576680028345436,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00032097200164571404,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRequestStopOnException>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 168, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.001976280997041613,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRespectCoordShouldStop",
            "lineno": 140,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00040666499990038574,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028546201065182686,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRespectCoordShouldStop>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 141, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0014999620034359396,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunners",
            "lineno": 281,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003772850031964481,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002647720102686435,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testStartQueueRunners>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 282, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.001431411990779452,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersIgnoresMonitoredSession",
            "lineno": 318,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00043484500201884657,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00031484900682698935,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testStartQueueRunnersIgnoresMonitoredSession>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 319, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0020772049902006984,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersNonDefaultGraph",
            "lineno": 335,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035589499748311937,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002737180038820952,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testStartQueueRunnersNonDefaultGraph>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 336, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0016931949940044433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersRaisesIfNotASession",
            "lineno": 302,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003953340055886656,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00030153999978210777,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testStartQueueRunnersRaisesIfNotASession>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 303, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.001503969993791543,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testThreads",
            "lineno": 239,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036538499989546835,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002812650054693222,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testThreads>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 240, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.002603668996016495,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testTwoOps",
            "lineno": 64,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036273099249228835,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00031752198992762715,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testTwoOps>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 65, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0014467430009972304,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00038574798963963985,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002641869941726327,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0017008530121529475,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_bfloat16",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006063699984224513,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000998695002635941,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnaryUfunc_bfloat16>\n"
            },
            "teardown": {
                "duration": 0.0016567650018259883,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_float8_e4m3b11",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003587660030461848,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000741216994356364,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnaryUfunc_float8_e4m3b11>\n"
            },
            "teardown": {
                "duration": 0.0019752429943764582,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testBasic",
            "lineno": 23,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005712990096071735,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0054946649906923994,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic>\n"
            },
            "teardown": {
                "duration": 0.0017758559988578781,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testDType",
            "lineno": 78,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003831729991361499,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02622817699739244,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDType>\n"
            },
            "teardown": {
                "duration": 0.0034957349998876452,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testEmpty",
            "lineno": 50,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005640649906126782,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0034333160001551732,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmpty>\n"
            },
            "teardown": {
                "duration": 0.001955717001692392,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testLimitOnly",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038328599475789815,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018856470996979624,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLimitOnly>\n"
            },
            "teardown": {
                "duration": 0.0015885949978837743,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testMixedDType",
            "lineno": 160,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039975999970920384,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0053780519956490025,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMixedDType>\n"
            },
            "teardown": {
                "duration": 0.0020175870013190433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNegativeDelta",
            "lineno": 70,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040567200630903244,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007853800998418592,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNegativeDelta>\n"
            },
            "teardown": {
                "duration": 0.002129683009115979,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNonInteger",
            "lineno": 54,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003837340045720339,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009296535004978068,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNonInteger>\n"
            },
            "teardown": {
                "duration": 0.0018142750050174072,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00041399399924557656,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038388799293898046,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002048362002824433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testEmitDifferentStructureThanCellOutput",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006152999994810671,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00035107400617562234,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testEmitDifferentStructureThanCellOutput>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.001603053999133408,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopState",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00033578700094949454,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002717130118981004,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testLoopState>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0013847829977748916,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopStateWithTensorArray",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039694999577477574,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00036907299363519996,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testLoopStateWithTensorArray>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0019136320042889565,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNN",
            "lineno": 175,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003319059906061739,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00029018100758548826,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRawRNN>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/raw_rnn_test.py', 176, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0015676460025133565,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNScope",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039115500112529844,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003108529926976189,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRawRNNScope>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0014336499880300835,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNZeroLength",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003365699958521873,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00027852899802383035,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRawRNNZeroLength>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0018376700027147308,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003896129928762093,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002403210091870278,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.001460947998566553,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testInputOnGPUCellNotDeclared",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004525399999693036,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004586389986798167,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testInputOnGPUCellNotDeclared>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0013027349923504516,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnCPU",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034161200164817274,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004294499958632514,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRNNOnCPUCellOnCPU>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0014036749926162884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnGPU",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003476349957054481,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037124499795027077,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRNNOnCPUCellOnGPU>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0017615140095585957,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003931600076612085,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039660999027546495,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016535959875909612,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::testReduceLogSumExp",
            "lineno": 29,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005392390012275428,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08232196400058456,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReduceLogSumExp>\n"
            },
            "teardown": {
                "duration": 0.002511128011974506,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00040741100383456796,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000385370003641583,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017702469922369346,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testNegAxes",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005650750099448487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009635103997425176,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNegAxes>\n"
            },
            "teardown": {
                "duration": 0.0014717510057380423,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testSimple",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003778259997488931,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008976102006272413,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSimple>\n"
            },
            "teardown": {
                "duration": 0.0014872909960104153,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testZeros",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003542040067259222,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009302346996264532,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeros>\n"
            },
            "teardown": {
                "duration": 0.0016156560013769194,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003593860019464046,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00035950700112152845,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016520329954801127,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::testBasic",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005096700042486191,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011673348999465816,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic>\n"
            },
            "teardown": {
                "duration": 0.0013719650014536455,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003594409936340526,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00036980000732000917,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001574274996528402,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::testBasic",
            "lineno": 114,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046189500426407903,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005886029975954443,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic>\n"
            },
            "teardown": {
                "duration": 0.0016478850011480972,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036475899105425924,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00034498400054872036,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0018287780112586915,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00048074699589051306,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003834730014204979,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0013935519964434206,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testAxesType",
            "lineno": 443,
            "outcome": "passed",
            "setup": {
                "duration": 0.000395269991713576,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0031779819983057678,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAxesType>\n"
            },
            "teardown": {
                "duration": 0.0016177719953702763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testComplex64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003592830034904182,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.159566675996757,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testComplex64>\n"
            },
            "teardown": {
                "duration": 0.004371383009129204,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testDegenerate",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005605589976767078,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03403806401183829,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDegenerate>\n"
            },
            "teardown": {
                "duration": 0.002397686999756843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006801299896324053,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.040742217999650165,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmptyGradients>\n"
            },
            "teardown": {
                "duration": 0.003326984995510429,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009123389900196344,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.407682537988876,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat32>\n"
            },
            "teardown": {
                "duration": 0.0033734000026015565,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005050089966971427,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.474335642007645,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat64>\n"
            },
            "teardown": {
                "duration": 0.0034174119937233627,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046957800805103034,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.7492855719901854,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient>\n"
            },
            "teardown": {
                "duration": 0.003235266005503945,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInfinity",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005713599966838956,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3131316260114545,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfinity>\n"
            },
            "teardown": {
                "duration": 0.002142249999451451,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInt32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005194060067879036,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.175965158996405,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt32>\n"
            },
            "teardown": {
                "duration": 0.0030727639968972653,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt16",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047516499762423337,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10516300800372846,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSizeOverflowInt16>\n"
            },
            "teardown": {
                "duration": 0.0020967680029571056,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt8",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005200800078455359,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10372898700006772,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSizeOverflowInt8>\n"
            },
            "teardown": {
                "duration": 0.0021008790063206106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint16",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004901329957647249,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5388666010112502,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSizeOverflowUint16>\n"
            },
            "teardown": {
                "duration": 0.00237568499869667,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint8",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005139980057720095,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11959195100644138,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSizeOverflowUint8>\n"
            },
            "teardown": {
                "duration": 0.0025437069998588413,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testUint8",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006210190040292218,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.4418413059902377,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUint8>\n"
            },
            "teardown": {
                "duration": 0.004019699990749359,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005118980043334886,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005453249905258417,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001953977989614941,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testAxesType",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004962530074408278,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02404243800265249,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAxesType>\n"
            },
            "teardown": {
                "duration": 0.0031977769976947457,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testComplex64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005788620037492365,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.390707686005044,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testComplex64>\n"
            },
            "teardown": {
                "duration": 0.005619848001515493,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006467789935413748,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.344093961000908,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat32>\n"
            },
            "teardown": {
                "duration": 0.005709275996196084,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006379089900292456,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.0214023389999056,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat64>\n"
            },
            "teardown": {
                "duration": 0.0036750180006492883,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.001997997998842038,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.839850504999049,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient>\n"
            },
            "teardown": {
                "duration": 0.0033869670005515218,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInfinity",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005346880061551929,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20110856600513216,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfinity>\n"
            },
            "teardown": {
                "duration": 0.001865133992396295,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInt32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000493129002279602,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.2591296339960536,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt32>\n"
            },
            "teardown": {
                "duration": 0.0035279989970149472,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testSingleton",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000451859988970682,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05700948000594508,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSingleton>\n"
            },
            "teardown": {
                "duration": 0.0015461020084330812,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005323389923432842,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004760659940075129,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001682491012616083,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testAxesType",
            "lineno": 650,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004761649906868115,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006926032001501881,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAxesType>\n"
            },
            "teardown": {
                "duration": 0.0019044120126636699,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testComplex64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035962498805020005,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.462973052999587,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testComplex64>\n"
            },
            "teardown": {
                "duration": 0.00363819400081411,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testDegenerate",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005243980122031644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029798262010444887,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDegenerate>\n"
            },
            "teardown": {
                "duration": 0.0018065740005113184,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004727180057670921,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05499956100538839,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmptyGradients>\n"
            },
            "teardown": {
                "duration": 0.0020631640072679147,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046224599645938724,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.337741574010579,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat32>\n"
            },
            "teardown": {
                "duration": 0.003810448994045146,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005055239889770746,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.252241637004772,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat64>\n"
            },
            "teardown": {
                "duration": 0.0036842499976046383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testGradientWithZeros",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047213998914230615,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.627974076996907,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradientWithZeros>\n"
            },
            "teardown": {
                "duration": 0.006055922000086866,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInfinity",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009200780041282997,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24842629399790894,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfinity>\n"
            },
            "teardown": {
                "duration": 0.002540678993682377,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005022060067858547,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9758965850051027,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt32>\n"
            },
            "teardown": {
                "duration": 0.0028832440002588555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004547540011117235,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9816456550033763,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt64>\n"
            },
            "teardown": {
                "duration": 0.004551289996015839,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006698870129184797,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005356649926397949,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0025601009983802214,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testAxesType",
            "lineno": 767,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005059399991296232,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01042077800957486,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAxesType>\n"
            },
            "teardown": {
                "duration": 0.003623987009632401,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testDoubleReduce3D",
            "lineno": 796,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005803579988423735,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027640128013445064,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDoubleReduce3D>\n"
            },
            "teardown": {
                "duration": 0.004025689995614812,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005925129953538999,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03467977300169878,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmptyGradients>\n"
            },
            "teardown": {
                "duration": 0.0025274749932577834,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testFloatReduce3D",
            "lineno": 782,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005487149901455268,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02552773900970351,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatReduce3D>\n"
            },
            "teardown": {
                "duration": 0.004197661008220166,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005633000109810382,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1149975909938803,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient>\n"
            },
            "teardown": {
                "duration": 0.0025586800038581714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient2",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005649619997711852,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11611784099659417,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient2>\n"
            },
            "teardown": {
                "duration": 0.003550800000084564,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient3",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005467709997901693,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10940658899198752,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient3>\n"
            },
            "teardown": {
                "duration": 0.002376937001827173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient4",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005076959932921454,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.098300495010335,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient4>\n"
            },
            "teardown": {
                "duration": 0.0026363000069977716,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testSpecialValues",
            "lineno": 774,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005981980066280812,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.41915128199616447,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSpecialValues>\n"
            },
            "teardown": {
                "duration": 0.004074193013366312,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004813299892703071,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048490600602235645,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017816789913922548,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testAxesType",
            "lineno": 884,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043675099732354283,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006211145999259315,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAxesType>\n"
            },
            "teardown": {
                "duration": 0.002167111000744626,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testDoubleReduce3D",
            "lineno": 927,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003610809944802895,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02828448699438013,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDoubleReduce3D>\n"
            },
            "teardown": {
                "duration": 0.002481261995853856,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035950299934484065,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02848733199061826,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmptyGradients>\n"
            },
            "teardown": {
                "duration": 0.0014631099911639467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testFloatReduce3D",
            "lineno": 913,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004222690040478483,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020910840001306497,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatReduce3D>\n"
            },
            "teardown": {
                "duration": 0.003100875997915864,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003782540006795898,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09155032401031349,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient>\n"
            },
            "teardown": {
                "duration": 0.001724970992654562,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient2",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004810999962501228,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1085415729903616,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient2>\n"
            },
            "teardown": {
                "duration": 0.001833404996432364,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient3",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004365150089142844,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10208654600137379,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient3>\n"
            },
            "teardown": {
                "duration": 0.0022235360083868727,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient4",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046433300303760916,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09153216300182976,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient4>\n"
            },
            "teardown": {
                "duration": 0.0018035379907814786,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testInt64Reduce3D",
            "lineno": 899,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004500229988479987,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021673019000445493,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt64Reduce3D>\n"
            },
            "teardown": {
                "duration": 0.0023849779972806573,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testSpecialValues",
            "lineno": 891,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041008299740497023,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.42059577800682746,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSpecialValues>\n"
            },
            "teardown": {
                "duration": 0.004640034007024951,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006449430075008422,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005550399946514517,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002233613995485939,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAll3D",
            "lineno": 1025,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004944880056427792,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0400149150082143,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAll3D>\n"
            },
            "teardown": {
                "duration": 0.003747442999156192,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAxesType",
            "lineno": 1017,
            "outcome": "passed",
            "setup": {
                "duration": 0.000656772986985743,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007438319007633254,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAxesType>\n"
            },
            "teardown": {
                "duration": 0.002797127002850175,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testEmpty",
            "lineno": 1039,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004927340050926432,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010334018006687984,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmpty>\n"
            },
            "teardown": {
                "duration": 0.0029732849943684414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005820130027132109,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005292100104270503,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002155788999516517,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAll3D",
            "lineno": 1074,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005267090018605813,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.039356766996206716,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAll3D>\n"
            },
            "teardown": {
                "duration": 0.0036311110015958548,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAxesType",
            "lineno": 1066,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005125839961692691,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007094273998518474,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAxesType>\n"
            },
            "teardown": {
                "duration": 0.0034199820074718446,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testEmpty",
            "lineno": 1088,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005414170009316877,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009569556001224555,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmpty>\n"
            },
            "teardown": {
                "duration": 0.002886390997446142,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005577980045927688,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004851929988944903,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002202552990638651,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testBoolReduce1D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005396719934651628,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2722055159974843,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBoolReduce1D>\n"
            },
            "teardown": {
                "duration": 0.0028963210061192513,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testDegenerate",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005904089921386912,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.040793533000396565,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDegenerate>\n"
            },
            "teardown": {
                "duration": 0.002958457000204362,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testExpand",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006298440130194649,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11565983098989818,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testExpand>\n"
            },
            "teardown": {
                "duration": 0.002269768010592088,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce1D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005652719992212951,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1061355830024695,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatReduce1D>\n"
            },
            "teardown": {
                "duration": 0.002119444005074911,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce4D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004755449917865917,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7476819129951764,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatReduce4D>\n"
            },
            "teardown": {
                "duration": 0.002774116990622133,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce",
            "lineno": 1168,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004860960034420714,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011447009004768915,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStringReduce>\n"
            },
            "teardown": {
                "duration": 0.0027070090000052005,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce1D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004517960041994229,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07392167201032862,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStringReduce1D>\n"
            },
            "teardown": {
                "duration": 0.0024794719938654453,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce2D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004916369944112375,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10915748700790573,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStringReduce2D>\n"
            },
            "teardown": {
                "duration": 0.0016582149983150885,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044874599552713335,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043693100451491773,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017497850058134645,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testBoolBasic",
            "lineno": 79,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006740899989381433,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009599910990800709,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBoolBasic>\n"
            },
            "teardown": {
                "duration": 0.002078421995975077,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testComplex64Basic",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004367660003481433,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008905352995498106,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testComplex64Basic>\n"
            },
            "teardown": {
                "duration": 0.002556542996899225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testDoubleBasic",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039675399602856487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009701508999569342,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDoubleBasic>\n"
            },
            "teardown": {
                "duration": 0.002261199988424778,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testErrors",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003794229996856302,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0033156229910673574,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testErrors>\n"
            },
            "teardown": {
                "duration": 0.0016991709999274462,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatBasic",
            "lineno": 86,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036465199082158506,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010411109004053287,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatBasic>\n"
            },
            "teardown": {
                "duration": 0.0024048469931585714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatEmpty",
            "lineno": 153,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042831800237763673,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023841757996706292,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatEmpty>\n"
            },
            "teardown": {
                "duration": 0.002700907993130386,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeGradThreeDimensions",
            "lineno": 137,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004597999941324815,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0935055729933083,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatReshapeGradThreeDimensions>\n"
            },
            "teardown": {
                "duration": 0.003031991989701055,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeThreeDimensions",
            "lineno": 106,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005391180020524189,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011031344998627901,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatReshapeThreeDimensions>\n"
            },
            "teardown": {
                "duration": 0.0027927860064664856,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimBegin",
            "lineno": 114,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045849100570194423,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010056309009087272,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatUnspecifiedDimBegin>\n"
            },
            "teardown": {
                "duration": 0.0025463120109634474,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimEnd",
            "lineno": 118,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047441500646527857,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010324090995709412,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatUnspecifiedDimEnd>\n"
            },
            "teardown": {
                "duration": 0.0025577149935998023,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimOnly",
            "lineno": 110,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004527070123003796,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00972537900088355,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatUnspecifiedDimOnly>\n"
            },
            "teardown": {
                "duration": 0.002358134006499313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt32Basic",
            "lineno": 94,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043066201033070683,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008208415005356073,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt32Basic>\n"
            },
            "teardown": {
                "duration": 0.002447266990202479,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt64Shape",
            "lineno": 250,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046039000153541565,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.3980775370000629,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 1156,
                    "message": "numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.33 GiB for an array with shape (2500000000,) and data type bool"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/reshape_test.py",
                        "lineno": 256,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/contextlib.py",
                        "lineno": 142,
                        "message": "in __exit__"
                    },
                    {
                        "path": "src/utils/timer_wrapper.py",
                        "lineno": 100,
                        "message": "in tensorflow_op_timer"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1156,
                        "message": "MemoryError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testInt64Shape>\n",
                "stderr": "2023-05-13 20:15:58.497084: W tensorflow/tsl/framework/cpu_allocator_impl.cc:82] Allocation of 2500000000 exceeds 10% of free system memory.\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.reshape_test.ReshapeTest testMethod=testInt64Shape>\n\n    def testInt64Shape(self):\n      # with ops.device(\"/device:CPU:0\"):\n      x = array_ops.zeros([50000, 50000], dtype=dtypes.bool)\n      # Provide dimension larger than int32\n      timer = tensorflow_op_timer()\n>     with timer:\n\nsrc/tensorflow_tests_reduced/reshape_test.py:256: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../miniconda3/lib/python3.10/contextlib.py:142: in __exit__\n    next(self.gen)\nsrc/utils/timer_wrapper.py:100: in tensorflow_op_timer\n    result.numpy()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tf.Tensor: shape=(2500000000,), dtype=bool, numpy=array([False, False, False, ..., False, False, False])>\n\n    def numpy(self):\n      \"\"\"Copy of the contents of this Tensor into a NumPy array or scalar.\n    \n      Unlike NumPy arrays, Tensors are immutable, so this method has to copy\n      the contents to ensure safety. Use `memoryview` to get a readonly\n      view of the contents without doing a copy:\n    \n      >>> t = tf.constant([42])\n      >>> np.array(memoryview(t))\n      array([42], dtype=int32)\n    \n      Note that `memoryview` is only zero-copy for Tensors on CPU. If a Tensor\n      is on GPU, it will have to be transferred to CPU first in order for\n      `memoryview` to work.\n    \n      Returns:\n        A NumPy array of the same shape and dtype or a NumPy scalar, if this\n        Tensor has rank 0.\n    \n      Raises:\n        ValueError: If the dtype of this Tensor does not have a compatible\n          NumPy dtype.\n      \"\"\"\n      # TODO(slebedev): Consider avoiding a copy for non-CPU or remote tensors.\n      maybe_arr = self._numpy()  # pylint: disable=protected-access\n>     return maybe_arr.copy() if isinstance(maybe_arr, np.ndarray) else maybe_arr\nE     numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.33 GiB for an array with shape (2500000000,) and data type bool\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:1156: MemoryError"
            },
            "teardown": {
                "duration": 0.0028386970079736784,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testPartialShapes",
            "lineno": 179,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004499200003920123,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009472848993027583,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartialShapes>\n"
            },
            "teardown": {
                "duration": 0.0014350389974424616,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testTensorShape",
            "lineno": 235,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039616400317754596,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006112717994255945,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTensorShape>\n"
            },
            "teardown": {
                "duration": 0.001571868997416459,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimBasic",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040831899968907237,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009978037007385865,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroDimBasic>\n"
            },
            "teardown": {
                "duration": 0.0016951019933912903,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR1",
            "lineno": 126,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035944199771620333,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007672161998925731,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroDimReshapeR1>\n"
            },
            "teardown": {
                "duration": 0.0016521749930689111,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR3",
            "lineno": 130,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003903920005541295,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007785494002746418,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroDimReshapeR3>\n"
            },
            "teardown": {
                "duration": 0.001770517003023997,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimWithUnspecifiedDim",
            "lineno": 162,
            "outcome": "passed",
            "setup": {
                "duration": 0.000405245998990722,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006113486000685953,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroDimWithUnspecifiedDim>\n"
            },
            "teardown": {
                "duration": 0.0019570279982872307,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00037728800089098513,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042914900404866785,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001970697005162947,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005921560077695176,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003768889873754233,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014746050001122057,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::testSerializeRestore",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043863701284863055,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08279700600542128,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSerializeRestore>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py:148: IdentityReader.__init__ (from tensorflow.python.ops.io_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nQueue-based input pipelines have been replaced by `tf.data`. Use `tf.data.Dataset.map(...)`.\n2023-05-13 20:16:00.012325: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReaderNumRecordsProducedV2: CPU \nIdentityReaderV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  test_reader (IdentityReaderV2) /device:GPU:0\n  ReaderNumRecordsProducedV2 (ReaderNumRecordsProducedV2) \n\n2023-05-13 20:16:00.055088: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at reader_ops.cc:227 : INVALID_ARGUMENT: Could not parse state for IdentityReader 'test_reader': \\001\\020\\001\\030\\001\\\"\\001X\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_4' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 187, in testSerializeRestore\n      self.evaluate(reader.restore_state(state[1:]))\nNode: 'ReaderRestoreStateV2_4'\nCould not parse state for IdentityReader 'test_reader': \\001\\020\\001\\030\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_4}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_4':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 187, in testSerializeRestore\n    self.evaluate(reader.restore_state(state[1:]))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n2023-05-13 20:16:00.063478: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at reader_ops.cc:227 : INVALID_ARGUMENT: Could not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_5' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 191, in testSerializeRestore\n      self.evaluate(reader.restore_state(state[:-1]))\nNode: 'ReaderRestoreStateV2_5'\nCould not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001\n\t [[{{node ReaderRestoreStateV2_5}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_5':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 191, in testSerializeRestore\n    self.evaluate(reader.restore_state(state[:-1]))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n2023-05-13 20:16:00.069083: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at reader_ops.cc:227 : INVALID_ARGUMENT: Could not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001XExtraJunk\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_6' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 195, in testSerializeRestore\n      self.evaluate(reader.restore_state(state + b\"ExtraJunk\"))\nNode: 'ReaderRestoreStateV2_6'\nCould not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001XExtraJunk\n\t [[{{node ReaderRestoreStateV2_6}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_6':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 195, in testSerializeRestore\n    self.evaluate(reader.restore_state(state + b\"ExtraJunk\"))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n2023-05-13 20:16:00.074799: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at reader_ops.cc:227 : INVALID_ARGUMENT: Could not parse state for IdentityReader 'test_reader': PREFIX\\010\\001\\020\\001\\030\\001\\\"\\001X\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_7' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 199, in testSerializeRestore\n      self.evaluate(reader.restore_state(b\"PREFIX\" + state))\nNode: 'ReaderRestoreStateV2_7'\nCould not parse state for IdentityReader 'test_reader': PREFIX\\010\\001\\020\\001\\030\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_7}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_7':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 199, in testSerializeRestore\n    self.evaluate(reader.restore_state(b\"PREFIX\" + state))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n2023-05-13 20:16:00.080389: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at reader_ops.cc:227 : INVALID_ARGUMENT: Could not parse state for IdentityReader 'test_reader': BOGUS\\001\\\"\\001X\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_8' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 203, in testSerializeRestore\n      self.evaluate(reader.restore_state(b\"BOGUS\" + state[5:]))\nNode: 'ReaderRestoreStateV2_8'\nCould not parse state for IdentityReader 'test_reader': BOGUS\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_8}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_8':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 203, in testSerializeRestore\n    self.evaluate(reader.restore_state(b\"BOGUS\" + state[5:]))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py:148: IdentityReader.__init__ (from tensorflow.python.ops.io_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nQueue-based input pipelines have been replaced by `tf.data`. Use `tf.data.Dataset.map(...)`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684008959.999859,
                        "msecs": 999.0,
                        "relativeCreated": 257253.37958335876,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_4' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 187, in testSerializeRestore\n      self.evaluate(reader.restore_state(state[1:]))\nNode: 'ReaderRestoreStateV2_4'\nCould not parse state for IdentityReader 'test_reader': \\001\\020\\001\\030\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_4}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_4':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 187, in testSerializeRestore\n    self.evaluate(reader.restore_state(state[1:]))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008960.0582368,
                        "msecs": 58.0,
                        "relativeCreated": 257311.7573261261,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_5' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 191, in testSerializeRestore\n      self.evaluate(reader.restore_state(state[:-1]))\nNode: 'ReaderRestoreStateV2_5'\nCould not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001\n\t [[{{node ReaderRestoreStateV2_5}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_5':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 191, in testSerializeRestore\n    self.evaluate(reader.restore_state(state[:-1]))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008960.0646756,
                        "msecs": 64.0,
                        "relativeCreated": 257318.19605827332,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_6' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 195, in testSerializeRestore\n      self.evaluate(reader.restore_state(state + b\"ExtraJunk\"))\nNode: 'ReaderRestoreStateV2_6'\nCould not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001XExtraJunk\n\t [[{{node ReaderRestoreStateV2_6}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_6':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 195, in testSerializeRestore\n    self.evaluate(reader.restore_state(state + b\"ExtraJunk\"))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008960.0701964,
                        "msecs": 70.0,
                        "relativeCreated": 257323.716878891,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_7' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 199, in testSerializeRestore\n      self.evaluate(reader.restore_state(b\"PREFIX\" + state))\nNode: 'ReaderRestoreStateV2_7'\nCould not parse state for IdentityReader 'test_reader': PREFIX\\010\\001\\020\\001\\030\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_7}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_7':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 199, in testSerializeRestore\n    self.evaluate(reader.restore_state(b\"PREFIX\" + state))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008960.0758796,
                        "msecs": 75.0,
                        "relativeCreated": 257329.40006256104,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_8' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 203, in testSerializeRestore\n      self.evaluate(reader.restore_state(b\"BOGUS\" + state[5:]))\nNode: 'ReaderRestoreStateV2_8'\nCould not parse state for IdentityReader 'test_reader': BOGUS\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_8}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_8':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 203, in testSerializeRestore\n    self.evaluate(reader.restore_state(b\"BOGUS\" + state[5:]))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684008960.0814636,
                        "msecs": 81.0,
                        "relativeCreated": 257334.98406410217,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0017971199995372444,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004383999912533909,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046111199480947107,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014314120053313673,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testAutoConvertAndCheckData",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006238719943212345,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004066499968757853,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testAutoConvertAndCheckData>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0017350980051560327,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildCostModel",
            "lineno": 1812,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033859399263747036,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.096800428989809,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBuildCostModel>\n"
            },
            "teardown": {
                "duration": 0.0020777360041392967,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDirect",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004626519948942587,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005111460050102323,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBuildGraphErrorDirect>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0017759100010152906,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDist",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004641980049200356,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045162699825596064,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBuildGraphErrorDist>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.001974565995624289,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultGraph",
            "lineno": 1200,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043103199277538806,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03566717701323796,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDefaultGraph>\n"
            },
            "teardown": {
                "duration": 0.0017239459994016215,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultServerTimeout",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045833599870093167,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046785001177340746,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testDefaultServerTimeout>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0015503339964197949,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDuplicatedInputs",
            "lineno": 1496,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044812800479121506,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014187153006787412,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDuplicatedInputs>\n"
            },
            "teardown": {
                "duration": 0.0017210910009453073,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testErrorsReported",
            "lineno": 123,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038198899710550904,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009073123001144268,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testErrorsReported>\n"
            },
            "teardown": {
                "duration": 0.001538241995149292,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithGroupBy",
            "lineno": 1175,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004110100126126781,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0328600969951367,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testExtendWithGroupBy>\n",
                "stderr": "2023-05-13 20:16:00.289724: W tensorflow/c/c_api.cc:291] Operation '{name:'testExtendWithGroupBy_p/Assign' id:5 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node testExtendWithGroupBy_p/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](testExtendWithGroupBy_p, Const)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0037548649997916073,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatefulOperations",
            "lineno": 1147,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004737679992103949,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03601153699855786,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testExtendWithStatefulOperations>\n"
            },
            "teardown": {
                "duration": 0.0019414059934206307,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatelessOperations",
            "lineno": 1127,
            "outcome": "passed",
            "setup": {
                "duration": 0.000454249995527789,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020058456997503527,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testExtendWithStatelessOperations>\n"
            },
            "teardown": {
                "duration": 0.002242189002572559,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedAndFetch",
            "lineno": 1509,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044300200534053147,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.497579830000177,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedAndFetch>\n"
            },
            "teardown": {
                "duration": 0.002426357998047024,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedDictKeyException",
            "lineno": 1788,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005502649873960763,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010357117003877647,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedDictKeyException>\n"
            },
            "teardown": {
                "duration": 0.0021083799947518855,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedError",
            "lineno": 1598,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005088669859105721,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011767335003241897,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedError>\n"
            },
            "teardown": {
                "duration": 0.002019931998802349,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlices",
            "lineno": 988,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004965109983459115,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024548161003622226,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedIndexedSlices>\n"
            },
            "teardown": {
                "duration": 0.0023238400026457384,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlicesWithoutDenseShape",
            "lineno": 1086,
            "outcome": "passed",
            "setup": {
                "duration": 0.000586782000027597,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02268468399415724,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedIndexedSlicesWithoutDenseShape>\n"
            },
            "teardown": {
                "duration": 0.002338694001082331,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedPrecisionLossError",
            "lineno": 1611,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005088680045446381,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012126736997743137,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedPrecisionLossError>\n"
            },
            "teardown": {
                "duration": 0.0025069240073207766,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedShapeCompatibility",
            "lineno": 1795,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005138249980518594,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023387520006508566,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedShapeCompatibility>\n"
            },
            "teardown": {
                "duration": 0.002530443001887761,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholder",
            "lineno": 823,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005526899913093075,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024665352000738494,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedSparsePlaceholder>\n"
            },
            "teardown": {
                "duration": 0.00326887599658221,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderConstantShape",
            "lineno": 912,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005458390078274533,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03025782799522858,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedSparsePlaceholderConstantShape>\n"
            },
            "teardown": {
                "duration": 0.0028835510020144284,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderPartialShape",
            "lineno": 867,
            "outcome": "passed",
            "setup": {
                "duration": 0.000615072000073269,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027433609997387975,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedSparsePlaceholderPartialShape>\n"
            },
            "teardown": {
                "duration": 0.003525136999087408,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparseTensor",
            "lineno": 757,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007551970047643408,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026142172995605506,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedSparseTensor>\n"
            },
            "teardown": {
                "duration": 0.0023329480027314276,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchAttrs",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00047843900392763317,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000573206998524256,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testFetchAttrs>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0019425979990046471,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchByNameDifferentStringTypes",
            "lineno": 1663,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005242790066404268,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.040427458996418864,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchByNameDifferentStringTypes>\n"
            },
            "teardown": {
                "duration": 0.0026924929989036173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchDict",
            "lineno": 241,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006134319992270321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01467892799701076,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchDict>\n"
            },
            "teardown": {
                "duration": 0.001897024005302228,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlices",
            "lineno": 937,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007290490029845387,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021310922005795874,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchIndexedSlices>\n"
            },
            "teardown": {
                "duration": 0.0021621959895128384,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlicesWithoutDenseShape",
            "lineno": 1036,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005110839992994443,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01890599499165546,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchIndexedSlicesWithoutDenseShape>\n"
            },
            "teardown": {
                "duration": 0.0021641300118062645,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchList",
            "lineno": 181,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006042969907866791,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.031014424996101297,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchList>\n"
            },
            "teardown": {
                "duration": 0.0029127570014679804,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNamedTuple",
            "lineno": 217,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007636189984623343,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01797663400066085,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchNamedTuple>\n"
            },
            "teardown": {
                "duration": 0.0030118050053715706,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestedAttrs",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007778870058245957,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006201690121088177,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testFetchNestedAttrs>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.002303304005181417,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingEmptyOneLevel",
            "lineno": 360,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006322289991658181,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014839148992905393,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchNestingEmptyOneLevel>\n"
            },
            "teardown": {
                "duration": 0.002199476002715528,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingOneLevel",
            "lineno": 391,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006569110119016841,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019729124993318692,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchNestingOneLevel>\n"
            },
            "teardown": {
                "duration": 0.002048759997705929,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNone",
            "lineno": 132,
            "outcome": "passed",
            "setup": {
                "duration": 0.00050273300439585,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010447331995237619,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchNone>\n"
            },
            "teardown": {
                "duration": 0.0021563499904004857,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOperationObject",
            "lineno": 643,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005479009996633977,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02619591100665275,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchOperationObject>\n"
            },
            "teardown": {
                "duration": 0.0020032750035170466,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOrderedDict",
            "lineno": 256,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005583099991781637,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018232407004688866,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchOrderedDict>\n"
            },
            "teardown": {
                "duration": 0.0018185109947808087,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchScalar",
            "lineno": 603,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004274499951861799,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05683299699740019,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchScalar>\n"
            },
            "teardown": {
                "duration": 0.002546083997003734,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingleton",
            "lineno": 145,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007175560022005811,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018086670999764465,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchSingleton>\n"
            },
            "teardown": {
                "duration": 0.0026865200052270666,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingletonByName",
            "lineno": 166,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005811360024381429,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015983196994056925,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchSingletonByName>\n"
            },
            "teardown": {
                "duration": 0.002182495009037666,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSparseTensor",
            "lineno": 658,
            "outcome": "passed",
            "setup": {
                "duration": 0.000619273996562697,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02839244199276436,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchSparseTensor>\n"
            },
            "teardown": {
                "duration": 0.0022007270017638803,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTensorObject",
            "lineno": 552,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048124699969775975,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026250772003550082,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchTensorObject>\n"
            },
            "teardown": {
                "duration": 0.0023023599933367223,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTuple",
            "lineno": 200,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006465190090239048,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016044350995798595,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchTuple>\n"
            },
            "teardown": {
                "duration": 0.0020708810043288395,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testIncorrectGraph",
            "lineno": 1760,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004746810009237379,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026783491994137876,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIncorrectGraph>\n"
            },
            "teardown": {
                "duration": 0.002461561991367489,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testLocalMasterSessionTimeout",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005135590035934001,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006026699993526563,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testLocalMasterSessionTimeout>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.002141763994586654,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMakeCallableOnOperationWithRunOptions",
            "lineno": 1574,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006902340101078153,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.755920233001234,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMakeCallableOnOperationWithRunOptions>\n",
                "stderr": "2023-05-13 20:16:01.660245: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcupti.so.11.2'; dlerror: libcupti.so.11.2: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/cuda/lib64:/usr/local/nccl2/lib:/usr/local/cuda/extras/CUPTI/lib64\n"
            },
            "teardown": {
                "duration": 0.016441339001175947,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMultipleInteractiveSessionsWarning",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007930209976620972,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0040290690085384995,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testMultipleInteractiveSessionsWarning>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.008501046992023475,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDirect",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006654430035268888,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000651561000267975,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testOutputPartitionGraphsDirect>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0024280349898617715,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDistributed",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000468616999569349,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006624410016229376,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testOutputPartitionGraphsDistributed>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00215706299059093,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRegisterFetchAndFeedConversionFunctions",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006502559990622103,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006150989938760176,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRegisterFetchAndFeedConversionFunctions>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00260872500075493,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRunFeedDict",
            "lineno": 1338,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006355369987431914,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10631249500147533,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRunFeedDict>\n"
            },
            "teardown": {
                "duration": 0.0021918400016147643,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testSessionInterOpThreadPool",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.000644176994683221,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.052144863991998136,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSessionInterOpThreadPool>\n***INP /device:GPU:0\n"
            },
            "teardown": {
                "duration": 0.0037134189915377647,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testStringFeed",
            "lineno": 1629,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008466949948342517,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07538690698856954,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStringFeed>\n"
            },
            "teardown": {
                "duration": 0.0026804819935932755,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testTimeoutWithShortOperations",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006636110047111288,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006700070080114529,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testTimeoutWithShortOperations>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0023343140055658296,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterClose",
            "lineno": 1372,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007004340004641563,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015473773994017392,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUseAfterClose>\n"
            },
            "teardown": {
                "duration": 0.0018781010003294796,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterCloseConcurrent",
            "lineno": 1381,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006008149939589202,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1784509459976107,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUseAfterCloseConcurrent>\n"
            },
            "teardown": {
                "duration": 0.003239370009396225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseEmptyGraph",
            "lineno": 1401,
            "outcome": "passed",
            "setup": {
                "duration": 0.000678106996929273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010305204996257089,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUseEmptyGraph>\n"
            },
            "teardown": {
                "duration": 0.0024672099971212447,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005354620079742745,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004985749983461574,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0031785510072950274,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testDtypes",
            "lineno": 101,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007096900080796331,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05173228000057861,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDtypes>\n"
            },
            "teardown": {
                "duration": 0.0034347099863225594,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testExceptions",
            "lineno": 41,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006473250105045736,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003024762001587078,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testExceptions>\n"
            },
            "teardown": {
                "duration": 0.0022847050131531432,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalDtypeWithoutMaxlen",
            "lineno": 57,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005416350031737238,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027283055998850614,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOneDimensionalDtypeWithoutMaxlen>\n"
            },
            "teardown": {
                "duration": 0.0031820869917282835,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithMaxlen",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048216099094133824,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010609320001094602,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOneDimensionalWithMaxlen>\n"
            },
            "teardown": {
                "duration": 0.0030001589911989868,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithoutMaxlen",
            "lineno": 68,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005736040038755164,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013389054001891054,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOneDimensionalWithoutMaxlen>\n"
            },
            "teardown": {
                "duration": 0.002705873004742898,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOutputDtype",
            "lineno": 121,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005108899931656197,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05241583699535113,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOutputDtype>\n"
            },
            "teardown": {
                "duration": 0.003086844997596927,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testTwoDimensional",
            "lineno": 78,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005209249939071015,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014735692995600402,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTwoDimensional>\n"
            },
            "teardown": {
                "duration": 0.002715801994781941,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003947420045733452,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005313240108080208,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0026590679917717353,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGrad",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006894249963806942,
                "outcome": "passed"
            },
            "call": {
                "duration": 57.052177306002704,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGrad>\n"
            },
            "teardown": {
                "duration": 0.002369356996496208,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGradWithNoShapeInformation",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005334690067684278,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11585544100671541,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradWithNoShapeInformation>\n"
            },
            "teardown": {
                "duration": 0.0023437159979948774,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005072849889984354,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004455660993698984,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInvalidShape>\n"
            },
            "teardown": {
                "duration": 0.0017619540012674406,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShapeAtEval",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005017529911128804,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15620345500065014,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInvalidShapeAtEval>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'set_diag' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\nNode: 'set_diag'\nDetected at node 'set_diag' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\nNode: 'set_diag'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: input must be at least 2-dim, received shape: []\n\t [[{{node set_diag}}]]\n\t [[set_diag/_3]]\n  (1) INVALID_ARGUMENT: input must be at least 2-dim, received shape: []\n\t [[{{node set_diag}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'set_diag_1' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\nNode: 'set_diag_1'\nDetected at node 'set_diag_1' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\nNode: 'set_diag_1'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: diagonal must be at least 1-dim, received shape: []\n\t [[{{node set_diag_1}}]]\n\t [[set_diag_1/_7]]\n  (1) INVALID_ARGUMENT: diagonal must be at least 1-dim, received shape: []\n\t [[{{node set_diag_1}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag_1':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'set_diag_2' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, d).eval(feed_dict={\nNode: 'set_diag_2'\nDetected at node 'set_diag_2' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, d).eval(feed_dict={\nNode: 'set_diag_2'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: Either first dimensions of diagonal don't match input.shape[:-2], or diagonal.shape[:-1] is not equal to the longests diagonal in range [lower_diag_index:upper_diag_index].\nInput shape: [2,3,3]\nDiagonal shape: [2,4]\nExpected diagonal shape: [2,3]\n\t [[{{node set_diag_2}}]]\n\t [[set_diag_2/_13]]\n  (1) INVALID_ARGUMENT: Either first dimensions of diagonal don't match input.shape[:-2], or diagonal.shape[:-1] is not equal to the longests diagonal in range [lower_diag_index:upper_diag_index].\nInput shape: [2,3,3]\nDiagonal shape: [2,4]\nExpected diagonal shape: [2,3]\n\t [[{{node set_diag_2}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag_2':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag(v, d).eval(feed_dict={\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'set_diag' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\nNode: 'set_diag'\nDetected at node 'set_diag' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\nNode: 'set_diag'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: input must be at least 2-dim, received shape: []\n\t [[{{node set_diag}}]]\n\t [[set_diag/_3]]\n  (1) INVALID_ARGUMENT: input must be at least 2-dim, received shape: []\n\t [[{{node set_diag}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684009021.4482238,
                        "msecs": 448.0,
                        "relativeCreated": 318701.7443180084,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'set_diag_1' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\nNode: 'set_diag_1'\nDetected at node 'set_diag_1' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\nNode: 'set_diag_1'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: diagonal must be at least 1-dim, received shape: []\n\t [[{{node set_diag_1}}]]\n\t [[set_diag_1/_7]]\n  (1) INVALID_ARGUMENT: diagonal must be at least 1-dim, received shape: []\n\t [[{{node set_diag_1}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag_1':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684009021.4596334,
                        "msecs": 459.0,
                        "relativeCreated": 318713.1538391113,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'set_diag_2' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, d).eval(feed_dict={\nNode: 'set_diag_2'\nDetected at node 'set_diag_2' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, d).eval(feed_dict={\nNode: 'set_diag_2'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: Either first dimensions of diagonal don't match input.shape[:-2], or diagonal.shape[:-1] is not equal to the longests diagonal in range [lower_diag_index:upper_diag_index].\nInput shape: [2,3,3]\nDiagonal shape: [2,4]\nExpected diagonal shape: [2,3]\n\t [[{{node set_diag_2}}]]\n\t [[set_diag_2/_13]]\n  (1) INVALID_ARGUMENT: Either first dimensions of diagonal don't match input.shape[:-2], or diagonal.shape[:-1] is not equal to the longests diagonal in range [lower_diag_index:upper_diag_index].\nInput shape: [2,3,3]\nDiagonal shape: [2,4]\nExpected diagonal shape: [2,3]\n\t [[{{node set_diag_2}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag_2':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag(v, d).eval(feed_dict={\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684009021.4693525,
                        "msecs": 469.0,
                        "relativeCreated": 318722.8729724884,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0018780099926516414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangular",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047450000420212746,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4858532079961151,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRectangular>\n"
            },
            "teardown": {
                "duration": 0.00341755201225169,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangularBatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008899919921532273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6372253880108474,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRectangularBatch>\n"
            },
            "teardown": {
                "duration": 0.0032453629974042997,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquare",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007212989876279607,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2634124429896474,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSquare>\n"
            },
            "teardown": {
                "duration": 0.003740985004696995,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquareBatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008162839949363843,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.4986181279964512,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSquareBatch>\n"
            },
            "teardown": {
                "duration": 0.004278198000974953,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007489639974664897,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006855669926153496,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002896827005315572,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009099129965761676,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05729019799036905,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIndexEqualsNumShards>\n"
            },
            "teardown": {
                "duration": 0.003740264000953175,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards2",
            "lineno": 86,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008142259903252125,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017533858001115732,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIndexEqualsNumShards2>\n"
            },
            "teardown": {
                "duration": 0.0031440259917872027,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIteratorEndsBeforeFirstElem",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010066539980471134,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014243552999687381,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIteratorEndsBeforeFirstElem>\n"
            },
            "teardown": {
                "duration": 0.003004661004524678,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testLargerWorkerPool",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006594659935217351,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014978475999669172,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLargerWorkerPool>\n"
            },
            "teardown": {
                "duration": 0.0030491320067085326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testName",
            "lineno": 110,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006693960021948442,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022027505008736625,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testName>\n"
            },
            "teardown": {
                "duration": 0.003998696993221529,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNestedData",
            "lineno": 27,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007750950026093051,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022078417998272926,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNestedData>\n"
            },
            "teardown": {
                "duration": 0.0038425189995905384,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNumShardsLargerThanDataset",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008982860017567873,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016924130992265418,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNumShardsLargerThanDataset>\n"
            },
            "teardown": {
                "duration": 0.003657797002233565,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testOffsetZero",
            "lineno": 38,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009714719926705584,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01483742700656876,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOffsetZero>\n"
            },
            "teardown": {
                "duration": 0.0034255749924341217,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testSimpleCase",
            "lineno": 16,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008413879986619577,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014165641987347044,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSimpleCase>\n"
            },
            "teardown": {
                "duration": 0.004074848009622656,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0010487620020285249,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007304890023078769,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0029231499938759953,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000725819991203025,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006218350026756525,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0022552070004167035,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005603710014838725,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009057596005732194,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_100_index_0_numshards_2>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_0_numshards_2>\nkwargs = {'elems': 100, 'index': 0, 'num_shards': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7ffacbe92860>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7ff68827d5a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0035226259933551773,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0009439770074095577,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014458390069194138,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_100_index_0_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_0_numshards_5>\nkwargs = {'elems': 100, 'index': 0, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7ffacbe92860>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7ff68827d900>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0032637890108162537,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0008230389939853922,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015617530007148162,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_100_index_1_numshards_2>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_1_numshards_2>\nkwargs = {'elems': 100, 'index': 1, 'num_shards': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7ffacbe92860>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7ff68827dd80>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.003366632998222485,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007708580087637529,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001471732000936754,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_100_index_1_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_1_numshards_5>\nkwargs = {'elems': 100, 'index': 1, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7ffacbe92860>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7ff68827e320>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.003388445999007672,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000809573000879027,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014308109966805205,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_10_index_0_numshards_2>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_0_numshards_2>\nkwargs = {'elems': 10, 'index': 0, 'num_shards': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7ffacbe92860>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7ff68827e050>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0036297140031820163,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0008131280046654865,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0013853309937985614,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_10_index_0_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_0_numshards_5>\nkwargs = {'elems': 10, 'index': 0, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7ffacbe92860>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7ff68827e8c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.003328035003505647,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007039959891699255,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015272739983629435,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_10_index_1_numshards_2>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_1_numshards_2>\nkwargs = {'elems': 10, 'index': 1, 'num_shards': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7ffacbe92860>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7ff68827ee60>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0030625859944848344,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006154720031190664,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0013332340022316203,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_10_index_1_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_1_numshards_5>\nkwargs = {'elems': 10, 'index': 1, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7ffacbe92860>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7ff68827dd80>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0034543119982117787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testEmptyDataset",
            "lineno": 163,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009863799932645634,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013732223989791237,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmptyDataset>\n"
            },
            "teardown": {
                "duration": 0.0035785769869107753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_1",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008048200106713921,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011467213000287302,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInvalidIndex_test_index_1>\n"
            },
            "teardown": {
                "duration": 0.0033271480060648173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008457539952360094,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01170233401353471,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInvalidIndex_test_index_2>\n"
            },
            "teardown": {
                "duration": 0.0034939230099553242,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_3",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007424170034937561,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011828453003545292,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInvalidIndex_test_index_3>\n"
            },
            "teardown": {
                "duration": 0.0032427169935544953,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_4",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006589800032088533,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011568804999114946,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInvalidIndex_test_index_4>\n"
            },
            "teardown": {
                "duration": 0.0035313809930812567,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008404059917666018,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01696420001098886,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_0_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.0038913719909032807,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000763053001719527,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015821862005395815,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_0_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.004245780000928789,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008619950094725937,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01690517200040631,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_0_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.004312201010179706,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008415619959123433,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01513202600472141,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_1_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.004156540991971269,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007905669917818159,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015672480993089266,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_1_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.0035301269963383675,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006180039927130565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014500453995424323,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_1_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.0038734239933546633,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008356449980055913,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015285211004083976,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_2_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.003413322992855683,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007830399990780279,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01388936399598606,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_2_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.003337271002237685,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006494720000773668,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0150805000012042,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_2_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.0035426060057943687,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008544290030840784,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01603651000186801,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_3_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.0037856030103284866,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008129080088110641,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016597659996477887,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_3_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.003859536998788826,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007729339995421469,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01656942100089509,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_3_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.004123136997804977,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007086819969117641,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019490721009788103,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_4_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.004192460997728631,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007938810013001785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016974931000731885,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_4_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.0035793400020338595,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008015320054255426,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017364799001370557,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_4_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.0037594570021610707,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000823684997158125,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01605443999869749,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_0_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.003132184996502474,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006570650002686307,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015284852997865528,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_0_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.003362372997798957,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007521429943153635,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01561744199716486,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_0_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.0036289799900259823,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007679590053157881,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01533873898733873,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_1_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.003573640002286993,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007979460060596466,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015748589008580893,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_1_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.003382042996236123,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007371800020337105,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01767810300225392,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_1_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.003411059995414689,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007460029883077368,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01523753599030897,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_2_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.0032026389962993562,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007384850032394752,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016442749998532236,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_2_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.0031337959953816608,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007333609974011779,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01567196799442172,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_2_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.0033169079979415983,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008006429998204112,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01502349200018216,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_3_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.0030549109942512587,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007346290076384321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01569714499055408,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_3_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.0031242660043062642,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006969980022404343,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015292641008272767,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_3_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.003246344000217505,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008876279898686334,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0193403320008656,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_4_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.003598741997848265,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009771960030775517,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01623515300161671,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_4_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.003484312997898087,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009303459955845028,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014084088994422927,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_4_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.002694737006095238,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007065059908200055,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01758847299788613,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_0_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.0027192069974262267,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006357899983413517,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019073738003498875,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_0_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.0027080010040663183,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006430719950003549,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01810911799839232,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_0_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.003185952009516768,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007375360000878572,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016635899999528192,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_1_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.002789980993838981,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007433179998770356,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019647311011794955,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_1_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.002939611003967002,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006462409946834669,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015833415993256494,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_1_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.0026958350063068792,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000730230996850878,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015173076011706144,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_2_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.0025974450109060854,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000598482001805678,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017467079000198282,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_2_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.003156238002702594,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007423369970638305,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017483859992353246,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_2_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.003032306005479768,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006909849907970056,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016279664007015526,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_3_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.0029057250067126006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006395439995685592,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018117803003406152,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_3_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.0028072699933545664,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006665390101261437,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01742046901199501,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_3_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.003153018988086842,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_10",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000734642002498731,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017271592005272396,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_4_numshards_10>\n"
            },
            "teardown": {
                "duration": 0.0029015899926889688,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_5",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006815179949626327,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022734951999154873,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_4_numshards_5>\n"
            },
            "teardown": {
                "duration": 0.0030067300103837624,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_7",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000665087005472742,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01821919898793567,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_4_numshards_7>\n"
            },
            "teardown": {
                "duration": 0.0030255370074883103,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexGreaterThanNumElements",
            "lineno": 213,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007185620052041486,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013089233994833194,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNumShardsAndIndexGreaterThanNumElements>\n"
            },
            "teardown": {
                "duration": 0.0027170789981028065,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexLessThanNumElements",
            "lineno": 180,
            "outcome": "passed",
            "setup": {
                "duration": 0.000679974997183308,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011378181996406056,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNumShardsAndIndexLessThanNumElements>\n"
            },
            "teardown": {
                "duration": 0.0024054300010902807,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsGreaterThanNumElementsIndexLess",
            "lineno": 197,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006141460034996271,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0111772359960014,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNumShardsGreaterThanNumElementsIndexLess>\n"
            },
            "teardown": {
                "duration": 0.0027989369991701096,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006813070067437366,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006465490005211905,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.003084219992160797,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007367960060946643,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09078320999105927,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCorrectOutput>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/shuffle_and_repeat_test.py:35: shuffle_and_repeat (from tensorflow.python.data.experimental.ops.shuffle_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.data.Dataset.shuffle(buffer_size, seed)` followed by `tf.data.Dataset.repeat(count)`. Static tf.data optimizations will take care of using the fused implementation.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/shuffle_and_repeat_test.py:35: shuffle_and_repeat (from tensorflow.python.data.experimental.ops.shuffle_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.data.Dataset.shuffle(buffer_size, seed)` followed by `tf.data.Dataset.repeat(count)`. Static tf.data optimizations will take care of using the fused implementation.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684009025.9579396,
                        "msecs": 957.0,
                        "relativeCreated": 323211.4601135254,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.003986120005720295,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne",
            "lineno": 94,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007138439978007227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1450337669957662,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCountMinusOne>\n"
            },
            "teardown": {
                "duration": 0.003961472000810318,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone",
            "lineno": 85,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007888130057835951,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1473009799956344,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCountNone>\n"
            },
            "teardown": {
                "duration": 0.0038382019993150607,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds",
            "lineno": 78,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009334609931102023,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10742481300258078,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDifferentOrderForDifferentSeeds>\n"
            },
            "teardown": {
                "duration": 0.0030637549934908748,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty",
            "lineno": 111,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004600590036716312,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021406328000011854,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfiniteEmpty>\n"
            },
            "teardown": {
                "duration": 0.0020112590136704966,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs",
            "lineno": 103,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005814100004499778,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10323507399880327,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfiniteOutputs>\n"
            },
            "teardown": {
                "duration": 0.003202872001565993,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize",
            "lineno": 120,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004957930068485439,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014646569994511083,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLargeBufferSize>\n"
            },
            "teardown": {
                "duration": 0.0023354590084636584,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042082800064235926,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08979535799880978,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRerandomizeOnReplicate>\n"
            },
            "teardown": {
                "duration": 0.0028637819923460484,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling",
            "lineno": 63,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004685199965024367,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.030875099007971585,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReshuffling>\n"
            },
            "teardown": {
                "duration": 0.00253677400178276,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds",
            "lineno": 72,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004357369907665998,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05178208398865536,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSameOrderForSameSeeds>\n"
            },
            "teardown": {
                "duration": 0.0030994099943200126,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize",
            "lineno": 134,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005153869860805571,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1398547410062747,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testVeryLargeBufferSize>\n"
            },
            "teardown": {
                "duration": 0.004018551000626758,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005528220062842593,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006542170012835413,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0022762629960197955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005504810105776414,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000544280992471613,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002104913000948727,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045599300938192755,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13458698301110417,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyexhaustediterator>\n"
            },
            "teardown": {
                "duration": 0.004673653995268978,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009661720105214044,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08501922000141349,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyfullyusediterator>\n"
            },
            "teardown": {
                "duration": 0.005968159006442875,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005472460034070536,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2120973760029301,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifymultiplebreaks>\n"
            },
            "teardown": {
                "duration": 0.004231316997902468,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000513494000188075,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010808799997903407,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyresetrestorediterator>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped: Eager mode iteration do not support re-initialization.')"
            },
            "teardown": {
                "duration": 0.0019225729920435697,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000419613003032282,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08014250799897127,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyunusediterator>\n"
            },
            "teardown": {
                "duration": 0.004202238007565029,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::testSimpleSave",
            "lineno": 36,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008759430056670681,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11194668800453655,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSimpleSave>\n",
                "stderr": "2023-05-13 20:17:07.523288: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  var_x/Initializer/initial_value (Const) \n  var_x (VarHandleOp) /device:GPU:0\n  var_x/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  var_x/Assign (AssignVariableOp) /device:GPU:0\n  var_x/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n\n2023-05-13 20:17:07.537281: W tensorflow/c/c_api.cc:291] Operation '{name:'var_x/Assign' id:5 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node var_x/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_INT32, validate_shape=false, _device=\"/device:GPU:0\"](var_x, var_x/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 20:17:07.537786: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  var_y/Initializer/initial_value (Const) \n  var_y (VarHandleOp) /device:GPU:0\n  var_y/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  var_y/Assign (AssignVariableOp) /device:GPU:0\n  var_y/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n\nWARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/simple_save_test.py:56: simple_save (from tensorflow.python.saved_model.simple_save) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.\nWARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/saved_model/signature_def_utils_impl.py:203: build_tensor_info (from tensorflow.python.saved_model.utils_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.\nWARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/simple_save_test.py:62: load (from tensorflow.python.saved_model.loader_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.saved_model.load` instead.\n2023-05-13 20:17:07.597790: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  var_x/Initializer/initial_value (Const) /device:GPU:0\n  var_x (VarHandleOp) /device:GPU:0\n  var_x/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  var_x/Assign (AssignVariableOp) /device:GPU:0\n  var_x/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n  save/AssignVariableOp (AssignVariableOp) /device:GPU:0\n\n2023-05-13 20:17:07.597866: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  var_y/Initializer/initial_value (Const) /device:GPU:0\n  var_y (VarHandleOp) /device:GPU:0\n  var_y/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  var_y/Assign (AssignVariableOp) /device:GPU:0\n  var_y/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n  save/AssignVariableOp_1 (AssignVariableOp) /device:GPU:0\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/simple_save_test.py:56: simple_save (from tensorflow.python.saved_model.simple_save) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684009027.548018,
                        "msecs": 548.0,
                        "relativeCreated": 324801.5384674072,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/saved_model/signature_def_utils_impl.py:203: build_tensor_info (from tensorflow.python.saved_model.utils_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684009027.548237,
                        "msecs": 548.0,
                        "relativeCreated": 324801.7575740814,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/simple_save_test.py:62: load (from tensorflow.python.saved_model.loader_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.saved_model.load` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684009027.5893686,
                        "msecs": 589.0,
                        "relativeCreated": 324842.88907051086,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0027550189988687634,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006351280026137829,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006261590024223551,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0028052980051143095,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testEval",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.000984108992270194,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02349249400140252,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEval>\n"
            },
            "teardown": {
                "duration": 0.0027721020014723763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testFalse",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000585498011787422,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01572252600453794,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFalse>\n"
            },
            "teardown": {
                "duration": 0.001752212003339082,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg1",
            "lineno": 102,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004253130027791485,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009363416000269353,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMissingArg1>\n"
            },
            "teardown": {
                "duration": 0.001584764992003329,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg2",
            "lineno": 110,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039724400267004967,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00916569800756406,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMissingArg2>\n"
            },
            "teardown": {
                "duration": 0.0020164979941910133,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testPlaceholderWithDefault",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039744999958202243,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.034129349005525,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPlaceholderWithDefault>\n"
            },
            "teardown": {
                "duration": 0.002264444003230892,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testTrue",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004500599898165092,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015250962998834439,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTrue>\n"
            },
            "teardown": {
                "duration": 0.0017363799997838214,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testUnknown",
            "lineno": 61,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044769600208383054,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02713095700892154,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnknown>\n"
            },
            "teardown": {
                "duration": 0.001986705989111215,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00043676100904121995,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044367800001055,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0022497600002679974,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::testSmallInput2x2Pad1x0",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006650059949606657,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03129926598921884,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmallInput2x2Pad1x0>\n"
            },
            "teardown": {
                "duration": 0.0017622310115257278,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004406100051710382,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004428910033311695,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001740013001835905,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testDirect",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004919279890600592,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.29096508500515483,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDirect>\n"
            },
            "teardown": {
                "duration": 0.0022158159990794957,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimOneRemainingDim",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005123440059833229,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04814211599295959,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOneBlockDimOneRemainingDim>\n"
            },
            "teardown": {
                "duration": 0.002056145007372834,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimZeroRemainingDims",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004477940092328936,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04580130000249483,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOneBlockDimZeroRemainingDims>\n"
            },
            "teardown": {
                "duration": 0.001951419995748438,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsOneRemainingDim",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004600730026140809,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09689695498673245,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroBlockDimsOneRemainingDim>\n"
            },
            "teardown": {
                "duration": 0.002495327003998682,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsTwoRemainingDims",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047785100468900055,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12405228399438784,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroBlockDimsTwoRemainingDims>\n"
            },
            "teardown": {
                "duration": 0.0020032679894939065,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsZeroRemainingDims",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005154560058144853,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.046967853006208315,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroBlockDimsZeroRemainingDims>\n"
            },
            "teardown": {
                "duration": 0.0025132490118267015,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005105119926156476,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005171490047359839,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0018340099923079833,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::testSpaceToDepthTranspose",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045455900544766337,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.033829003004939295,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSpaceToDepthTranspose>\n"
            },
            "teardown": {
                "duration": 0.0018717179918894544,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004793760017491877,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004501930088736117,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002401716003078036,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSize0",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046990699775051326,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0038410379929700866,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBlockSize0>\n"
            },
            "teardown": {
                "duration": 0.0017612740048207343,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeLarger",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003976119915023446,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0023009029973763973,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBlockSizeLarger>\n"
            },
            "teardown": {
                "duration": 0.0017198449932038784,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleBoth",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003958099987357855,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025782890006667003,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBlockSizeNotDivisibleBoth>\n"
            },
            "teardown": {
                "duration": 0.002115947994752787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleHeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004126209969399497,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0022964359959587455,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBlockSizeNotDivisibleHeight>\n"
            },
            "teardown": {
                "duration": 0.0016651509940857068,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleWidth",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003719649976119399,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0023525309952674434,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBlockSizeNotDivisibleWidth>\n"
            },
            "teardown": {
                "duration": 0.0016666970041114837,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeOne",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038425199454650283,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002644726002472453,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBlockSizeOne>\n"
            },
            "teardown": {
                "duration": 0.0014992419892223552,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testInputWrongDimMissingBatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003867249906761572,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0023053509939927608,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputWrongDimMissingBatch>\n"
            },
            "teardown": {
                "duration": 0.0016438039892818779,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testUnknownShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003747770097106695,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0023701409954810515,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnknownShape>\n"
            },
            "teardown": {
                "duration": 0.0014954689977457747,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003891569940606132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003955020074499771,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0021849939948879182,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004051970026921481,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3070136479946086,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmall>\n"
            },
            "teardown": {
                "duration": 0.002495812004781328,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall2",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045149501238483936,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.47265452198917046,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmall2>\n"
            },
            "teardown": {
                "duration": 0.002390328998444602,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmallPad1x1",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005128050106577575,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.40017467699362896,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmallPad1x1>\n"
            },
            "teardown": {
                "duration": 0.0028567309927893803,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007629629981238395,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005756700120400637,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0031007079960545525,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0008382999949390069,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005561759899137542,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0021344510023482144,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test0",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005600129952654243,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011191179000888951,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test0>\n"
            },
            "teardown": {
                "duration": 0.002584294998086989,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test1",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047507700219284743,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005293864000122994,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test1>\n"
            },
            "teardown": {
                "duration": 0.0019255410006735474,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test2",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003817469987552613,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008810079001705162,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test2>\n"
            },
            "teardown": {
                "duration": 0.0018842159915948287,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test3",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003836739924736321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005381954004405998,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test3>\n"
            },
            "teardown": {
                "duration": 0.0017537969979457557,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035914000181946903,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003797649987973273,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015504400071222335,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006524820055346936,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3268804090039339,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFiniteGradientAtDifficultPoints>\n"
            },
            "teardown": {
                "duration": 0.002461247000610456,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testNormalSurvivalFunction",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004820580070372671,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06609706500603352,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalSurvivalFunction>\n"
            },
            "teardown": {
                "duration": 0.002366839995374903,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testSampleLikeArgsGetDistDType",
            "lineno": 58,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004831809928873554,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2646501839917619,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSampleLikeArgsGetDistDType>\n"
            },
            "teardown": {
                "duration": 0.002781948001938872,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005018550000386313,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005932680069236085,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.0016353190003428608,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testDeterminism",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006158039905130863,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.1581713479972677,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeterminism>\n"
            },
            "teardown": {
                "duration": 0.0036418859963305295,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testEmptyBatches",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005475270008901134,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02137355699960608,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmptyBatches>\n"
            },
            "teardown": {
                "duration": 0.002442783006699756,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testExecuteMultipleWithoutError",
            "lineno": 112,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005121259891893715,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1445278729952406,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testExecuteMultipleWithoutError>\n"
            },
            "teardown": {
                "duration": 0.0029311800026334822,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testThrowDeterminismError",
            "lineno": 60,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005370110011426732,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09250628799782135,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testThrowDeterminismError>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'Svd' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/svd_test.py\", line 72, in testThrowDeterminismError\n      self.evaluate(linalg_ops.svd(matrix))\nNode: 'Svd'\nDetected at node 'Svd' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/svd_test.py\", line 72, in testThrowDeterminismError\n      self.evaluate(linalg_ops.svd(matrix))\nNode: 'Svd'\n2 root error(s) found.\n  (0) UNIMPLEMENTED: Determinism is not yet supported for SVD of matrices with 1 column.\n\t [[{{node Svd}}]]\n\t [[Svd/_5]]\n  (1) UNIMPLEMENTED: Determinism is not yet supported for SVD of matrices with 1 column.\n\t [[{{node Svd}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'Svd':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/svd_test.py\", line 72, in testThrowDeterminismError\n    self.evaluate(linalg_ops.svd(matrix))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg_ops.py\", line 548, in svd\n    s, u, v = gen_linalg_ops.svd(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_linalg_ops.py\", line 2421, in svd\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'Svd' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/svd_test.py\", line 72, in testThrowDeterminismError\n      self.evaluate(linalg_ops.svd(matrix))\nNode: 'Svd'\nDetected at node 'Svd' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/svd_test.py\", line 72, in testThrowDeterminismError\n      self.evaluate(linalg_ops.svd(matrix))\nNode: 'Svd'\n2 root error(s) found.\n  (0) UNIMPLEMENTED: Determinism is not yet supported for SVD of matrices with 1 column.\n\t [[{{node Svd}}]]\n\t [[Svd/_5]]\n  (1) UNIMPLEMENTED: Determinism is not yet supported for SVD of matrices with 1 column.\n\t [[{{node Svd}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'Svd':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/svd_test.py\", line 72, in testThrowDeterminismError\n    self.evaluate(linalg_ops.svd(matrix))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg_ops.py\", line 548, in svd\n    s, u, v = gen_linalg_ops.svd(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_linalg_ops.py\", line 2421, in svd\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684009031.921417,
                        "msecs": 921.0,
                        "relativeCreated": 329174.93748664856,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0030466640018858016,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005262060003587976,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004871420096606016,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0022084069933043793,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00048638701264280826,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004514370084507391,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0018452389922458678,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004619249957613647,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003874970134347677,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0020258629956515506,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithForwarding",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006596769962925464,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10798838599293958,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTensorScatterUpdateWithForwarding>\n"
            },
            "teardown": {
                "duration": 0.0019667749875225127,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithStrings",
            "lineno": 138,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004692270013038069,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02335783299349714,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTensorScatterUpdateWithStrings>\n"
            },
            "teardown": {
                "duration": 0.001834434995544143,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSub",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045456500083673745,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08476270399114583,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdateAddSub>\n"
            },
            "teardown": {
                "duration": 0.0027201369957765564,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSubGradients",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007731399964541197,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06849781700293534,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdateAddSubGradients>\n"
            },
            "teardown": {
                "duration": 0.0025770909996936098,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateMinMax",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042862498958129436,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07435284899838734,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdateMinMax>\n"
            },
            "teardown": {
                "duration": 0.0023758690076647326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices1D",
            "lineno": 158,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045918200339656323,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024629168008686975,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testUpdateRepeatedIndices1D>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/tensor_scatter_update_test.py', 159, 'Skipped: Duplicate indices scatter is non-deterministic on GPU')"
            },
            "teardown": {
                "duration": 0.0014872909960104153,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices2D",
            "lineno": 173,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004040850035380572,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024120342000969686,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testUpdateRepeatedIndices2D>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/tensor_scatter_update_test.py', 174, 'Skipped: Duplicate indices scatter is non-deterministic on GPU')"
            },
            "teardown": {
                "duration": 0.001724080997519195,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003727340081240982,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00035030400613322854,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001925561999087222,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testDeterminism",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004080010112375021,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.053434130997629836,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeterminism>\n"
            },
            "teardown": {
                "duration": 0.0023937299993121997,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithForwarding",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040554300358053297,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02168909800820984,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTensorScatterUpdateWithForwarding>\n"
            },
            "teardown": {
                "duration": 0.0014948259922675788,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithStrings",
            "lineno": 138,
            "outcome": "passed",
            "setup": {
                "duration": 0.000386469007935375,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02047820000734646,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTensorScatterUpdateWithStrings>\n"
            },
            "teardown": {
                "duration": 0.0016846409998834133,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSub",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037801799771841615,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06651528300426435,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdateAddSub>\n"
            },
            "teardown": {
                "duration": 0.002248007003800012,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSubGradients",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004128360014874488,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05160396499559283,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdateAddSubGradients>\n"
            },
            "teardown": {
                "duration": 0.0019473949942039326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateMinMax",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038958099321462214,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06842498100013472,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdateMinMax>\n"
            },
            "teardown": {
                "duration": 0.002422621997538954,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices1D",
            "lineno": 158,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00043247800203971565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024658996000653133,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testUpdateRepeatedIndices1D>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/tensor_scatter_update_test.py', 159, 'Skipped: Duplicate indices scatter is non-deterministic on GPU')"
            },
            "teardown": {
                "duration": 0.0015720999945187941,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices2D",
            "lineno": 173,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000389232998713851,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02410678299202118,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testUpdateRepeatedIndices2D>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/tensor_scatter_update_test.py', 174, 'Skipped: Duplicate indices scatter is non-deterministic on GPU')"
            },
            "teardown": {
                "duration": 0.0019831859972327948,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005576260009547696,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005309529951773584,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002397427990217693,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::testInt32Basic",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005891330074518919,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008170157991116866,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt32Basic>\n"
            },
            "teardown": {
                "duration": 0.0015152910054894164,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039481199928559363,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00036507699405774474,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015937339921947569,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::testConvertSingleVariable",
            "lineno": 169,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006164689984871075,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029062590008834377,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertSingleVariable>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/convert_to_constants.py:943: extract_sub_graph (from tensorflow.python.framework.graph_util_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/convert_to_constants.py:943: extract_sub_graph (from tensorflow.python.framework.graph_util_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684009032.7881815,
                        "msecs": 788.0,
                        "relativeCreated": 330041.70203208923,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0017215950065292418,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036779200308956206,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003885769983753562,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014476270007435232,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_non_singular",
            "lineno": 87,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005819520010845736,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010984298001858406,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_assert_non_singular>\n"
            },
            "teardown": {
                "duration": 0.0013346869964152575,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_positive_definite",
            "lineno": 82,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004078150086570531,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0102277099940693,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_assert_positive_definite>\n"
            },
            "teardown": {
                "duration": 0.0015515780105488375,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_self_adjoint",
            "lineno": 92,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003345559962326661,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013964501995360479,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_assert_self_adjoint>\n"
            },
            "teardown": {
                "duration": 0.0016589619917795062,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_is_x_flags",
            "lineno": 175,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034296199737582356,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012200140001368709,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_is_x_flags>\n"
            },
            "teardown": {
                "duration": 0.001472525007557124,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_dynamic",
            "lineno": 151,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003780209954129532,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11568245000671595,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_negative_batch_shape_raises_dynamic>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/add/_43]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 243, in __init__\n    self._check_batch_shape_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 425, in _check_batch_shape_possibly_add_asserts\n    check_ops.assert_non_negative(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 622, in assert_non_negative\n    return assert_less_equal(zero, x, data=data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/add/_43]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 243, in __init__\n    self._check_batch_shape_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 425, in _check_batch_shape_possibly_add_asserts\n    check_ops.assert_non_negative(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 622, in assert_non_negative\n    return assert_less_equal(zero, x, data=data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684009032.9651535,
                        "msecs": 965.0,
                        "relativeCreated": 330218.67394447327,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.002796524000586942,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_static",
            "lineno": 123,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005329849955160171,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01471529999980703,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_negative_batch_shape_raises_static>\n"
            },
            "teardown": {
                "duration": 0.002633425989188254,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_dynamic",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005978929984848946,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10309465699538123,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_negative_num_rows_raises_dynamic>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/zeros/_35]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 225, in __init__\n    self._check_domain_range_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 379, in _check_domain_range_possibly_add_asserts\n    check_ops.assert_non_negative(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 622, in assert_non_negative\n    return assert_less_equal(zero, x, data=data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/zeros/_35]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 225, in __init__\n    self._check_domain_range_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 379, in _check_domain_range_possibly_add_asserts\n    check_ops.assert_non_negative(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 622, in assert_non_negative\n    return assert_less_equal(zero, x, data=data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684009033.0819736,
                        "msecs": 81.0,
                        "relativeCreated": 330335.4940414429,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0027983090112684295,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_static",
            "lineno": 109,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005003289988962933,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01287080900510773,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_negative_num_rows_raises_static>\n"
            },
            "teardown": {
                "duration": 0.0017332159914076328,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_dynamic",
            "lineno": 143,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004713929956778884,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10664221498882398,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_non_1d_batch_shape_raises_dynamic>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_rank_2/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_2/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_rank_2/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_2/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be a 1-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [1] [Received shape: ] []\n\t [[{{node LinearOperatorZeros/assert_rank_2/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/add/_43]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be a 1-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [1] [Received shape: ] []\n\t [[{{node LinearOperatorZeros/assert_rank_2/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_rank_2/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 243, in __init__\n    self._check_batch_shape_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 421, in _check_batch_shape_possibly_add_asserts\n    check_ops.assert_rank(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1243, in assert_rank\n    assert_op = _assert_rank_condition(x, rank, static_condition,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1156, in _assert_rank_condition\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_rank_2/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_2/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_rank_2/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_2/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be a 1-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [1] [Received shape: ] []\n\t [[{{node LinearOperatorZeros/assert_rank_2/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/add/_43]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be a 1-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [1] [Received shape: ] []\n\t [[{{node LinearOperatorZeros/assert_rank_2/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_rank_2/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 243, in __init__\n    self._check_batch_shape_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 421, in _check_batch_shape_possibly_add_asserts\n    check_ops.assert_rank(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1243, in assert_rank\n    assert_op = _assert_rank_condition(x, rank, static_condition,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1156, in _assert_rank_condition\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684009033.2199771,
                        "msecs": 219.0,
                        "relativeCreated": 330473.49762916565,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0021935959957772866,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_static",
            "lineno": 115,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005268699896987528,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012712429001112469,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_non_1d_batch_shape_raises_static>\n"
            },
            "teardown": {
                "duration": 0.0018523640028433874,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_batch_shape_raises_static",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047096800699364394,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012409111004672013,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_non_integer_batch_shape_raises_static>\n"
            },
            "teardown": {
                "duration": 0.0014721079933224246,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_num_rows_raises_static",
            "lineno": 103,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037336199602577835,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011992797997663729,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_non_integer_num_rows_raises_static>\n"
            },
            "teardown": {
                "duration": 0.0016108859999803826,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_dynamic",
            "lineno": 127,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004799979942617938,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09452716801024508,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_non_scalar_num_rows_raises_dynamic>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_rank_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_1/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_rank_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_1/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be a 0-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [0] [Received shape: ] [1]\n\t [[{{node LinearOperatorZeros/assert_rank_1/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/zeros/_35]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be a 0-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [0] [Received shape: ] [1]\n\t [[{{node LinearOperatorZeros/assert_rank_1/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_rank_1/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 225, in __init__\n    self._check_domain_range_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 375, in _check_domain_range_possibly_add_asserts\n    check_ops.assert_rank(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1243, in assert_rank\n    assert_op = _assert_rank_condition(x, rank, static_condition,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1156, in _assert_rank_condition\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_rank_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_1/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_rank_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_1/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be a 0-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [0] [Received shape: ] [1]\n\t [[{{node LinearOperatorZeros/assert_rank_1/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/zeros/_35]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be a 0-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [0] [Received shape: ] [1]\n\t [[{{node LinearOperatorZeros/assert_rank_1/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_rank_1/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 225, in __init__\n    self._check_domain_range_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 375, in _check_domain_range_possibly_add_asserts\n    check_ops.assert_rank(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1243, in assert_rank\n    assert_op = _assert_rank_condition(x, rank, static_condition,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1156, in _assert_rank_condition\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684009033.365559,
                        "msecs": 365.0,
                        "relativeCreated": 330619.07958984375,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.002938849007477984,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_static",
            "lineno": 97,
            "outcome": "passed",
            "setup": {
                "duration": 0.000552800003788434,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016405335001763888,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_non_scalar_num_rows_raises_static>\n"
            },
            "teardown": {
                "duration": 0.0022164969996083528,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_ref_type_shape_args_raises",
            "lineno": 193,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005803569947602227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027972387993941084,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_ref_type_shape_args_raises>\n"
            },
            "teardown": {
                "duration": 0.002546025993069634,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005429459997685626,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000527801996213384,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002575659003923647,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_dynamic",
            "lineno": 165,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045143600436858833,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09217325500503648,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_wrong_matrix_dimensions_raises_dynamic>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n      self.evaluate(operator.matmul(x))\nNode: 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert'\nDetected at node 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n      self.evaluate(operator.matmul(x))\nNode: 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Dimensions are not compatible.  shape[-2] of argument to be the same as this operator] [Condition x == y did not hold element-wise:] [x (LinearOperatorZeros/matmul/strided_slice:0) = ] [3] [y (LinearOperatorZeros/matmul/LinearOperatorZeros/domain_dimension_tensor/strided_slice:0) = ] [2]\n\t [[{{node LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert}}]]\n\t [[LinearOperatorZeros/matmul/zeros/_33]]\n  (1) INVALID_ARGUMENT: assertion failed: [Dimensions are not compatible.  shape[-2] of argument to be the same as this operator] [Condition x == y did not hold element-wise:] [x (LinearOperatorZeros/matmul/strided_slice:0) = ] [3] [y (LinearOperatorZeros/matmul/LinearOperatorZeros/domain_dimension_tensor/strided_slice:0) = ] [2]\n\t [[{{node LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n    self.evaluate(operator.matmul(x))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator.py\", line 688, in matmul\n    return self._matmul(x, adjoint=adjoint, adjoint_arg=adjoint_arg)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 310, in _matmul\n    aps = linear_operator_util.assert_compatible_matrix_dimensions(self, x)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_util.py\", line 234, in assert_compatible_matrix_dimensions\n    assert_same_dd = check_ops.assert_equal(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 726, in assert_equal\n    return _binary_assert('==', 'assert_equal', math_ops.equal, np.equal, x, y,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n      self.evaluate(operator.matmul(x))\nNode: 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert'\nDetected at node 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n      self.evaluate(operator.matmul(x))\nNode: 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Dimensions are not compatible.  shape[-2] of argument to be the same as this operator] [Condition x == y did not hold element-wise:] [x (LinearOperatorZeros/matmul/strided_slice:0) = ] [3] [y (LinearOperatorZeros/matmul/LinearOperatorZeros/domain_dimension_tensor/strided_slice:0) = ] [2]\n\t [[{{node LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert}}]]\n\t [[LinearOperatorZeros/matmul/zeros/_33]]\n  (1) INVALID_ARGUMENT: assertion failed: [Dimensions are not compatible.  shape[-2] of argument to be the same as this operator] [Condition x == y did not hold element-wise:] [x (LinearOperatorZeros/matmul/strided_slice:0) = ] [3] [y (LinearOperatorZeros/matmul/LinearOperatorZeros/domain_dimension_tensor/strided_slice:0) = ] [2]\n\t [[{{node LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n    self.evaluate(operator.matmul(x))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator.py\", line 688, in matmul\n    return self._matmul(x, adjoint=adjoint, adjoint_arg=adjoint_arg)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 310, in _matmul\n    aps = linear_operator_util.assert_compatible_matrix_dimensions(self, x)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_util.py\", line 234, in assert_compatible_matrix_dimensions\n    assert_same_dd = check_ops.assert_equal(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 726, in assert_equal\n    return _binary_assert('==', 'assert_equal', math_ops.equal, np.equal, x, y,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684009033.511998,
                        "msecs": 511.0,
                        "relativeCreated": 330765.51842689514,
                        "thread": 140716415001088,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 1749
                    }
                ]
            },
            "teardown": {
                "duration": 0.0030423079879255965,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_static",
            "lineno": 159,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005416049971245229,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014979964995291084,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_wrong_matrix_dimensions_raises_static>\n"
            },
            "teardown": {
                "duration": 0.002325800000107847,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_zeros_matmul",
            "lineno": 182,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005530719936359674,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014392684999620542,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_zeros_matmul>\n"
            },
            "teardown": {
                "duration": 0.0024306109989993274,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000651969006867148,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006180500058690086,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.04018387899850495,
                "outcome": "passed"
            }
        }
    ],
    "warnings": [
        {
            "message": "the imp module is deprecated in favour of importlib and slated for removal in Python 3.12; see the module's documentation for alternative uses",
            "category": "DeprecationWarning",
            "when": "collect",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/autograph/core/converter_testing.py",
            "lineno": 18
        },
        {
            "message": "Casting complex values to real discards the imaginary part",
            "category": "ComplexWarning",
            "when": "runtest",
            "filename": "/home/frasermince/portability/src/tensorflow_tests_reduced/cast_test.py",
            "lineno": 51
        },
        {
            "message": "Casting complex values to real discards the imaginary part",
            "category": "ComplexWarning",
            "when": "runtest",
            "filename": "/home/frasermince/portability/src/tensorflow_tests_reduced/cast_test.py",
            "lineno": 51
        },
        {
            "message": "Casting complex values to real discards the imaginary part",
            "category": "ComplexWarning",
            "when": "runtest",
            "filename": "/home/frasermince/portability/src/tensorflow_tests_reduced/cast_test.py",
            "lineno": 51
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "The algorithm does not converge.  Roundoff error is detected\n  in the extrapolation table.  It is assumed that the requested tolerance\n  cannot be achieved, and that the returned result (if full_output = 1) is \n  the best which can be obtained.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The integral is probably divergent, or slowly convergent.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The maximum number of subdivisions (50) has been achieved.\n  If increasing the limit yields no improvement it is advised to analyze \n  the integrand in order to determine the difficulties.  If the position of a \n  local difficulty can be determined (singularity, discontinuity) one will \n  probably gain from splitting up the interval and calling the integrator \n  on the subranges.  Perhaps a special-purpose integrator should be used.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The algorithm does not converge.  Roundoff error is detected\n  in the extrapolation table.  It is assumed that the requested tolerance\n  cannot be achieved, and that the returned result (if full_output = 1) is \n  the best which can be obtained.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The integral is probably divergent, or slowly convergent.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The maximum number of subdivisions (50) has been achieved.\n  If increasing the limit yields no improvement it is advised to analyze \n  the integrand in order to determine the difficulties.  If the position of a \n  local difficulty can be determined (singularity, discontinuity) one will \n  probably gain from splitting up the interval and calling the integrator \n  on the subranges.  Perhaps a special-purpose integrator should be used.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "invalid value encountered in reduce",
            "category": "RuntimeWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/numpy/core/fromnumeric.py",
            "lineno": 86
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Exception in thread Thread-1 (update_thread)\n\nTraceback (most recent call last):\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 1378, in _do_call\n    return fn(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 1361, in _run_fn\n    return self._call_tf_sessionrun(options, feed_dict, fetch_list,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 1454, in _call_tf_sessionrun\n    return tf_session.TF_SessionRun_wrapper(self._session, options, feed_dict,\ntensorflow.python.framework.errors_impl.CancelledError: Run call was cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 3486, in assertRaisesWithPredicateMatch\n    yield\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/run_test.py\", line 1394, in update_thread\n    sess.run(c)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 968, in run\n    result = self._run(None, fetches, feed_dict, options_ptr,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 1191, in _run\n    results = self._do_run(handle, final_targets, final_fetches,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 1371, in _do_run\n    return self._do_call(_run_fn, feeds, fetches, targets, options,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 1397, in _do_call\n    raise type(e)(node_def, op, message)  # pylint: disable=no-value-for-parameter\ntensorflow.python.framework.errors_impl.CancelledError: Graph execution error:\n\nRun call was cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/frasermince/miniconda3/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/home/frasermince/miniconda3/lib/python3.10/threading.py\", line 953, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/run_test.py\", line 1389, in update_thread\n    with self.assertRaisesWithPredicateMatch(\n  File \"/home/frasermince/miniconda3/lib/python3.10/contextlib.py\", line 153, in __exit__\n    self.gen.throw(typ, value, traceback)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 3490, in assertRaisesWithPredicateMatch\n    raise AssertionError(\"Exception of type %s: %s\" %\nAssertionError: Exception of type <class 'tensorflow.python.framework.errors_impl.CancelledError'>: Graph execution error:\n\nRun call was cancelled\n",
            "category": "PytestUnhandledThreadExceptionWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/threadexception.py",
            "lineno": 73
        }
    ]
}