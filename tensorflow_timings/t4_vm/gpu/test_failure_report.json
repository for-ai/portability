{
    "created": 1683999412.06947,
    "duration": 342.4425616264343,
    "exitcode": 1,
    "root": "/home/frasermince/portability",
    "environment": {
        "Python": "3.10.10",
        "Platform": "Linux-4.19.0-24-cloud-amd64-x86_64-with-glibc2.28",
        "Packages": {
            "pytest": "7.2.2",
            "pluggy": "1.0.0"
        },
        "Plugins": {
            "hypothesis": "6.70.2",
            "xdist": "3.2.1",
            "forked": "1.6.0",
            "metadata": "2.0.4",
            "json-report": "1.5.0",
            "timeout": "2.1.0"
        }
    },
    "summary": {
        "passed": 697,
        "skipped": 261,
        "failed": 183,
        "total": 1141,
        "collected": 1141
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/__init__.py",
                    "type": "Package"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_stops_training_in_after_save",
                    "type": "TestCaseFunction",
                    "lineno": 211
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_default_saver",
                    "type": "TestCaseFunction",
                    "lineno": 235
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_monitored_session",
                    "type": "TestCaseFunction",
                    "lineno": 179
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_both_secs_and_steps",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_none_secs_and_steps",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_when_saver_and_scaffold_both_present",
                    "type": "TestCaseFunction",
                    "lineno": 117
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_checkpoint_before_first_train_step",
                    "type": "TestCaseFunction",
                    "lineno": 484
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def",
                    "type": "TestCaseFunction",
                    "lineno": 513
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def_false",
                    "type": "TestCaseFunction",
                    "lineno": 539
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_saves_at_end",
                    "type": "TestCaseFunction",
                    "lineno": 464
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_at_begin_and_end",
                    "type": "TestCaseFunction",
                    "lineno": 151
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_periodically",
                    "type": "TestCaseFunction",
                    "lineno": 360
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_in_first_step",
                    "type": "TestCaseFunction",
                    "lineno": 133
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_periodically",
                    "type": "TestCaseFunction",
                    "lineno": 312
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_in_first_step",
                    "type": "TestCaseFunction",
                    "lineno": 411
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_periodically",
                    "type": "TestCaseFunction",
                    "lineno": 429
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_saves_when_saver_and_scaffold_both_missing",
                    "type": "TestCaseFunction",
                    "lineno": 99
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_two_listeners_with_default_saver",
                    "type": "TestCaseFunction",
                    "lineno": 272
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_False",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_True",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_False",
                    "type": "TestCaseFunction",
                    "lineno": 125
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_True",
                    "type": "TestCaseFunction",
                    "lineno": 125
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_False",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_True",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_False",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_True",
                    "type": "TestCaseFunction",
                    "lineno": 90
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_illegal_args",
                    "type": "TestCaseFunction",
                    "lineno": 106
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_at_end_only",
                    "type": "TestCaseFunction",
                    "lineno": 117
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs",
                    "type": "TestCaseFunction",
                    "lineno": 238
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs_and_end",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps_and_end",
                    "type": "TestCaseFunction",
                    "lineno": 181
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_first_step",
                    "type": "TestCaseFunction",
                    "lineno": 187
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_formatter",
                    "type": "TestCaseFunction",
                    "lineno": 254
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
                    "type": "TestCaseFunction",
                    "lineno": 243
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNegativeSigmaFails",
                    "type": "TestCaseFunction",
                    "lineno": 524
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalCDF",
                    "type": "TestCaseFunction",
                    "lineno": 171
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropy",
                    "type": "TestCaseFunction",
                    "lineno": 315
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropyWithScalarInputs",
                    "type": "TestCaseFunction",
                    "lineno": 291
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalFullyReparameterized",
                    "type": "TestCaseFunction",
                    "lineno": 471
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogCDF",
                    "type": "TestCaseFunction",
                    "lineno": 218
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDF",
                    "type": "TestCaseFunction",
                    "lineno": 94
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDFMultidimensional",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 266
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalMeanAndMode",
                    "type": "TestCaseFunction",
                    "lineno": 337
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalNormalKL",
                    "type": "TestCaseFunction",
                    "lineno": 564
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalQuantile",
                    "type": "TestCaseFunction",
                    "lineno": 353
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSample",
                    "type": "TestCaseFunction",
                    "lineno": 435
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSampleMultiDimensional",
                    "type": "TestCaseFunction",
                    "lineno": 486
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShape",
                    "type": "TestCaseFunction",
                    "lineno": 531
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShapeWithPlaceholders",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalStandardDeviation",
                    "type": "TestCaseFunction",
                    "lineno": 422
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 194
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalVariance",
                    "type": "TestCaseFunction",
                    "lineno": 409
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalWithSoftplusScale",
                    "type": "TestCaseFunction",
                    "lineno": 85
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamShapes",
                    "type": "TestCaseFunction",
                    "lineno": 72
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamStaticShapes",
                    "type": "TestCaseFunction",
                    "lineno": 78
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 403
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 406
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testSampleLikeArgsGetDistDType",
                    "type": "TestCaseFunction",
                    "lineno": 61
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_once",
                    "type": "TestCaseFunction",
                    "lineno": 84
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_repeated",
                    "type": "TestCaseFunction",
                    "lineno": 1727
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizes",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithDynamicallyShapedWeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithScalarWeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithStaticShapedWeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMetricsCollection",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdates",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdatesWithWeightedValues",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndLabelsOfDifferentSizeRaisesValueError",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndWeightsOfDifferentSizeRaisesValueError",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testUpdatesCollection",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testVars",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 159
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasicCallableParams",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testMinimizeSparseResourceVariable",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testResourceBasic",
                    "type": "TestCaseFunction",
                    "lineno": 163
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::testPositiveDeltaUint8",
                    "type": "TestCaseFunction",
                    "lineno": 55
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphGradientVariable",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphModeWithGradients",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllPybind11DTypeConvertibleToDType",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConstructible",
                    "type": "TestCaseFunction",
                    "lineno": 42
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToDType",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToNumpyDtype",
                    "type": "TestCaseFunction",
                    "lineno": 59
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeInvalidArgument",
                    "type": "TestCaseFunction",
                    "lineno": 558
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeReturnsInternedVersion",
                    "type": "TestCaseFunction",
                    "lineno": 562
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization0",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization1",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization10",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization11",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization12",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization13",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization14",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization15",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization16",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization17",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization18",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization19",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization2",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization20",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization3",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization4",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization5",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization6",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization7",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization8",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization9",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSubtypes",
                    "type": "TestCaseFunction",
                    "lineno": 570
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSupertypes",
                    "type": "TestCaseFunction",
                    "lineno": 575
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypesHaveUniqueNames",
                    "type": "TestCaseFunction",
                    "lineno": 354
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testEqWithNonTFTypes",
                    "type": "TestCaseFunction",
                    "lineno": 521
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testInvalid",
                    "type": "TestCaseFunction",
                    "lineno": 94
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsComplex",
                    "type": "TestCaseFunction",
                    "lineno": 405
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsFloating",
                    "type": "TestCaseFunction",
                    "lineno": 385
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsInteger",
                    "type": "TestCaseFunction",
                    "lineno": 365
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsUnsigned",
                    "type": "TestCaseFunction",
                    "lineno": 425
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testLimitsUndefinedError",
                    "type": "TestCaseFunction",
                    "lineno": 505
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testMinMax",
                    "type": "TestCaseFunction",
                    "lineno": 445
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testNumpyConversion",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonLongConversion",
                    "type": "TestCaseFunction",
                    "lineno": 525
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonTypesConversion",
                    "type": "TestCaseFunction",
                    "lineno": 532
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRealDtype",
                    "type": "TestCaseFunction",
                    "lineno": 186
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testReduce",
                    "type": "TestCaseFunction",
                    "lineno": 544
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRepr",
                    "type": "TestCaseFunction",
                    "lineno": 509
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testStringConversion",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_noop_when_both_identical",
                    "type": "TestCaseFunction",
                    "lineno": 43
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_CanSetUnknownShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_MergesShapes",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenDimIncompatible",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenRankIncompatible",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_both_empty",
                    "type": "TestCaseFunction",
                    "lineno": 88
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less",
                    "type": "TestCaseFunction",
                    "lineno": 51
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less_and_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 63
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_equal",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_greater",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_less_but_non_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 75
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_returns_none_with_eager",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_static_check_in_graph_mode",
                    "type": "TestCaseFunction",
                    "lineno": 110
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_both_empty",
                    "type": "TestCaseFunction",
                    "lineno": 184
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_equal",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal",
                    "type": "TestCaseFunction",
                    "lineno": 144
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal_and_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_greater",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_less_equal_but_non_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 168
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_static_check_in_graph_mode",
                    "type": "TestCaseFunction",
                    "lineno": 197
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBfloat16",
                    "type": "TestCaseFunction",
                    "lineno": 93
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testCastToTypeOfVariable",
                    "type": "TestCaseFunction",
                    "lineno": 161
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testGradients",
                    "type": "TestCaseFunction",
                    "lineno": 172
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testInfNan",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testIntToFloatBoundary",
                    "type": "TestCaseFunction",
                    "lineno": 121
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testNotImplemented",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRandom",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRefDtype",
                    "type": "TestCaseFunction",
                    "lineno": 191
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testSmallValues",
                    "type": "TestCaseFunction",
                    "lineno": 84
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::testCast",
                    "type": "TestCaseFunction",
                    "lineno": 204
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::testClip",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput0",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput01",
                    "type": "TestCaseFunction",
                    "lineno": 77
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_concat",
                    "type": "TestCaseFunction",
                    "lineno": 1727
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number0",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number1",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number10",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number11",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number12",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number13",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number14",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number15",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number16",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number17",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number18",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number19",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number2",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number20",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number3",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number4",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number5",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number6",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number7",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number8",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number9",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_grad_error",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_pfor",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_xla",
                    "type": "TestCaseFunction",
                    "lineno": 50
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeInvalidOutputShape",
                    "type": "TestCaseFunction",
                    "lineno": 317
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSame",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeShapeInference",
                    "type": "TestCaseFunction",
                    "lineno": 303
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSingleStride",
                    "type": "TestCaseFunction",
                    "lineno": 22
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeValid",
                    "type": "TestCaseFunction",
                    "lineno": 105
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D1x1x1Filter",
                    "type": "TestCaseFunction",
                    "lineno": 268
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2Filter",
                    "type": "TestCaseFunction",
                    "lineno": 296
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2",
                    "type": "TestCaseFunction",
                    "lineno": 332
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2Same",
                    "type": "TestCaseFunction",
                    "lineno": 359
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DExpandedBatch",
                    "type": "TestCaseFunction",
                    "lineno": 204
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStride3",
                    "type": "TestCaseFunction",
                    "lineno": 343
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStrides",
                    "type": "TestCaseFunction",
                    "lineno": 311
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionClass3DExpandedBatch",
                    "type": "TestCaseFunction",
                    "lineno": 226
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionWith2SpatialDimensionsAndExpandedBatch",
                    "type": "TestCaseFunction",
                    "lineno": 252
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientKernelSizeMatchesInputSize",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOneFastPath",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientKernelSizeMatchesInputSize",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingDifferentStrides",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOneFastPath",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSizeMatchesInputSize",
                    "type": "TestCaseFunction",
                    "lineno": 444
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSmallerThanStride",
                    "type": "TestCaseFunction",
                    "lineno": 401
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testZeroSizedFilterThrowsIllegalArgument",
                    "type": "TestCaseFunction",
                    "lineno": 452
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::testToTensor",
                    "type": "TestCaseFunction",
                    "lineno": 69
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToInvalidTensorType",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToLongLongTensorType",
                    "type": "TestCaseFunction",
                    "lineno": 185
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorEager",
                    "type": "TestCaseFunction",
                    "lineno": 99
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorFromInvalidTensor",
                    "type": "TestCaseFunction",
                    "lineno": 196
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedArray",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedMix",
                    "type": "TestCaseFunction",
                    "lineno": 142
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTensors",
                    "type": "TestCaseFunction",
                    "lineno": 124
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTuple",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorPreferred",
                    "type": "TestCaseFunction",
                    "lineno": 152
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorProtocol",
                    "type": "TestCaseFunction",
                    "lineno": 202
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testNoConvert",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::testCumProdAndSum",
                    "type": "TestCaseFunction",
                    "lineno": 55
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testBool",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testComplex",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testFloat",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testHalfInt",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testInt",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testLargeInt",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::testDiagFlat",
                    "type": "TestCaseFunction",
                    "lineno": 145
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxGRY",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxHalf",
                    "type": "TestCaseFunction",
                    "lineno": 133
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCycling",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCyclingWithColors",
                    "type": "TestCaseFunction",
                    "lineno": 126
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCycling",
                    "type": "TestCaseFunction",
                    "lineno": 104
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCyclingWithColors",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testCreate",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseDefaultGraph",
                    "type": "TestCaseFunction",
                    "lineno": 96
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseExistingGraph",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesDeviceAssignment",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNames",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesNoDebias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScope",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScopeNoDebias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesWithControlDeps",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testBasicEager",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testCopyXlaSharding",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testImportedGraphVariablesToRestore",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNames",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNamesEager",
                    "type": "TestCaseFunction",
                    "lineno": 449
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::testArrayFill",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testDictInputs",
                    "type": "TestCaseFunction",
                    "lineno": 67
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_emptyinput",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_nonlistinput",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testLargeNInputs",
                    "type": "TestCaseFunction",
                    "lineno": 37
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testNonRectangularInputs",
                    "type": "TestCaseFunction",
                    "lineno": 55
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testTupleInputs",
                    "type": "TestCaseFunction",
                    "lineno": 43
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testUintInputs",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testDictionary",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testInvalidIndex",
                    "type": "TestCaseFunction",
                    "lineno": 108
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testMultipleElements",
                    "type": "TestCaseFunction",
                    "lineno": 138
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testName",
                    "type": "TestCaseFunction",
                    "lineno": 180
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testNumpy",
                    "type": "TestCaseFunction",
                    "lineno": 164
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testOneDimensionalArray",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testTwoDimensionalArray",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testCPUGPUMatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testDistinct",
                    "type": "TestCaseFunction",
                    "lineno": 136
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testEmptySamplingNoError",
                    "type": "TestCaseFunction",
                    "lineno": 57
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNoCSE",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallShape",
                    "type": "TestCaseFunction",
                    "lineno": 127
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallishShape",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNpDtypes",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testPositive",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSeed",
                    "type": "TestCaseFunction",
                    "lineno": 160
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSizeTooLarge",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collection",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_generator",
                    "type": "TestCaseFunction",
                    "lineno": 206
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_list",
                    "type": "TestCaseFunction",
                    "lineno": 178
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_set",
                    "type": "TestCaseFunction",
                    "lineno": 225
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_string",
                    "type": "TestCaseFunction",
                    "lineno": 240
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_tuple",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_uniquify",
                    "type": "TestCaseFunction",
                    "lineno": 168
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_default_graph",
                    "type": "TestCaseFunction",
                    "lineno": 249
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_get_collections",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_create_global_step",
                    "type": "TestCaseFunction",
                    "lineno": 67
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_global_step",
                    "type": "TestCaseFunction",
                    "lineno": 82
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_or_create_global_step",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_dtype",
                    "type": "TestCaseFunction",
                    "lineno": 31
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_shape",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testPerReplicaBatchSize",
                    "type": "TestCaseFunction",
                    "lineno": 32
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testProperties",
                    "type": "TestCaseFunction",
                    "lineno": 25
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testStr",
                    "type": "TestCaseFunction",
                    "lineno": 43
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testAddShape",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testScalarShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testShape",
                    "type": "TestCaseFunction",
                    "lineno": 69
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownDim",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignDifferentShapesAllowed",
                    "type": "TestCaseFunction",
                    "lineno": 143
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignments",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitialization",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializationOrder",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializerFunction",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testLoad",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testNoRefDataRace",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testOperators",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testResourceAssignments",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testSession",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testUseVariableAsTensor",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testZeroSizeVarSameAsConst",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::testAssertVariablesInitialized",
                    "type": "TestCaseFunction",
                    "lineno": 366
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testPartitionedVariableAssignments",
                    "type": "TestCaseFunction",
                    "lineno": 414
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testVariables",
                    "type": "TestCaseFunction",
                    "lineno": 399
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random0",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random1",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random10",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random11",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random12",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random13",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random14",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random15",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random16",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random17",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random18",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random19",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random2",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random20",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random21",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random22",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random23",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random24",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random25",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random26",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random27",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random28",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random29",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random3",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random30",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random31",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random32",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random33",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random34",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random35",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random36",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random37",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random38",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random39",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random4",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random40",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random41",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random42",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random43",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random44",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random45",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random46",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random47",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random48",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random49",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random5",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random50",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random51",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random52",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random53",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random54",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random55",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random56",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random57",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random58",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random59",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random6",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random60",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random61",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random62",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random63",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random64",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random65",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random66",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random67",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random68",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random69",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random7",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random70",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random71",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random72",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random73",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random74",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random75",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random76",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random77",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random78",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random79",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random8",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random9",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA0",
                    "type": "TestCaseFunction",
                    "lineno": 75
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA1",
                    "type": "TestCaseFunction",
                    "lineno": 75
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues0",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues1",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_difference_multirow_2d",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d_invalid_indices",
                    "type": "TestCaseFunction",
                    "lineno": 91
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_size_2d",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::testIsVariableInitialized",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testFSPath",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testGetAllVariables",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::testLaplaceLogSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::testMapStructureUpTo",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_numpy_arguments",
                    "type": "TestCaseFunction",
                    "lineno": 31
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateful",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateless",
                    "type": "TestCaseFunction",
                    "lineno": 43
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::testParamShapes",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_hash_bucket",
                    "type": "TestCaseFunction",
                    "lineno": 37
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_identity",
                    "type": "TestCaseFunction",
                    "lineno": 32
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_file",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_list",
                    "type": "TestCaseFunction",
                    "lineno": 42
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder0",
                    "type": "TestCaseFunction",
                    "lineno": 208
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder1",
                    "type": "TestCaseFunction",
                    "lineno": 208
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder2",
                    "type": "TestCaseFunction",
                    "lineno": 208
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_multiple_prints",
                    "type": "TestCaseFunction",
                    "lineno": 85
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_tf_print",
                    "type": "TestCaseFunction",
                    "lineno": 95
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 41
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testExceptionsCaptured",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testGracePeriod",
                    "type": "TestCaseFunction",
                    "lineno": 182
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testIgnoreMultiStarts",
                    "type": "TestCaseFunction",
                    "lineno": 220
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testMultipleSessions",
                    "type": "TestCaseFunction",
                    "lineno": 202
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testName",
                    "type": "TestCaseFunction",
                    "lineno": 269
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testQueueRunnerSerializationRoundTrip",
                    "type": "TestCaseFunction",
                    "lineno": 358
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRealDequeueEnqueue",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRequestStopOnException",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRespectCoordShouldStop",
                    "type": "TestCaseFunction",
                    "lineno": 140
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunners",
                    "type": "TestCaseFunction",
                    "lineno": 281
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersIgnoresMonitoredSession",
                    "type": "TestCaseFunction",
                    "lineno": 318
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersNonDefaultGraph",
                    "type": "TestCaseFunction",
                    "lineno": 335
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersRaisesIfNotASession",
                    "type": "TestCaseFunction",
                    "lineno": 302
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testThreads",
                    "type": "TestCaseFunction",
                    "lineno": 239
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testTwoOps",
                    "type": "TestCaseFunction",
                    "lineno": 64
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_bfloat16",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_float8_e4m3b11",
                    "type": "TestCaseFunction",
                    "lineno": 46
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 23
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testDType",
                    "type": "TestCaseFunction",
                    "lineno": 78
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 50
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testLimitOnly",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testMixedDType",
                    "type": "TestCaseFunction",
                    "lineno": 160
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNegativeDelta",
                    "type": "TestCaseFunction",
                    "lineno": 70
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNonInteger",
                    "type": "TestCaseFunction",
                    "lineno": 54
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testEmitDifferentStructureThanCellOutput",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopState",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopStateWithTensorArray",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNN",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNScope",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNZeroLength",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testInputOnGPUCellNotDeclared",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnCPU",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnGPU",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::testReduceLogSumExp",
                    "type": "TestCaseFunction",
                    "lineno": 29
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testNegAxes",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testSimple",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testZeros",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 443
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testComplex64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testDegenerate",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInfinity",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInt32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt16",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt8",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint16",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint8",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testUint8",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testComplex64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInfinity",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInt32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testSingleton",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 650
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testComplex64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testDegenerate",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testGradientWithZeros",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInfinity",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 767
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testDoubleReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 796
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testFloatReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 782
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient2",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient3",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient4",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testSpecialValues",
                    "type": "TestCaseFunction",
                    "lineno": 774
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 884
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testDoubleReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 927
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testFloatReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 913
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient2",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient3",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient4",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testInt64Reduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 899
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testSpecialValues",
                    "type": "TestCaseFunction",
                    "lineno": 891
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAll3D",
                    "type": "TestCaseFunction",
                    "lineno": 1025
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 1017
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 1039
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAll3D",
                    "type": "TestCaseFunction",
                    "lineno": 1074
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 1066
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 1088
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testBoolReduce1D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testDegenerate",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testExpand",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce1D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce4D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce",
                    "type": "TestCaseFunction",
                    "lineno": 1168
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce1D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce2D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testBoolBasic",
                    "type": "TestCaseFunction",
                    "lineno": 79
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testComplex64Basic",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testDoubleBasic",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testErrors",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatBasic",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 153
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeGradThreeDimensions",
                    "type": "TestCaseFunction",
                    "lineno": 137
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeThreeDimensions",
                    "type": "TestCaseFunction",
                    "lineno": 106
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimBegin",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimEnd",
                    "type": "TestCaseFunction",
                    "lineno": 118
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimOnly",
                    "type": "TestCaseFunction",
                    "lineno": 110
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt32Basic",
                    "type": "TestCaseFunction",
                    "lineno": 94
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt64Shape",
                    "type": "TestCaseFunction",
                    "lineno": 250
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testPartialShapes",
                    "type": "TestCaseFunction",
                    "lineno": 179
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testTensorShape",
                    "type": "TestCaseFunction",
                    "lineno": 235
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimBasic",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR1",
                    "type": "TestCaseFunction",
                    "lineno": 126
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR3",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimWithUnspecifiedDim",
                    "type": "TestCaseFunction",
                    "lineno": 162
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::testSerializeRestore",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testAutoConvertAndCheckData",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildCostModel",
                    "type": "TestCaseFunction",
                    "lineno": 1812
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDirect",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDist",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultGraph",
                    "type": "TestCaseFunction",
                    "lineno": 1200
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultServerTimeout",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDuplicatedInputs",
                    "type": "TestCaseFunction",
                    "lineno": 1496
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testErrorsReported",
                    "type": "TestCaseFunction",
                    "lineno": 123
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithGroupBy",
                    "type": "TestCaseFunction",
                    "lineno": 1175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatefulOperations",
                    "type": "TestCaseFunction",
                    "lineno": 1147
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatelessOperations",
                    "type": "TestCaseFunction",
                    "lineno": 1127
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedAndFetch",
                    "type": "TestCaseFunction",
                    "lineno": 1509
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedDictKeyException",
                    "type": "TestCaseFunction",
                    "lineno": 1788
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedError",
                    "type": "TestCaseFunction",
                    "lineno": 1598
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlices",
                    "type": "TestCaseFunction",
                    "lineno": 988
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlicesWithoutDenseShape",
                    "type": "TestCaseFunction",
                    "lineno": 1086
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedPrecisionLossError",
                    "type": "TestCaseFunction",
                    "lineno": 1611
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedShapeCompatibility",
                    "type": "TestCaseFunction",
                    "lineno": 1795
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholder",
                    "type": "TestCaseFunction",
                    "lineno": 823
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderConstantShape",
                    "type": "TestCaseFunction",
                    "lineno": 912
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderPartialShape",
                    "type": "TestCaseFunction",
                    "lineno": 867
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparseTensor",
                    "type": "TestCaseFunction",
                    "lineno": 757
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchAttrs",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchByNameDifferentStringTypes",
                    "type": "TestCaseFunction",
                    "lineno": 1663
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchDict",
                    "type": "TestCaseFunction",
                    "lineno": 241
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlices",
                    "type": "TestCaseFunction",
                    "lineno": 937
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlicesWithoutDenseShape",
                    "type": "TestCaseFunction",
                    "lineno": 1036
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchList",
                    "type": "TestCaseFunction",
                    "lineno": 181
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNamedTuple",
                    "type": "TestCaseFunction",
                    "lineno": 217
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestedAttrs",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingEmptyOneLevel",
                    "type": "TestCaseFunction",
                    "lineno": 360
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingOneLevel",
                    "type": "TestCaseFunction",
                    "lineno": 391
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNone",
                    "type": "TestCaseFunction",
                    "lineno": 132
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOperationObject",
                    "type": "TestCaseFunction",
                    "lineno": 643
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOrderedDict",
                    "type": "TestCaseFunction",
                    "lineno": 256
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchScalar",
                    "type": "TestCaseFunction",
                    "lineno": 603
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingleton",
                    "type": "TestCaseFunction",
                    "lineno": 145
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingletonByName",
                    "type": "TestCaseFunction",
                    "lineno": 166
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSparseTensor",
                    "type": "TestCaseFunction",
                    "lineno": 658
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTensorObject",
                    "type": "TestCaseFunction",
                    "lineno": 552
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTuple",
                    "type": "TestCaseFunction",
                    "lineno": 200
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testIncorrectGraph",
                    "type": "TestCaseFunction",
                    "lineno": 1760
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testLocalMasterSessionTimeout",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMakeCallableOnOperationWithRunOptions",
                    "type": "TestCaseFunction",
                    "lineno": 1574
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMultipleInteractiveSessionsWarning",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDirect",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDistributed",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRegisterFetchAndFeedConversionFunctions",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRunFeedDict",
                    "type": "TestCaseFunction",
                    "lineno": 1338
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testSessionInterOpThreadPool",
                    "type": "TestCaseFunction",
                    "lineno": 84
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testStringFeed",
                    "type": "TestCaseFunction",
                    "lineno": 1629
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testTimeoutWithShortOperations",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterClose",
                    "type": "TestCaseFunction",
                    "lineno": 1372
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterCloseConcurrent",
                    "type": "TestCaseFunction",
                    "lineno": 1381
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseEmptyGraph",
                    "type": "TestCaseFunction",
                    "lineno": 1401
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testDtypes",
                    "type": "TestCaseFunction",
                    "lineno": 101
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testExceptions",
                    "type": "TestCaseFunction",
                    "lineno": 41
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalDtypeWithoutMaxlen",
                    "type": "TestCaseFunction",
                    "lineno": 57
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithMaxlen",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithoutMaxlen",
                    "type": "TestCaseFunction",
                    "lineno": 68
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOutputDtype",
                    "type": "TestCaseFunction",
                    "lineno": 121
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testTwoDimensional",
                    "type": "TestCaseFunction",
                    "lineno": 78
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGrad",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGradWithNoShapeInformation",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShapeAtEval",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangular",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangularBatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquare",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquareBatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards2",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIteratorEndsBeforeFirstElem",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testLargerWorkerPool",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testName",
                    "type": "TestCaseFunction",
                    "lineno": 110
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNestedData",
                    "type": "TestCaseFunction",
                    "lineno": 27
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNumShardsLargerThanDataset",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testOffsetZero",
                    "type": "TestCaseFunction",
                    "lineno": 38
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testSimpleCase",
                    "type": "TestCaseFunction",
                    "lineno": 16
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testEmptyDataset",
                    "type": "TestCaseFunction",
                    "lineno": 163
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_3",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_4",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexGreaterThanNumElements",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexLessThanNumElements",
                    "type": "TestCaseFunction",
                    "lineno": 180
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsGreaterThanNumElementsIndexLess",
                    "type": "TestCaseFunction",
                    "lineno": 197
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne",
                    "type": "TestCaseFunction",
                    "lineno": 94
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone",
                    "type": "TestCaseFunction",
                    "lineno": 85
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds",
                    "type": "TestCaseFunction",
                    "lineno": 78
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 111
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs",
                    "type": "TestCaseFunction",
                    "lineno": 103
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize",
                    "type": "TestCaseFunction",
                    "lineno": 120
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling",
                    "type": "TestCaseFunction",
                    "lineno": 63
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds",
                    "type": "TestCaseFunction",
                    "lineno": 72
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize",
                    "type": "TestCaseFunction",
                    "lineno": 134
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::testSimpleSave",
                    "type": "TestCaseFunction",
                    "lineno": 36
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testEval",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testFalse",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg1",
                    "type": "TestCaseFunction",
                    "lineno": 102
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg2",
                    "type": "TestCaseFunction",
                    "lineno": 110
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testPlaceholderWithDefault",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testTrue",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testUnknown",
                    "type": "TestCaseFunction",
                    "lineno": 61
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::testSmallInput2x2Pad1x0",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testDirect",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimOneRemainingDim",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimZeroRemainingDims",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsOneRemainingDim",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsTwoRemainingDims",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsZeroRemainingDims",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::testSpaceToDepthTranspose",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSize0",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeLarger",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleBoth",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleHeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleWidth",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testInputWrongDimMissingBatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testUnknownShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall2",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmallPad1x1",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test0",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test1",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test2",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test3",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testNormalSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testSampleLikeArgsGetDistDType",
                    "type": "TestCaseFunction",
                    "lineno": 58
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testDeterminism",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testEmptyBatches",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testExecuteMultipleWithoutError",
                    "type": "TestCaseFunction",
                    "lineno": 112
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testThrowDeterminismError",
                    "type": "TestCaseFunction",
                    "lineno": 60
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithForwarding",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithStrings",
                    "type": "TestCaseFunction",
                    "lineno": 138
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSub",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSubGradients",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateMinMax",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices1D",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices2D",
                    "type": "TestCaseFunction",
                    "lineno": 173
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testDeterminism",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithForwarding",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithStrings",
                    "type": "TestCaseFunction",
                    "lineno": 138
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSub",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSubGradients",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateMinMax",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices1D",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices2D",
                    "type": "TestCaseFunction",
                    "lineno": 173
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::testInt32Basic",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::testConvertSingleVariable",
                    "type": "TestCaseFunction",
                    "lineno": 169
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_non_singular",
                    "type": "TestCaseFunction",
                    "lineno": 87
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_positive_definite",
                    "type": "TestCaseFunction",
                    "lineno": 82
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_self_adjoint",
                    "type": "TestCaseFunction",
                    "lineno": 92
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_is_x_flags",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 151
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 123
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 143
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 115
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_batch_shape_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_num_rows_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 103
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 127
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 97
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_ref_type_shape_args_raises",
                    "type": "TestCaseFunction",
                    "lineno": 193
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 165
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 159
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_zeros_matmul",
                    "type": "TestCaseFunction",
                    "lineno": 182
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/__init__.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py",
                    "type": "Module"
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_stops_training_in_after_save",
            "lineno": 211,
            "outcome": "passed",
            "setup": {
                "duration": 2.6015556960046524,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.35142994299530983,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_listener_stops_training_in_after_save>\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Co",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/training/training_util.py:396: Variable.initialized_value (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse Variable.read_value. Variables in 2.X are initialized automatically both in eager and graph (inside tf.defun) contexts.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/training/training_util.py:396: Variable.initialized_value (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse Variable.read_value. Variables in 2.X are initialized automatically both in eager and graph (inside tf.defun) contexts.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999073.1060333,
                        "msecs": 106.0,
                        "relativeCreated": 5977.9088497161865,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.002675021009054035,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_default_saver",
            "lineno": 235,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006219299975782633,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.27930401198682375,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_listener_with_default_saver>\nnst): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localho",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/training/saver.py:1173: get_checkpoint_mtimes (from tensorflow.python.checkpoint.checkpoint_management) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse standard file utilities to get mtimes.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/training/saver.py:1173: get_checkpoint_mtimes (from tensorflow.python.checkpoint.checkpoint_management) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse standard file utilities to get mtimes.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999073.7081575,
                        "msecs": 708.0,
                        "relativeCreated": 6580.03306388855,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0020814239978790283,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_monitored_session",
            "lineno": 179,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004626680020010099,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18803929899877403,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_listener_with_monitored_session>\nst/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localh"
            },
            "teardown": {
                "duration": 0.0018738020007731393,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_both_secs_and_steps",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004930889990646392,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011799747997429222,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raise_in_both_secs_and_steps>\n"
            },
            "teardown": {
                "duration": 0.001524301987956278,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_none_secs_and_steps",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004519700014498085,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011001232996932231,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raise_in_none_secs_and_steps>\n"
            },
            "teardown": {
                "duration": 0.0013829870003974065,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_when_saver_and_scaffold_both_present",
            "lineno": 117,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047720299335196614,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010839641996426508,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raise_when_saver_and_scaffold_both_present>\n"
            },
            "teardown": {
                "duration": 0.0014075540093472227,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_checkpoint_before_first_train_step",
            "lineno": 484,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038423799560405314,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14714605700282846,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_checkpoint_before_first_train_step>\nost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/str"
            },
            "teardown": {
                "duration": 0.0019090189889539033,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def",
            "lineno": 513,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005058949900558218,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14834321101079695,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_graph_def>\nided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices:"
            },
            "teardown": {
                "duration": 0.001758372993208468,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def_false",
            "lineno": 539,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005268879904178903,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12003027999890037,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_graph_def_false>\n (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:"
            },
            "teardown": {
                "duration": 0.0018026619945885614,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_saves_at_end",
            "lineno": 464,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004611360054695979,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11972020400571637,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_saves_at_end>\n0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/rep"
            },
            "teardown": {
                "duration": 0.0018152969860238954,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_at_begin_and_end",
            "lineno": 151,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004731289955088869,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11802558599447366,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_secs_calls_listeners_at_begin_and_end>\nlica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/re"
            },
            "teardown": {
                "duration": 0.0017933979979716241,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_periodically",
            "lineno": 360,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004575750062940642,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1410622839903226,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_secs_calls_listeners_periodically>\nplica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_s"
            },
            "teardown": {
                "duration": 0.001953594997758046,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_in_first_step",
            "lineno": 133,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048660801257938147,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10882991699327249,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_secs_saves_in_first_step>\nlice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Cons"
            },
            "teardown": {
                "duration": 0.0016548810090171173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_periodically",
            "lineno": 312,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004451489949133247,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.130052299995441,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_secs_saves_periodically>\nt): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task"
            },
            "teardown": {
                "duration": 0.0017160740098915994,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_in_first_step",
            "lineno": 411,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048726299428381026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10828051199496258,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_steps_saves_in_first_step>\n:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0"
            },
            "teardown": {
                "duration": 0.0017131219938164577,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_periodically",
            "lineno": 429,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004998479998903349,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1317775539937429,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_save_steps_saves_periodically>\n/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:"
            },
            "teardown": {
                "duration": 0.0017550229968037456,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_saves_when_saver_and_scaffold_both_missing",
            "lineno": 99,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004648020112654194,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10888473299564794,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_saves_when_saver_and_scaffold_both_missing>\n0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2"
            },
            "teardown": {
                "duration": 0.0016151199961313978,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004893450095551088,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011662240998703055,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/contextlib.py:103: TensorFlowTestCase.test_session (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `self.session()` or `self.cached_session()` instead.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/contextlib.py:103: TensorFlowTestCase.test_session (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `self.session()` or `self.cached_session()` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999075.4004598,
                        "msecs": 400.0,
                        "relativeCreated": 8272.335290908813,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0014371389988809824,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_two_listeners_with_default_saver",
            "lineno": 272,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005469159950735047,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2788117220043205,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_two_listeners_with_default_saver>\n/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add: (AddV2): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/AssignAddVariableOp: (AssignAddVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/switch_pred/_2: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_f/_3: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/pivot_t/_4: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/_5: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/global_step/Initializer/zeros/_6: (Switch): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/output/_7: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/branch_executed/_8: (Merge): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input_control_node/_9: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_10: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/input/_11: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0/Identity: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output/_12: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/then/_0/output_control_node/_13: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/then/_0: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input_control_node/_14: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_15: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/input/_16: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output/_17: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nFunc/global_step/cond/else/_1/output_control_node/_18: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/cond/else/_1: (IdentityN): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/add/y: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Const: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nglobal_step/IsInitialized/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Assign: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Read/ReadVariableOp: (ReadVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/VarIsInitializedOp: (VarIsInitializedOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables_1/stack: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/LogicalNot: (LogicalNot): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod: (Prod): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2: (StridedSlice): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/values_1: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1: (Reshape): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Where: (Where): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Squeeze: (Squeeze): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2: (GatherV2): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1: (ConcatV2): /job:localhost/replica:0/task:0/device:CPU:0\ninit_2: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_all_tables: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ninit_3: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\ngroup_deps_1: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/filename: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/Const: (PlaceholderWithDefault): /job:localhost/replica:0/task:0/device:GPU:0\nsave/StaticRegexFullMatch: (StaticRegexFullMatch): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Select: (Select): /job:localhost/replica:0/task:0/device:CPU:0\nsave/StringJoin: (StringJoin): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename: (ShardedFilename): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2: (SaveV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/control_dependency: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints/checkpoint_prefixes: (Pack): /job:localhost/replica:0/task:0/device:CPU:0\nsave/MergeV2Checkpoints: (MergeV2Checkpoints): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity: (Identity): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2: (RestoreV2): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Identity_1: (Identity): /job:localhost/replica:0/task:0/device:GPU:0\nsave/AssignVariableOp: (AssignVariableOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_shard: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nsave/restore_all: (NoOp): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step/Initializer/zeros: (Const): /job:localhost/replica:0/task:0/device:GPU:0\nglobal_step: (VarHandleOp): /job:localhost/replica:0/task:0/device:GPU:0\nreport_uninitialized_variables/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Prod/reduction_indices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Shape_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/concat/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/Reshape_1/shape: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_variables_1/boolean_mask/GatherV2/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nreport_uninitialized_resources_1/Const: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nconcat_1/axis: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/filename/input: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_1: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/Const_2: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/num_shards: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/ShardedFilename/shard: (Const): /job:localhost/replica:0/task:0"
            },
            "teardown": {
                "duration": 0.0023990240006241947,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0008391970040975139,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004892439901595935,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0020626229961635545,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_False",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005465870053740218,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005374073007260449,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_int32_False>\n"
            },
            "teardown": {
                "duration": 0.0017271860124310479,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_True",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037318799877539277,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008900004002498463,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_int32_True>\n"
            },
            "teardown": {
                "duration": 0.0016387130017392337,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_False",
            "lineno": 125,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036727699625771493,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00858815798710566,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_int64_False>\n"
            },
            "teardown": {
                "duration": 0.0017454059998271987,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_True",
            "lineno": 125,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003675719926832244,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003829470995697193,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_int64_True>\n"
            },
            "teardown": {
                "duration": 0.0016385339986300096,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_False",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034552700526546687,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006124923995230347,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_multiple_tables_False>\n"
            },
            "teardown": {
                "duration": 0.0017609430069569498,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_True",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035990000469610095,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005463042005430907,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_multiple_tables_True>\n"
            },
            "teardown": {
                "duration": 0.0018222789949504659,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003572990099200979,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003787359892157838,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0013552239979617298,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_False",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037209599395282567,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0045336170005612075,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_string_False>\n"
            },
            "teardown": {
                "duration": 0.0017729870014591143,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_True",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033961499866563827,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004164868994848803,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_string_True>\n"
            },
            "teardown": {
                "duration": 0.0017515299987280741,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_illegal_args",
            "lineno": 106,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007260380079969764,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005143900052644312,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_illegal_args>\n"
            },
            "teardown": {
                "duration": 0.0018312839965801686,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_at_end_only",
            "lineno": 117,
            "outcome": "passed",
            "setup": {
                "duration": 0.000534357997821644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020087859011255205,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_at_end_only>\n"
            },
            "teardown": {
                "duration": 0.0014197900018189102,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs",
            "lineno": 238,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003906859928974882,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03154751399415545,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_every_n_secs>\n"
            },
            "teardown": {
                "duration": 0.001459242994314991,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs_and_end",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004432299901964143,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03818922399659641,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_every_n_secs_and_end>\n"
            },
            "teardown": {
                "duration": 0.0016914500010898337,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps",
            "lineno": 175,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040353900112677366,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05782269399787765,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_every_n_steps>\n"
            },
            "teardown": {
                "duration": 0.0019654719944810495,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps_and_end",
            "lineno": 181,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004465829988475889,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05678226100280881,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_every_n_steps_and_end>\n"
            },
            "teardown": {
                "duration": 0.0016482509963680059,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_first_step",
            "lineno": 187,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044937200436834246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015761396993184462,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_first_step>\n"
            },
            "teardown": {
                "duration": 0.0019469940016278997,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_formatter",
            "lineno": 254,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003749390016309917,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016404661000706255,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_print_formatter>\n"
            },
            "teardown": {
                "duration": 0.001540709999972023,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003983469941886142,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00026557399542070925,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.0020227280037943274,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
            "lineno": 243,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006257670029299334,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.3747951950062998,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFiniteGradientAtDifficultPoints>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:252: Normal.__init__ (from tensorflow.python.ops.distributions.normal) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.\nWARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/distributions/normal.py:149: Distribution.__init__ (from tensorflow.python.ops.distributions.distribution) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:252: Normal.__init__ (from tensorflow.python.ops.distributions.normal) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999076.0346649,
                        "msecs": 34.0,
                        "relativeCreated": 8906.540393829346,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/distributions/normal.py:149: Distribution.__init__ (from tensorflow.python.ops.distributions.distribution) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999076.0365148,
                        "msecs": 36.0,
                        "relativeCreated": 8908.390283584595,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.001982105997740291,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNegativeSigmaFails",
            "lineno": 524,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047051899309735745,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0177504800085444,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNegativeSigmaFails>\n"
            },
            "teardown": {
                "duration": 0.0020061010000063106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalCDF",
            "lineno": 171,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041083899850491434,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.057698548000189476,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalCDF>\n"
            },
            "teardown": {
                "duration": 0.0022755240061087534,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropy",
            "lineno": 315,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004303119931137189,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.040537038003094494,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalEntropy>\n"
            },
            "teardown": {
                "duration": 0.0021494069951586425,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropyWithScalarInputs",
            "lineno": 291,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040925499342847615,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04109735800011549,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalEntropyWithScalarInputs>\n"
            },
            "teardown": {
                "duration": 0.001868596998974681,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalFullyReparameterized",
            "lineno": 471,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040963900391943753,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01962135599751491,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalFullyReparameterized>\n"
            },
            "teardown": {
                "duration": 0.002270591998239979,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogCDF",
            "lineno": 218,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040503600030206144,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10051006299909204,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalLogCDF>\n"
            },
            "teardown": {
                "duration": 0.00212052499409765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDF",
            "lineno": 94,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046551699051633477,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07891584500612225,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalLogPDF>\n"
            },
            "teardown": {
                "duration": 0.0023522799892816693,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDFMultidimensional",
            "lineno": 130,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005156520055606961,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07736308001040015,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalLogPDFMultidimensional>\n"
            },
            "teardown": {
                "duration": 0.0023725179926259443,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogSurvivalFunction",
            "lineno": 266,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041328900260850787,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10093207699537743,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalLogSurvivalFunction>\n"
            },
            "teardown": {
                "duration": 0.0028665879945037887,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalMeanAndMode",
            "lineno": 337,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004316749982535839,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.0437102540017804,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalMeanAndMode>\n"
            },
            "teardown": {
                "duration": 0.0028587590059032664,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalNormalKL",
            "lineno": 564,
            "outcome": "passed",
            "setup": {
                "duration": 0.000479918991914019,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04315093699551653,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalNormalKL>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:581: kl_divergence (from tensorflow.python.ops.distributions.kullback_leibler) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:581: kl_divergence (from tensorflow.python.ops.distributions.kullback_leibler) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999080.0323648,
                        "msecs": 32.0,
                        "relativeCreated": 12904.240369796753,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.002752211003098637,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalQuantile",
            "lineno": 353,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042923499131575227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2198070650047157,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalQuantile>\n"
            },
            "teardown": {
                "duration": 0.002655363001395017,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSample",
            "lineno": 435,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046313300845213234,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05529995099641383,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalSample>\n"
            },
            "teardown": {
                "duration": 0.002261251996969804,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSampleMultiDimensional",
            "lineno": 486,
            "outcome": "passed",
            "setup": {
                "duration": 0.000425983002060093,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05920157500077039,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalSampleMultiDimensional>\n"
            },
            "teardown": {
                "duration": 0.0023549269972136244,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShape",
            "lineno": 531,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042708498949650675,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02345268199860584,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalShape>\n"
            },
            "teardown": {
                "duration": 0.001568735999171622,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShapeWithPlaceholders",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045377299829851836,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022548109001945704,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalShapeWithPlaceholders>\n"
            },
            "teardown": {
                "duration": 0.0015320480015361682,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalStandardDeviation",
            "lineno": 422,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047144899144768715,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02844488699338399,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalStandardDeviation>\n"
            },
            "teardown": {
                "duration": 0.0024339969968423247,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSurvivalFunction",
            "lineno": 194,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006789780018152669,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.060860931989736855,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalSurvivalFunction>\n"
            },
            "teardown": {
                "duration": 0.0026326969964429736,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalVariance",
            "lineno": 409,
            "outcome": "passed",
            "setup": {
                "duration": 0.000521617999766022,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03212554499623366,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalVariance>\n"
            },
            "teardown": {
                "duration": 0.002511715007130988,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalWithSoftplusScale",
            "lineno": 85,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004730219952762127,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.1299237709899899,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalWithSoftplusScale>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:90: NormalWithSoftplusScale.__init__ (from tensorflow.python.ops.distributions.normal) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nUse `tfd.Normal(loc, tf.nn.softplus(scale)) instead.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:90: NormalWithSoftplusScale.__init__ (from tensorflow.python.ops.distributions.normal) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nUse `tfd.Normal(loc, tf.nn.softplus(scale)) instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999080.607901,
                        "msecs": 607.0,
                        "relativeCreated": 13479.776620864868,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0030416979861911386,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamShapes",
            "lineno": 72,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044897300540469587,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07380356600333471,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testParamShapes>\n"
            },
            "teardown": {
                "duration": 0.002529587989556603,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamStaticShapes",
            "lineno": 78,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004288140044081956,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012416879995726049,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testParamStaticShapes>\n"
            },
            "teardown": {
                "duration": 0.0018739160004770383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat32",
            "lineno": 403,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004902710061287507,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5601883609924698,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testQuantileFiniteGradientAtDifficultPointsFloat32>\n"
            },
            "teardown": {
                "duration": 0.0021677159966202453,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat64",
            "lineno": 406,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045939700794406235,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5555363609892083,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testQuantileFiniteGradientAtDifficultPointsFloat64>\n"
            },
            "teardown": {
                "duration": 0.0021752790053142235,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testSampleLikeArgsGetDistDType",
            "lineno": 61,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004643019929062575,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.252241961992695,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSampleLikeArgsGetDistDType>\n"
            },
            "teardown": {
                "duration": 0.002962275000754744,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004671380011131987,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005705880030291155,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.0022312570072244853,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007977779896464199,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042650700197555125,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001529845001641661,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_once",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041312699613627046,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.7862392929964699,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_create_variable_once>\n"
            },
            "teardown": {
                "duration": 0.0027958699938608333,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_repeated",
            "lineno": 1727,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047952099703252316,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05222459499782417,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_create_variable_repeated>\n"
            },
            "teardown": {
                "duration": 0.002384156992775388,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000595066012465395,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004444090009201318,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0018098990112775937,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizes",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007760379958199337,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.055153954002889805,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEffectivelyEquivalentSizes>\n"
            },
            "teardown": {
                "duration": 0.0020006160048069432,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithDynamicallyShapedWeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005623379984172061,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1866170819994295,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEffectivelyEquivalentSizesWithDynamicallyShapedWeight>\n"
            },
            "teardown": {
                "duration": 0.002140213007805869,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithScalarWeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005324670055415481,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.055546162999235094,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEffectivelyEquivalentSizesWithScalarWeight>\n"
            },
            "teardown": {
                "duration": 0.0018046119948849082,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithStaticShapedWeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005589739885181189,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05815523100318387,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEffectivelyEquivalentSizesWithStaticShapedWeight>\n"
            },
            "teardown": {
                "duration": 0.0017491379985585809,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMetricsCollection",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005049260071245953,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015344050989369862,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMetricsCollection>\n"
            },
            "teardown": {
                "duration": 0.001494039999670349,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdates",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005083709984319285,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09373609999602195,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleUpdates>\n"
            },
            "teardown": {
                "duration": 0.002044067994575016,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdatesWithWeightedValues",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005573109956458211,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11933610400592443,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMultipleUpdatesWithWeightedValues>\n"
            },
            "teardown": {
                "duration": 0.0020183719898341224,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndLabelsOfDifferentSizeRaisesValueError",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000534756007255055,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015116370050236583,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPredictionsAndLabelsOfDifferentSizeRaisesValueError>\n"
            },
            "teardown": {
                "duration": 0.0015324659907491878,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndWeightsOfDifferentSizeRaisesValueError",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006469020008808002,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01098030200228095,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPredictionsAndWeightsOfDifferentSizeRaisesValueError>\n"
            },
            "teardown": {
                "duration": 0.0015073200047481805,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testUpdatesCollection",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004391409893287346,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015242762994603254,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdatesCollection>\n"
            },
            "teardown": {
                "duration": 0.0022607919963775203,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testVars",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004120480007259175,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015267113005393185,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testVars>\n"
            },
            "teardown": {
                "duration": 0.0014930059987818822,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045697799941990525,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002800739894155413,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.0023157969990279526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasic",
            "lineno": 159,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007272719958564267,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18476927999290638,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic>\n"
            },
            "teardown": {
                "duration": 0.008391077994019724,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasicCallableParams",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008649939991300926,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17199438899115194,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasicCallableParams>\n"
            },
            "teardown": {
                "duration": 0.003157779006869532,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testMinimizeSparseResourceVariable",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005021240067435429,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24755380798887927,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMinimizeSparseResourceVariable>\n",
                "stderr": "2023-05-13 17:31:26.225367: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable/Adadelta_1/Assign' id:51 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable/Adadelta_1, Variable/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:26.304113: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_1/Adadelta_1/Assign' id:115 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_1/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_1/Adadelta_1, Variable_1/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0023527839948656037,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testResourceBasic",
            "lineno": 163,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004680989950429648,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.6316452949977247,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testResourceBasic>\n",
                "stderr": "2023-05-13 17:31:26.467223: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_1/Adadelta_1/Assign' id:31 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_1/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_1/Adadelta_1, Variable_1/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:26.552948: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_3/Adadelta_1/Assign' id:75 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_3/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_3/Adadelta_1, Variable_3/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:26.646969: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_5/Adadelta_1/Assign' id:119 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_5/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_5/Adadelta_1, Variable_5/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:26.745689: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_7/Adadelta_1/Assign' id:163 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_7/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_7/Adadelta_1, Variable_7/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:26.850631: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_9/Adadelta_1/Assign' id:207 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_9/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_9/Adadelta_1, Variable_9/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:26.966728: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_11/Adadelta_1/Assign' id:251 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_11/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_11/Adadelta_1, Variable_11/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:27.086847: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_13/Adadelta_1/Assign' id:295 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_13/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_13/Adadelta_1, Variable_13/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:27.212929: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_15/Adadelta_1/Assign' id:339 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_15/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_15/Adadelta_1, Variable_15/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:27.344523: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_17/Adadelta_1/Assign' id:383 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_17/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_HALF, validate_shape=false, _device=\"/device:GPU:0\"](Variable_17/Adadelta_1, Variable_17/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:27.477167: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_19/Adadelta_1/Assign' id:427 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_19/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_19/Adadelta_1, Variable_19/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:27.617655: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_21/Adadelta_1/Assign' id:465 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_21/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_21/Adadelta_1, Variable_21/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:27.766868: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_23/Adadelta_1/Assign' id:503 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_23/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_23/Adadelta_1, Variable_23/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:27.925443: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_25/Adadelta_1/Assign' id:541 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_25/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_25/Adadelta_1, Variable_25/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:28.090057: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_27/Adadelta_1/Assign' id:579 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_27/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_27/Adadelta_1, Variable_27/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:28.261497: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_29/Adadelta_1/Assign' id:617 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_29/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_29/Adadelta_1, Variable_29/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:28.441580: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_31/Adadelta_1/Assign' id:655 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_31/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_31/Adadelta_1, Variable_31/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:31:28.627571: W tensorflow/c/c_api.cc:291] Operation '{name:'Variable_33/Adadelta_1/Assign' id:693 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node Variable_33/Adadelta_1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](Variable_33/Adadelta_1, Variable_33/Adadelta_1/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0043882049940293655,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0008039770036702976,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006223439995665103,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0020794449956156313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::testPositiveDeltaUint8",
            "lineno": 55,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007572319882456213,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01255018200026825,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPositiveDeltaUint8>\n"
            },
            "teardown": {
                "duration": 0.0021098079887451604,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004469270061235875,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00035965899587608874,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015282660024240613,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphGradientVariable",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006517150031868368,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0691010680020554,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGraphGradientVariable>\n"
            },
            "teardown": {
                "duration": 0.0030584779888158664,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphModeWithGradients",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004348070069681853,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.051851994008757174,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGraphModeWithGradients>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/autograph/pyct/static_analysis/liveness.py:83: Analyzer.lamba_check (from tensorflow.python.autograph.pyct.static_analysis.liveness) is deprecated and will be removed after 2023-09-23.\nInstructions for updating:\nLambda fuctions will be no more assumed to be used in the statement where they are used, or at least in the same block. https://github.com/tensorflow/tensorflow/issues/56089\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/autograph/pyct/static_analysis/liveness.py:83: Analyzer.lamba_check (from tensorflow.python.autograph.pyct.static_analysis.liveness) is deprecated and will be removed after 2023-09-23.\nInstructions for updating:\nLambda fuctions will be no more assumed to be used in the statement where they are used, or at least in the same block. https://github.com/tensorflow/tensorflow/issues/56089",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999089.1120417,
                        "msecs": 112.0,
                        "relativeCreated": 21983.917236328125,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0021929669892415404,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00042372300231363624,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042024499271064997,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016763510066084564,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllPybind11DTypeConvertibleToDType",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007122789975255728,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001336412999080494,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAllPybind11DTypeConvertibleToDType>\n"
            },
            "teardown": {
                "duration": 0.0013834480050718412,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConstructible",
            "lineno": 42,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003582459903554991,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004822249902645126,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAllTypesConstructible>\n"
            },
            "teardown": {
                "duration": 0.0014390349970199168,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToDType",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005828300054417923,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008849559962982312,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAllTypesConvertibleToDType>\n"
            },
            "teardown": {
                "duration": 0.0020094689971301705,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToNumpyDtype",
            "lineno": 59,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040339499537367374,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0017021110106725246,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAllTypesConvertibleToNumpyDtype>\n"
            },
            "teardown": {
                "duration": 0.0016696289967512712,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeInvalidArgument",
            "lineno": 558,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003789689944824204,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039418200321961194,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAsDtypeInvalidArgument>\n"
            },
            "teardown": {
                "duration": 0.0013829839881509542,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeReturnsInternedVersion",
            "lineno": 562,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040201500814873725,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004205069999443367,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAsDtypeReturnsInternedVersion>\n"
            },
            "teardown": {
                "duration": 0.0014013809995958582,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization0",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042909001058433205,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004586239956552163,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization0>\n"
            },
            "teardown": {
                "duration": 0.0018885600002249703,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization1",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003419799904804677,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040901999454945326,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization1>\n"
            },
            "teardown": {
                "duration": 0.0013550419971579686,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization10",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041460301144979894,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047984300181269646,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization10>\n"
            },
            "teardown": {
                "duration": 0.001466774003347382,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization11",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035303599725011736,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040164000529330224,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization11>\n"
            },
            "teardown": {
                "duration": 0.0013656209921464324,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization12",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.000466376994154416,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046773499343544245,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization12>\n"
            },
            "teardown": {
                "duration": 0.0018597829912323505,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization13",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003402450092835352,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041299300210084766,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization13>\n"
            },
            "teardown": {
                "duration": 0.001673179998761043,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization14",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003685470001073554,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043729601020459086,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization14>\n"
            },
            "teardown": {
                "duration": 0.0013715739914914593,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization15",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035253699752502143,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043544800428207964,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization15>\n"
            },
            "teardown": {
                "duration": 0.0013691920030396432,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization16",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003567889943951741,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043757799721788615,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization16>\n"
            },
            "teardown": {
                "duration": 0.0020598490082193166,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization17",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003485549968900159,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039965899486560374,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization17>\n"
            },
            "teardown": {
                "duration": 0.0014279130118666217,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization18",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003535020077833906,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004686219908762723,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization18>\n"
            },
            "teardown": {
                "duration": 0.0015586249937769026,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization19",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.000372961992979981,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004106720007257536,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization19>\n"
            },
            "teardown": {
                "duration": 0.0013866559893358499,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization2",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004412260022945702,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004917879996355623,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization2>\n"
            },
            "teardown": {
                "duration": 0.0019803399918600917,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization20",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.000345836000633426,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040043699846137315,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization20>\n"
            },
            "teardown": {
                "duration": 0.00138186699768994,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization3",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034298600803595036,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043711999023798853,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization3>\n"
            },
            "teardown": {
                "duration": 0.0013589339941972867,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization4",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005045959987910464,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006782400014344603,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization4>\n"
            },
            "teardown": {
                "duration": 0.0014003460091771558,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization5",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.000340568003593944,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043028200161643326,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization5>\n"
            },
            "teardown": {
                "duration": 0.0018821909907273948,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization6",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.000406963998102583,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039026800368446857,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization6>\n"
            },
            "teardown": {
                "duration": 0.001349212005152367,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization7",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035544899583328515,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043345299491193146,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization7>\n"
            },
            "teardown": {
                "duration": 0.001608463004231453,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization8",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035180800477974117,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038923899410292506,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization8>\n"
            },
            "teardown": {
                "duration": 0.0013259060069685802,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization9",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034174199390690774,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045721700007561594,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSerialization9>\n"
            },
            "teardown": {
                "duration": 0.001774186996044591,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSubtypes",
            "lineno": 570,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003473979886621237,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003321490075904876,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSubtypes>\n"
            },
            "teardown": {
                "duration": 0.0014272749976953492,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSupertypes",
            "lineno": 575,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004490879946388304,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00035094600752927363,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypeSupertypes>\n"
            },
            "teardown": {
                "duration": 0.0013884680083720013,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypesHaveUniqueNames",
            "lineno": 354,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003466829948592931,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004730950022349134,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDTypesHaveUniqueNames>\n"
            },
            "teardown": {
                "duration": 0.0015471170045202598,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testEqWithNonTFTypes",
            "lineno": 521,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038394601142499596,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00035329900856595486,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEqWithNonTFTypes>\n"
            },
            "teardown": {
                "duration": 0.0017653859977144748,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testInvalid",
            "lineno": 94,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038846000097692013,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006538549932884052,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInvalid>\n"
            },
            "teardown": {
                "duration": 0.0013898890028940514,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsComplex",
            "lineno": 405,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003635980101535097,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003868670028168708,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIsComplex>\n"
            },
            "teardown": {
                "duration": 0.0023576910025440156,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsFloating",
            "lineno": 385,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003348280006321147,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038548199518118054,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIsFloating>\n"
            },
            "teardown": {
                "duration": 0.0013674299989361316,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsInteger",
            "lineno": 365,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003615400055423379,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005156519910087809,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIsInteger>\n"
            },
            "teardown": {
                "duration": 0.0025295639934483916,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsUnsigned",
            "lineno": 425,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003497599973343313,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003694629995152354,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIsUnsigned>\n"
            },
            "teardown": {
                "duration": 0.0015428430051542819,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testLimitsUndefinedError",
            "lineno": 505,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035575499350670725,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043253100011497736,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLimitsUndefinedError>\n"
            },
            "teardown": {
                "duration": 0.0014574959932360798,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testMinMax",
            "lineno": 445,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038353299896698445,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0024592690024292096,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMinMax>\n<dtype: 'float32'>: -3.4028235e+38 - 3.4028235e+38\n<dtype: 'float64'>: -1.7976931348623157e+308 - 1.7976931348623157e+308\n<dtype: 'int32'>: -2147483648 - 2147483647\n<dtype: 'uint8'>: 0 - 255\n<dtype: 'int16'>: -32768 - 32767\n<dtype: 'int8'>: -128 - 127\n<dtype: 'int64'>: -9223372036854775808 - 9223372036854775807\n<dtype: 'bfloat16'>: -3.38953e+38 - 3.38953e+38\n<dtype: 'uint16'>: 0 - 65535\n<dtype: 'float16'>: -65500.0 - 65500.0\n<dtype: 'uint32'>: 0 - 4294967295\n<dtype: 'uint64'>: 0 - 18446744073709551615\n<dtype: 'float32_ref'>: -3.4028235e+38 - 3.4028235e+38\n<dtype: 'float64_ref'>: -1.7976931348623157e+308 - 1.7976931348623157e+308\n<dtype: 'int32_ref'>: -2147483648 - 2147483647\n<dtype: 'uint8_ref'>: 0 - 255\n<dtype: 'int16_ref'>: -32768 - 32767\n<dtype: 'int8_ref'>: -128 - 127\n<dtype: 'int64_ref'>: -9223372036854775808 - 9223372036854775807\n<dtype: 'bfloat16_ref'>: -3.38953e+38 - 3.38953e+38\n<dtype: 'uint16_ref'>: 0 - 65535\n<dtype: 'float16_ref'>: -65500.0 - 65500.0\n<dtype: 'uint32_ref'>: 0 - 4294967295\n<dtype: 'uint64_ref'>: 0 - 18446744073709551615\n"
            },
            "teardown": {
                "duration": 0.0015907219931250438,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testNumpyConversion",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034687200968619436,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006386120076058432,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNumpyConversion>\n"
            },
            "teardown": {
                "duration": 0.0018680020002648234,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonLongConversion",
            "lineno": 525,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003623810043791309,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00036507299228105694,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPythonLongConversion>\n"
            },
            "teardown": {
                "duration": 0.0014142940053716302,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonTypesConversion",
            "lineno": 532,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004254279920132831,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000398335003410466,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPythonTypesConversion>\n"
            },
            "teardown": {
                "duration": 0.001413770005456172,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRealDtype",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034906200016848743,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003705790004460141,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRealDtype>\n"
            },
            "teardown": {
                "duration": 0.0016727740003261715,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testReduce",
            "lineno": 544,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041828499524854124,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011938950046896935,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReduce>\n"
            },
            "teardown": {
                "duration": 0.0018039749993477017,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRepr",
            "lineno": 509,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000388542001019232,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044220700510777533,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRepr>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/as_dtype_test.py', 510, 'Skipped: b/142725777')"
            },
            "teardown": {
                "duration": 0.0013924469967605546,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testStringConversion",
            "lineno": 195,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034350100031588227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006545759970322251,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStringConversion>\n"
            },
            "teardown": {
                "duration": 0.0013840579922543839,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003491670067887753,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003519279998727143,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002341551997233182,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_noop_when_both_identical",
            "lineno": 43,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006276940112002194,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011846915003843606,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_noop_when_both_identical>\n"
            },
            "teardown": {
                "duration": 0.0014087140007177368,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003785640001296997,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00036020200059283525,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0013965479884063825,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004081069928361103,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0018674769962672144,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStaticShape>\n"
            },
            "teardown": {
                "duration": 0.002102686994476244,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_CanSetUnknownShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000517137988936156,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0033078550040954724,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStaticShape_CanSetUnknownShape>\n"
            },
            "teardown": {
                "duration": 0.001373188992147334,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_MergesShapes",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038118299562484026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001539680000860244,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStaticShape_MergesShapes>\n"
            },
            "teardown": {
                "duration": 0.0019745950121432543,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenDimIncompatible",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005112719954922795,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015821679990040138,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStaticShape_RaisesErrorWhenDimIncompatible>\n"
            },
            "teardown": {
                "duration": 0.0017647639906499535,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenRankIncompatible",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003721370012499392,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014587639889214188,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStaticShape_RaisesErrorWhenRankIncompatible>\n"
            },
            "teardown": {
                "duration": 0.001401954999892041,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003488289949018508,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045607400534208864,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015884930035099387,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_both_empty",
            "lineno": 88,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006822110008215532,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05616133299190551,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_both_empty>\n"
            },
            "teardown": {
                "duration": 0.002227691002190113,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less",
            "lineno": 51,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045849199523217976,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.033386261013220064,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_less>\n"
            },
            "teardown": {
                "duration": 0.0029209560016170144,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less_and_broadcastable_shapes",
            "lineno": 63,
            "outcome": "passed",
            "setup": {
                "duration": 0.0026907190040219575,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04796887699922081,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_less_and_broadcastable_shapes>\n"
            },
            "teardown": {
                "duration": 0.002372115006437525,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_equal",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006137329910416156,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016823734011268243,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raises_when_equal>\n"
            },
            "teardown": {
                "duration": 0.0017971060005947948,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_greater",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005348929989850149,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018142670989618637,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raises_when_greater>\n"
            },
            "teardown": {
                "duration": 0.0018564260099083185,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_less_but_non_broadcastable_shapes",
            "lineno": 75,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005825260013807565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01705695099371951,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raises_when_less_but_non_broadcastable_shapes>\n"
            },
            "teardown": {
                "duration": 0.0020262449979782104,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_returns_none_with_eager",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006157330062706023,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006561938003869727,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_returns_none_with_eager>\n"
            },
            "teardown": {
                "duration": 0.002160932999686338,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006259849906200543,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005798280035378411,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002329519993509166,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_static_check_in_graph_mode",
            "lineno": 110,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005404880066635087,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006557025000802241,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_static_check_in_graph_mode>\n"
            },
            "teardown": {
                "duration": 0.0020100499968975782,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_both_empty",
            "lineno": 184,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007339619915001094,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08334728400222957,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_both_empty>\n",
                "stderr": "ERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/AssertGuard/Identity' type=Identity>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\nERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\nERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/AssertGuard/Identity' type=Identity>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683999089.5997436,
                        "msecs": 599.0,
                        "relativeCreated": 22471.61912918091,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683999089.6005538,
                        "msecs": 600.0,
                        "relativeCreated": 22472.429275512695,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683999089.6010966,
                        "msecs": 601.0,
                        "relativeCreated": 22472.97215461731,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0033464830048615113,
                "outcome": "passed",
                "stderr": "ERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/AssertGuard/Identity' type=Identity>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/AssertGuard/Identity' type=Identity>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683999089.6645455,
                        "msecs": 664.0,
                        "relativeCreated": 22536.421060562134,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_equal",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006427019980037585,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.046520995994796976,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_equal>\n"
            },
            "teardown": {
                "duration": 0.002701434990740381,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal",
            "lineno": 144,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007391789986286312,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04810103299678303,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_less_equal>\n",
                "stderr": "ERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683999089.720603,
                        "msecs": 720.0,
                        "relativeCreated": 22592.47851371765,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.002885010006139055,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal_and_broadcastable_shapes",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006353019998641685,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.051336318007088266,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_doesnt_raise_when_less_equal_and_broadcastable_shapes>\n",
                "stderr": "ERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683999089.7878375,
                        "msecs": 787.0,
                        "relativeCreated": 22659.71302986145,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0027591389953158796,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_greater",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007156170031521469,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019626110006356612,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raises_when_greater>\n"
            },
            "teardown": {
                "duration": 0.002853983998647891,
                "outcome": "passed",
                "stderr": "ERROR:tensorflow:==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 382, in _binary_assert\n    with ops.name_scope(name, opname, [x, y, data]):  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683999089.8486211,
                        "msecs": 848.0,
                        "relativeCreated": 22720.496654510498,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_less_equal_but_non_broadcastable_shapes",
            "lineno": 168,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005828249995829538,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02097055500780698,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_raises_when_less_equal_but_non_broadcastable_shapes>\n"
            },
            "teardown": {
                "duration": 0.0022388350043911487,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006106280052335933,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005155239923624322,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001984838003409095,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_static_check_in_graph_mode",
            "lineno": 197,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006706909916829318,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006655984005192295,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_static_check_in_graph_mode>\n"
            },
            "teardown": {
                "duration": 0.0020074900094186887,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBasic",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007020089979050681,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.423732563998783,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py:1940: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.config.list_physical_devices('GPU')` instead.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py:1940: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.config.list_physical_devices('GPU')` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999089.9937146,
                        "msecs": 993.0,
                        "relativeCreated": 22865.59009552002,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.007772600001771934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBfloat16",
            "lineno": 93,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007183999987319112,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00925612699938938,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBfloat16>\n***B /job:localhost/replica:0/task:0/device:GPU:0\n"
            },
            "teardown": {
                "duration": 0.0025969389971578494,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testCastToTypeOfVariable",
            "lineno": 161,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007338619907386601,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014553039000020362,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCastToTypeOfVariable>\n"
            },
            "teardown": {
                "duration": 0.0028472370031522587,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testGradients",
            "lineno": 172,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006877289997646585,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11158297400106676,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradients>\n"
            },
            "teardown": {
                "duration": 0.003723378002177924,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testInfNan",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.000699669006280601,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06437423500756267,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfNan>\n"
            },
            "teardown": {
                "duration": 0.002814926003338769,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testIntToFloatBoundary",
            "lineno": 121,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006714379996992648,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006083642001613043,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIntToFloatBoundary>\n"
            },
            "teardown": {
                "duration": 0.002422511999611743,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testNotImplemented",
            "lineno": 158,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007461880013579503,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0036069400084670633,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3490,
                    "message": "AssertionError: Exception of type <class 'tensorflow.python.framework.errors_impl.InvalidArgumentError'>: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Cast]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/cast_test.py",
                        "lineno": 160,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/cast_test.py",
                        "lineno": 152,
                        "message": "in _OpError"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/contextlib.py",
                        "lineno": 153,
                        "message": "in __exit__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3490,
                        "message": "AssertionError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testNotImplemented>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testNotImplemented>\nexception_type = <class 'tensorflow.python.framework.errors_impl.OpError'>\nexpected_err_re_or_predicate = 'Cast.*int.*string.*'\n\n    @contextlib.contextmanager\n    def assertRaisesWithPredicateMatch(self, exception_type,\n                                       expected_err_re_or_predicate):\n      \"\"\"Returns a context manager to enclose code expected to raise an exception.\n    \n      If the exception is an OpError, the op stack is also included in the message\n      predicate search.\n    \n      Args:\n        exception_type: The expected type of exception that should be raised.\n        expected_err_re_or_predicate: If this is callable, it should be a function\n          of one argument that inspects the passed-in exception and returns True\n          (success) or False (please fail the test). Otherwise, the error message\n          is expected to match this regular expression partially.\n    \n      Returns:\n        A context manager to surround code that is expected to raise an\n        exception.\n      \"\"\"\n      if callable(expected_err_re_or_predicate):\n        predicate = expected_err_re_or_predicate\n      else:\n    \n        def predicate(e):\n          err_str = e.message if isinstance(e, errors.OpError) else str(e)\n          op = e.op if isinstance(e, errors.OpError) else None\n          while op is not None:\n            err_str += \"\\nCaused by: \" + op.name\n            op = op._original_op  # pylint: disable=protected-access\n          logging.info(\"Searching within error strings: '%s' within '%s'\",\n                       expected_err_re_or_predicate, err_str)\n          return re.search(expected_err_re_or_predicate, err_str)\n    \n      try:\n>       yield\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py:3486: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testNotImplemented>\nx = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), dtype = tf.string\nerr = 'Cast.*int.*string.*'\n\n    def _OpError(self, x, dtype, err):\n      with self.assertRaisesOpError(err):\n        timer = tensorflow_op_timer()\n        with timer:\n>         test = math_ops.cast(x, dtype)\n\nsrc/tensorflow_tests_reduced/cast_test.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), tf.string)\nkwargs = {}\n\n    def error_handler(*args, **kwargs):\n      try:\n        if not is_traceback_filtering_enabled():\n>         return fn(*args, **kwargs)\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), tf.string)\nkwargs = {}, result = NotImplemented\n\n    @traceback_utils.filter_traceback\n    def op_dispatch_handler(*args, **kwargs):\n      \"\"\"Call `dispatch_target`, peforming dispatch when appropriate.\"\"\"\n    \n      # Type-based dispatch system (dispatch v2):\n      if api_dispatcher is not None:\n        if iterable_params is not None:\n          args, kwargs = replace_iterable_params(args, kwargs, iterable_params)\n        result = api_dispatcher.Dispatch(args, kwargs)\n        if result is not NotImplemented:\n          return result\n    \n      # Fallback dispatch system (dispatch v1):\n      try:\n>       return dispatch_target(*args, **kwargs)\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nx = <tf.Tensor: shape=(10,), dtype=int64, numpy=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])>\ndtype = tf.string, name = None\n\n    @tf_export(\"cast\", \"dtypes.cast\")\n    @dispatch.register_unary_elementwise_api\n    @dispatch.add_dispatch_support\n    def cast(x, dtype, name=None):\n      \"\"\"Casts a tensor to a new type.\n    \n      The operation casts `x` (in case of `Tensor`) or `x.values`\n      (in case of `SparseTensor` or `IndexedSlices`) to `dtype`.\n    \n      For example:\n    \n      >>> x = tf.constant([1.8, 2.2], dtype=tf.float32)\n      >>> tf.cast(x, tf.int32)\n      <tf.Tensor: shape=(2,), dtype=int32, numpy=array([1, 2], dtype=int32)>\n    \n      Notice `tf.cast` has an alias `tf.dtypes.cast`:\n    \n      >>> x = tf.constant([1.8, 2.2], dtype=tf.float32)\n      >>> tf.dtypes.cast(x, tf.int32)\n      <tf.Tensor: shape=(2,), dtype=int32, numpy=array([1, 2], dtype=int32)>\n    \n      The operation supports data types (for `x` and `dtype`) of\n      `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `int32`, `int64`,\n      `float16`, `float32`, `float64`, `complex64`, `complex128`, `bfloat16`.\n      In case of casting from complex types (`complex64`, `complex128`) to real\n      types, only the real part of `x` is returned. In case of casting from real\n      types to complex types (`complex64`, `complex128`), the imaginary part of the\n      returned value is set to `0`. The handling of complex types here matches the\n      behavior of numpy.\n    \n      Note casting nan and inf values to integral types has undefined behavior.\n    \n      Args:\n        x: A `Tensor` or `SparseTensor` or `IndexedSlices` of numeric type. It could\n          be `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `int32`,\n          `int64`, `float16`, `float32`, `float64`, `complex64`, `complex128`,\n          `bfloat16`.\n        dtype: The destination type. The list of supported dtypes is the same as\n          `x`.\n        name: A name for the operation (optional).\n    \n      Returns:\n        A `Tensor` or `SparseTensor` or `IndexedSlices` with same shape as `x` and\n          same type as `dtype`.\n    \n      Raises:\n        TypeError: If `x` cannot be cast to the `dtype`.\n      \"\"\"\n      base_type = dtypes.as_dtype(dtype).base_dtype\n      if isinstance(x,\n                    (ops.Tensor, _resource_variable_type)) and base_type == x.dtype:\n        return x\n      with ops.name_scope(name, \"Cast\", [x]) as name:\n        if isinstance(x, sparse_tensor.SparseTensor):\n          values_cast = cast(x.values, base_type, name=name)\n          x = sparse_tensor.SparseTensor(x.indices, values_cast, x.dense_shape)\n        elif isinstance(x, indexed_slices.IndexedSlices):\n          values_cast = cast(x.values, base_type, name=name)\n          x = indexed_slices.IndexedSlices(values_cast, x.indices, x.dense_shape)\n        else:\n          # TODO(josh11b): If x is not already a Tensor, we could return\n          # ops.convert_to_tensor(x, dtype=dtype, ...)  here, but that\n          # allows some conversions that cast() can't do, e.g. casting numbers to\n          # strings.\n          x = ops.convert_to_tensor(x, name=\"x\")\n          if x.dtype != base_type:\n>           x = gen_math_ops.cast(x, base_type, name=name)\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/math_ops.py:1003: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nx = <tf.Tensor: shape=(10,), dtype=int64, numpy=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])>\nDstT = tf.string, Truncate = False, name = None\n\n    def cast(x, DstT, Truncate=False, name=None):\n      r\"\"\"Cast x of type SrcT to y of DstT.\n    \n      Args:\n        x: A `Tensor`.\n        DstT: A `tf.DType`.\n        Truncate: An optional `bool`. Defaults to `False`.\n        name: A name for the operation (optional).\n    \n      Returns:\n        A `Tensor` of type `DstT`.\n      \"\"\"\n      _ctx = _context._context or _context.context()\n      tld = _ctx._thread_local_data\n      if tld.is_eager:\n        try:\n          _result = pywrap_tfe.TFE_Py_FastPathExecute(\n            _ctx, \"Cast\", name, x, \"DstT\", DstT, \"Truncate\", Truncate)\n          return _result\n        except _core._NotOkStatusException as e:\n>         _ops.raise_from_not_ok_status(e, name)\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_math_ops.py:2001: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Cast]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testNotImplemented>\n\n    def testNotImplemented(self):\n>     self._OpError(np.arange(0, 10), dtypes.string, \"Cast.*int.*string.*\")\n\nsrc/tensorflow_tests_reduced/cast_test.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/cast_test.py:152: in _OpError\n    with self.assertRaisesOpError(err):\n../miniconda3/lib/python3.10/contextlib.py:153: in __exit__\n    self.gen.throw(typ, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testNotImplemented>\nexception_type = <class 'tensorflow.python.framework.errors_impl.OpError'>\nexpected_err_re_or_predicate = 'Cast.*int.*string.*'\n\n    @contextlib.contextmanager\n    def assertRaisesWithPredicateMatch(self, exception_type,\n                                       expected_err_re_or_predicate):\n      \"\"\"Returns a context manager to enclose code expected to raise an exception.\n    \n      If the exception is an OpError, the op stack is also included in the message\n      predicate search.\n    \n      Args:\n        exception_type: The expected type of exception that should be raised.\n        expected_err_re_or_predicate: If this is callable, it should be a function\n          of one argument that inspects the passed-in exception and returns True\n          (success) or False (please fail the test). Otherwise, the error message\n          is expected to match this regular expression partially.\n    \n      Returns:\n        A context manager to surround code that is expected to raise an\n        exception.\n      \"\"\"\n      if callable(expected_err_re_or_predicate):\n        predicate = expected_err_re_or_predicate\n      else:\n    \n        def predicate(e):\n          err_str = e.message if isinstance(e, errors.OpError) else str(e)\n          op = e.op if isinstance(e, errors.OpError) else None\n          while op is not None:\n            err_str += \"\\nCaused by: \" + op.name\n            op = op._original_op  # pylint: disable=protected-access\n          logging.info(\"Searching within error strings: '%s' within '%s'\",\n                       expected_err_re_or_predicate, err_str)\n          return re.search(expected_err_re_or_predicate, err_str)\n    \n      try:\n        yield\n        self.fail(exception_type.__name__ + \" not raised\")\n      except Exception as e:  # pylint: disable=broad-except\n        if not isinstance(e, exception_type) or not predicate(e):\n>         raise AssertionError(\"Exception of type %s: %s\" %\n                               (str(type(e)), str(e)))\nE         AssertionError: Exception of type <class 'tensorflow.python.framework.errors_impl.InvalidArgumentError'>: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Cast]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py:3490: AssertionError"
            },
            "teardown": {
                "duration": 0.0034670570021262392,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRandom",
            "lineno": 109,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006885870097903535,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8697374180046609,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRandom>\n"
            },
            "teardown": {
                "duration": 0.006804189004469663,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRefDtype",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006377120007527992,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012073123987647705,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRefDtype>\n"
            },
            "teardown": {
                "duration": 0.001972204991034232,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testSmallValues",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005466250004246831,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3643223440012662,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmallValues>\n"
            },
            "teardown": {
                "duration": 0.007692792991292663,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0009736500069266185,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000602911997702904,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0029326530057005584,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::testCast",
            "lineno": 204,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006293479964369908,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005249479989288375,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCast>\n"
            },
            "teardown": {
                "duration": 0.00237775499408599,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005110219935886562,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005002079997211695,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002530126992496662,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::testClip",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006287940050242469,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.32627457499620505,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testClip>\n"
            },
            "teardown": {
                "duration": 0.0060551490023499355,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0009528899972792715,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007603900012327358,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0025533059961162508,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput0",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008043359994189814,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.319577900998411,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOutputAndGradient2DInput0>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/compute_gradient_error_test.py:56: compute_gradient_error (from tensorflow.python.ops.gradient_checker) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.test.compute_gradient in 2.0, which has better support for functions. Note that the two versions have different usage, so code change is needed.\nWARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gradient_checker.py:390: compute_gradient (from tensorflow.python.ops.gradient_checker) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.test.compute_gradient in 2.0, which has better support for functions. Note that the two versions have different usage, so code change is needed.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/compute_gradient_error_test.py:56: compute_gradient_error (from tensorflow.python.ops.gradient_checker) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.test.compute_gradient in 2.0, which has better support for functions. Note that the two versions have different usage, so code change is needed.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999093.6746478,
                        "msecs": 674.0,
                        "relativeCreated": 26546.523332595825,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gradient_checker.py:390: compute_gradient (from tensorflow.python.ops.gradient_checker) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.test.compute_gradient in 2.0, which has better support for functions. Note that the two versions have different usage, so code change is needed.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999093.6748948,
                        "msecs": 674.0,
                        "relativeCreated": 26546.770334243774,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0025057309976546094,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput01",
            "lineno": 77,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005443330010166392,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.6455230889987433,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOutputAndGradient2DInput01>\n"
            },
            "teardown": {
                "duration": 0.0018930229998659343,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004904039960820228,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004218300018692389,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016574899927945808,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_concat",
            "lineno": 1727,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007261130085680634,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026496770005906,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ConcatV2]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1732,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/concat_test.py",
                        "lineno": 44,
                        "message": "in test_concat"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/tensor_array_ops.py",
                        "lineno": 1232,
                        "message": "in concat"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/tensor_array_ops.py",
                        "lineno": 875,
                        "message": "in concat"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py",
                        "lineno": 1821,
                        "message": "in concat"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 1262,
                        "message": "in concat_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_concat>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.concat_test.TensorArrayOpsTest testMethod=test_concat>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if not tf2.enabled():\n        self.skipTest(\"Test is only compatible with v2\")\n    \n>     return f(self, *args, **kwargs)\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py:1732: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/concat_test.py:44: in test_concat\n    result = values.concat()\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/tensor_array_ops.py:1232: in concat\n    return self._implementation.concat(name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/tensor_array_ops.py:875: in concat\n    return array_ops.concat(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py:1821: in concat\n    return gen_array_ops.concat_v2(values=values, axis=axis, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py:1262: in concat_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ConcatV2]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002580636995844543,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004483130032895133,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042871999903582036,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001691280005616136,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number0",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.000696150993462652,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006320349930319935,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number0>\n"
            },
            "teardown": {
                "duration": 0.0018380190012976527,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number1",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005235120042925701,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005560280114877969,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number1>\n"
            },
            "teardown": {
                "duration": 0.0021505650074686855,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number10",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005463939887704328,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005625709891319275,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number10>\n"
            },
            "teardown": {
                "duration": 0.001895961002446711,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number11",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004961520025972277,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000518068001838401,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number11>\n"
            },
            "teardown": {
                "duration": 0.001450472991564311,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number12",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004292209923733026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003960570029448718,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number12>\n"
            },
            "teardown": {
                "duration": 0.0014068489981582388,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number13",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037787400651723146,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003739359963219613,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number13>\n"
            },
            "teardown": {
                "duration": 0.002062657003989443,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number14",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040737800009083003,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004039659979753196,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number14>\n"
            },
            "teardown": {
                "duration": 0.0015886879991739988,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number15",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005332989967428148,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047592299233656377,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number15>\n"
            },
            "teardown": {
                "duration": 0.0018304859986528754,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number16",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036440399708226323,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005522840074263513,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number16>\n"
            },
            "teardown": {
                "duration": 0.0016443079948658124,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number17",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.000369727989891544,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000466448997030966,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number17>\n"
            },
            "teardown": {
                "duration": 0.0021172250126255676,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number18",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003574029979063198,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042589700024109334,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number18>\n"
            },
            "teardown": {
                "duration": 0.0015167280071182176,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number19",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003592610009945929,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004549430013867095,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number19>\n"
            },
            "teardown": {
                "duration": 0.0017143790028057992,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number2",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035029600257985294,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004290710057830438,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number2>\n"
            },
            "teardown": {
                "duration": 0.0015043820021674037,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number20",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036241499765310436,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004550459998426959,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number20>\n"
            },
            "teardown": {
                "duration": 0.0018704329995671287,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number3",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003605599922593683,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004509900027187541,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number3>\n"
            },
            "teardown": {
                "duration": 0.0015703179960837588,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number4",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004946370027028024,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039506799657829106,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number4>\n"
            },
            "teardown": {
                "duration": 0.0014872850006213412,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number5",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041655299719423056,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004109229921596125,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number5>\n"
            },
            "teardown": {
                "duration": 0.001520732999779284,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number6",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004097600030945614,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004073070012964308,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number6>\n"
            },
            "teardown": {
                "duration": 0.0019126539991702884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number7",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004254689993103966,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045154000690672547,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number7>\n"
            },
            "teardown": {
                "duration": 0.0014564969897037372,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number8",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041615300870034844,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004527389974100515,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number8>\n"
            },
            "teardown": {
                "duration": 0.0014375040045706555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number9",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036338499921839684,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040277998778037727,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_convert_string_to_number9>\n"
            },
            "teardown": {
                "duration": 0.0014448739966610447,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_grad_error",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041322200559079647,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0709656899998663,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_eager_const_grad_error>\n"
            },
            "teardown": {
                "duration": 0.0014823620003880933,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_pfor",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041864100785460323,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07404110798961483,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_eager_const_pfor>\n"
            },
            "teardown": {
                "duration": 0.0020406800031196326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_xla",
            "lineno": 50,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004988540022168308,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2902125539985718,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_eager_const_xla>\n"
            },
            "teardown": {
                "duration": 0.0024376069923164323,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045869599853176624,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004139929951634258,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0019865279900841415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeInvalidOutputShape",
            "lineno": 317,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006604730006074533,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009679501003120095,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv2DTransposeInvalidOutputShape>\n",
                "stderr": "2023-05-13 17:31:43.772939: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at conv_grad_input_ops.h:431 : INVALID_ARGUMENT: Conv2DBackpropInput: elements of input_sizes must be >= 0, not 2x-2\n"
            },
            "teardown": {
                "duration": 0.0018389500037301332,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSame",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004832059930777177,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.8326132419897476,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv2DTransposeSame>\n"
            },
            "teardown": {
                "duration": 0.00338568800361827,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeShapeInference",
            "lineno": 303,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006673629977740347,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07752431799599435,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv2DTransposeShapeInference>\n"
            },
            "teardown": {
                "duration": 0.004048399001476355,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSingleStride",
            "lineno": 22,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004537719942163676,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.032706687998143025,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv2DTransposeSingleStride>\n"
            },
            "teardown": {
                "duration": 0.0021177489979891106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeValid",
            "lineno": 105,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039601599564775825,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010123580999788828,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv2DTransposeValid>\n"
            },
            "teardown": {
                "duration": 0.002115470007993281,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042318399937357754,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9881695390067762,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient>\nconv2d_transpose gradient err = 0.000259936 \n"
            },
            "teardown": {
                "duration": 0.0023768900136929005,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004740860022138804,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004283079906599596,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.003320164993056096,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D1x1x1Filter",
            "lineno": 268,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007705649913987145,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011437303997809067,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 277,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 111,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 98,
                        "message": "in _SetupValuesForDevice"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1576,
                        "message": "in conv3d"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testConv3D1x1x1Filter>\n***config [('NDHWC', False), ('NDHWC', True)]\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D1x1x1Filter>\n\n    def testConv3D1x1x1Filter(self):\n      expected_output = [\n          0.18518519, 0.22222222, 0.25925926, 0.40740741, 0.5, 0.59259259,\n          0.62962963, 0.77777778, 0.92592593, 0.85185185, 1.05555556, 1.25925926,\n          1.07407407, 1.33333333, 1.59259259, 1.2962963, 1.61111111, 1.92592593\n      ]\n    \n      # These are equivalent to the Conv2D1x1 case.\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 2, 3, 1, 3],\n          filter_in_sizes=[1, 1, 1, 3, 3],\n          stride=1,\n          padding=\"VALID\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:277: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:111: in _VerifyValues\n    result = self._SetupValuesForDevice(\nsrc/tensorflow_tests_reduced/conv3d_test.py:98: in _SetupValuesForDevice\n    conv = nn_ops.conv3d(t1, t2, strides, padding=padding,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py:1576: in conv3d\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002850867997040041,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2Filter",
            "lineno": 296,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005245630018180236,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028375259003951214,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 305,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 111,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 98,
                        "message": "in _SetupValuesForDevice"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1576,
                        "message": "in conv3d"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testConv3D2x2x2Filter>\n***config [('NDHWC', False), ('NDHWC', True)]\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2Filter>\n\n    def testConv3D2x2x2Filter(self):\n      expected_output = [\n          3.77199074, 3.85069444, 3.92939815, 4.2650463, 4.35763889, 4.45023148,\n          6.73032407, 6.89236111, 7.05439815, 7.22337963, 7.39930556, 7.57523148,\n          9.68865741, 9.93402778, 10.17939815, 10.18171296, 10.44097222,\n          10.70023148\n      ]\n      # expected_shape = [1, 3, 1, 2, 5]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 4, 2, 3, 3],  # b, z, y, x, fin\n          filter_in_sizes=[2, 2, 2, 3, 3],  # z, y, x, fin, fout\n          stride=1,\n          padding=\"VALID\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:305: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:111: in _VerifyValues\n    result = self._SetupValuesForDevice(\nsrc/tensorflow_tests_reduced/conv3d_test.py:98: in _SetupValuesForDevice\n    conv = nn_ops.conv3d(t1, t2, strides, padding=padding,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py:1576: in conv3d\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0028974800079595298,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2",
            "lineno": 332,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045862499973736703,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0228170170012163,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 337,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 111,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 98,
                        "message": "in _SetupValuesForDevice"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1576,
                        "message": "in conv3d"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testConv3D2x2x2FilterStride2>\n***config [('NDHWC', False), ('NDHWC', True)]\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2FilterStride2>\n\n    def testConv3D2x2x2FilterStride2(self):\n      expected_output = [\n          3.77199074, 3.85069444, 3.92939815, 9.68865741, 9.93402778, 10.17939815\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 4, 2, 3, 3],\n          filter_in_sizes=[2, 2, 2, 3, 3],\n          stride=2,\n          padding=\"VALID\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:111: in _VerifyValues\n    result = self._SetupValuesForDevice(\nsrc/tensorflow_tests_reduced/conv3d_test.py:98: in _SetupValuesForDevice\n    conv = nn_ops.conv3d(t1, t2, strides, padding=padding,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py:1576: in conv3d\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.003011224005604163,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2Same",
            "lineno": 359,
            "outcome": "failed",
            "setup": {
                "duration": 0.00048761599464342,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023461203993065283,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 365,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 111,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 98,
                        "message": "in _SetupValuesForDevice"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1576,
                        "message": "in conv3d"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testConv3D2x2x2FilterStride2Same>\n***config [('NDHWC', False), ('NDHWC', True)]\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2FilterStride2Same>\n\n    def testConv3D2x2x2FilterStride2Same(self):\n      expected_output = [\n          3.77199074, 3.85069444, 3.92939815, 2.0162037, 2.06597222, 2.11574074,\n          9.68865741, 9.93402778, 10.17939815, 4.59953704, 4.73263889, 4.86574074\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 4, 2, 3, 3],\n          filter_in_sizes=[2, 2, 2, 3, 3],\n          stride=2,\n          padding=\"SAME\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:111: in _VerifyValues\n    result = self._SetupValuesForDevice(\nsrc/tensorflow_tests_reduced/conv3d_test.py:98: in _SetupValuesForDevice\n    conv = nn_ops.conv3d(t1, t2, strides, padding=padding,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py:1576: in conv3d\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.003450849006185308,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DExpandedBatch",
            "lineno": 204,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006379830010700971,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.043390566992457025,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConv3DExpandedBatch>\n"
            },
            "teardown": {
                "duration": 0.0020224640029482543,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStride3",
            "lineno": 343,
            "outcome": "failed",
            "setup": {
                "duration": 0.00042050999763887376,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024658397000166588,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 353,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 111,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 98,
                        "message": "in _SetupValuesForDevice"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1576,
                        "message": "in conv3d"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testConv3DStride3>\n***config [('NDHWC', False), ('NDHWC', True)]\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3DStride3>\n\n    def testConv3DStride3(self):\n      expected_output = [\n          1.51140873, 1.57167659, 1.63194444, 1.56349206, 1.62673611, 1.68998016,\n          1.6155754, 1.68179563, 1.74801587, 1.9280754, 2.01215278, 2.09623016,\n          1.98015873, 2.0672123, 2.15426587, 2.03224206, 2.12227183, 2.21230159,\n          4.4280754, 4.65500992, 4.88194444, 4.48015873, 4.71006944, 4.93998016,\n          4.53224206, 4.76512897, 4.99801587, 4.84474206, 5.09548611, 5.34623016,\n          4.8968254, 5.15054563, 5.40426587, 4.94890873, 5.20560516, 5.46230159\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 6, 7, 8, 2],\n          filter_in_sizes=[3, 2, 1, 2, 3],\n          stride=3,\n          padding=\"VALID\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:353: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:111: in _VerifyValues\n    result = self._SetupValuesForDevice(\nsrc/tensorflow_tests_reduced/conv3d_test.py:98: in _SetupValuesForDevice\n    conv = nn_ops.conv3d(t1, t2, strides, padding=padding,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py:1576: in conv3d\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0027053670055465773,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStrides",
            "lineno": 311,
            "outcome": "failed",
            "setup": {
                "duration": 0.00044720800360664725,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023062241001753137,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 326,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 111,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 98,
                        "message": "in _SetupValuesForDevice"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1576,
                        "message": "in conv3d"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testConv3DStrides>\n***config [('NDHWC', False), ('NDHWC', True)]\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3DStrides>\n\n    def testConv3DStrides(self):\n      expected_output = [\n          0.06071429, 0.08988095, 0.10238095, 0.11488095, 0.12738095, 0.13988095,\n          0.08452381, 0.26071429, 0.35238095, 0.36488095, 0.37738095, 0.38988095,\n          0.40238095, 0.23452381, 0.46071429, 0.61488095, 0.62738095, 0.63988095,\n          0.65238095, 0.66488095, 0.38452381, 1.12738095, 1.48988095, 1.50238095,\n          1.51488095, 1.52738095, 1.53988095, 0.88452381, 1.32738095, 1.75238095,\n          1.76488095, 1.77738095, 1.78988095, 1.80238095, 1.03452381, 1.52738095,\n          2.01488095, 2.02738095, 2.03988095, 2.05238095, 2.06488095, 1.18452381,\n          2.19404762, 2.88988095, 2.90238095, 2.91488095, 2.92738095, 2.93988095,\n          1.68452381, 2.39404762, 3.15238095, 3.16488095, 3.17738095, 3.18988095,\n          3.20238095, 1.83452381, 2.59404762, 3.41488095, 3.42738095, 3.43988095,\n          3.45238095, 3.46488095, 1.98452381\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 5, 8, 7, 1],\n          filter_in_sizes=[1, 2, 3, 1, 1],\n          stride=[2, 3, 1],  # different stride for each spatial dimension\n          padding=\"SAME\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:326: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:111: in _VerifyValues\n    result = self._SetupValuesForDevice(\nsrc/tensorflow_tests_reduced/conv3d_test.py:98: in _SetupValuesForDevice\n    conv = nn_ops.conv3d(t1, t2, strides, padding=padding,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py:1576: in conv3d\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0030281239887699485,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionClass3DExpandedBatch",
            "lineno": 226,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004527829878497869,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.040016058992478065,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutionClass3DExpandedBatch>\n"
            },
            "teardown": {
                "duration": 0.00200286899053026,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionWith2SpatialDimensionsAndExpandedBatch",
            "lineno": 252,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006392969953594729,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.037466390000190586,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvolutionWith2SpatialDimensionsAndExpandedBatch>\n"
            },
            "teardown": {
                "duration": 0.0021935080003459007,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientKernelSizeMatchesInputSize",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004926870024064556,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.442612762999488,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientKernelSizeMatchesInputSize>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002030837000347674,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideOne",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004661000129999593,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.6960335509938886,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientSamePaddingStrideOne>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0022799599973950535,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideThree",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004917600017506629,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.402369906005333,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientSamePaddingStrideThree>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0027158199955010787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideTwo",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006923110049683601,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.435676915003569,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientSamePaddingStrideTwo>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002362507992074825,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOne",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047810698742978275,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.812560667996877,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientValidPaddingStrideOne>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0029465010011335835,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOneFastPath",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009165780065814033,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.881644334003795,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientValidPaddingStrideOneFastPath>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.003001550998305902,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideThree",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004748560022562742,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.180617668986088,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientValidPaddingStrideThree>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0022942329960642383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideTwo",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006483049946837127,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.265130379004404,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFilterGradientValidPaddingStrideTwo>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0020131070050410926,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientKernelSizeMatchesInputSize",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047911799629218876,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.3166739529988263,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientKernelSizeMatchesInputSize>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0022753410012228414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingDifferentStrides",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004749979998450726,
                "outcome": "passed"
            },
            "call": {
                "duration": 7.074157230003038,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientSamePaddingDifferentStrides>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002475058994605206,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideOne",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00069695599086117,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7981693609908689,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientSamePaddingStrideOne>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002593630997580476,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideThree",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046572899736929685,
                "outcome": "passed"
            },
            "call": {
                "duration": 7.203557006010669,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientSamePaddingStrideThree>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002923754000221379,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideTwo",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045873899944126606,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.5682879649975803,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientSamePaddingStrideTwo>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002064250991679728,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOne",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046746499720029533,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.8765782190021127,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientValidPaddingStrideOne>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0027333500038366765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOneFastPath",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004628480091923848,
                "outcome": "passed"
            },
            "call": {
                "duration": 10.734398992994102,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientValidPaddingStrideOneFastPath>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002156545000616461,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideThree",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004720900033134967,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.504566253002849,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientValidPaddingStrideThree>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.002244207003968768,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideTwo",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045403400145005435,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.392709717998514,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputGradientValidPaddingStrideTwo>\n***config [('NDHWC', False), ('NDHWC', True)]\n"
            },
            "teardown": {
                "duration": 0.0023560539993923157,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSizeMatchesInputSize",
            "lineno": 444,
            "outcome": "failed",
            "setup": {
                "duration": 0.00048635699204169214,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012539923001895659,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 446,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 111,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 98,
                        "message": "in _SetupValuesForDevice"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1576,
                        "message": "in conv3d"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testKernelSizeMatchesInputSize>\n***config [('NDHWC', False), ('NDHWC', True)]\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testKernelSizeMatchesInputSize>\n\n    def testKernelSizeMatchesInputSize(self):\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 2, 1, 2, 1],\n          filter_in_sizes=[2, 1, 2, 1, 2],\n          stride=1,\n          padding=\"VALID\",\n          expected=[1.5625, 1.875])\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:446: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:111: in _VerifyValues\n    result = self._SetupValuesForDevice(\nsrc/tensorflow_tests_reduced/conv3d_test.py:98: in _SetupValuesForDevice\n    conv = nn_ops.conv3d(t1, t2, strides, padding=padding,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py:1576: in conv3d\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0029676200065296143,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSmallerThanStride",
            "lineno": 401,
            "outcome": "failed",
            "setup": {
                "duration": 0.00048139499267563224,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02200230601010844,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 407,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 111,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 98,
                        "message": "in _SetupValuesForDevice"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1576,
                        "message": "in conv3d"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testKernelSmallerThanStride>\n***config [('NDHWC', False), ('NDHWC', True)]\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testKernelSmallerThanStride>\n\n    def testKernelSmallerThanStride(self):\n      expected_output = [\n          0.03703704, 0.11111111, 0.25925926, 0.33333333, 0.7037037, 0.77777778,\n          0.92592593, 1.\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 3, 3, 3, 1],\n          filter_in_sizes=[1, 1, 1, 1, 1],\n          stride=2,\n          padding=\"SAME\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:407: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:111: in _VerifyValues\n    result = self._SetupValuesForDevice(\nsrc/tensorflow_tests_reduced/conv3d_test.py:98: in _SetupValuesForDevice\n    conv = nn_ops.conv3d(t1, t2, strides, padding=padding,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_nn_ops.py:1576: in conv3d\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Conv3D]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002983607992064208,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testZeroSizedFilterThrowsIllegalArgument",
            "lineno": 452,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005170199874555692,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003683482005726546,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroSizedFilterThrowsIllegalArgument>\n"
            },
            "teardown": {
                "duration": 0.00164873999892734,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004694270028267056,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004093059978913516,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0018375350045971572,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::testToTensor",
            "lineno": 69,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006769520114175975,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02955544600263238,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testToTensor>\n"
            },
            "teardown": {
                "duration": 0.0019316789985168725,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006019220018060878,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005696070002159104,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017726869991747662,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToInvalidTensorType",
            "lineno": 175,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006297940126387402,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010297572996933013,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToInvalidTensorType>\n"
            },
            "teardown": {
                "duration": 0.002305974005139433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToLongLongTensorType",
            "lineno": 185,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006081729952711612,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016921788002946414,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToLongLongTensorType>\n"
            },
            "teardown": {
                "duration": 0.0023969000030774623,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorEager",
            "lineno": 99,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006180990021675825,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002750928993918933,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorEager>\n"
            },
            "teardown": {
                "duration": 0.0022410809906432405,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorFromInvalidTensor",
            "lineno": 196,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045343000965658575,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011046083003748208,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorFromInvalidTensor>\n"
            },
            "teardown": {
                "duration": 0.0016438650054624304,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedArray",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003897339920513332,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014976182996178977,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorNestedArray>\n"
            },
            "teardown": {
                "duration": 0.001525330008007586,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedMix",
            "lineno": 142,
            "outcome": "passed",
            "setup": {
                "duration": 0.000399251002818346,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022058126007323153,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorNestedMix>\n"
            },
            "teardown": {
                "duration": 0.0019520240020938218,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTensors",
            "lineno": 124,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036519698915071785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03172837999591138,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorNestedTensors>\n"
            },
            "teardown": {
                "duration": 0.0018790789908962324,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTuple",
            "lineno": 114,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004473099979804829,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015188634002697654,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorNestedTuple>\n"
            },
            "teardown": {
                "duration": 0.0014912650076439604,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorPreferred",
            "lineno": 152,
            "outcome": "passed",
            "setup": {
                "duration": 0.000363900006050244,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012791625005775131,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorPreferred>\n"
            },
            "teardown": {
                "duration": 0.0015947820065775886,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorProtocol",
            "lineno": 202,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004072739975526929,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014691225995193236,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertToTensorProtocol>\n"
            },
            "teardown": {
                "duration": 0.0014799289929214865,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testNoConvert",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003759199898922816,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009687400015536696,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNoConvert>\n"
            },
            "teardown": {
                "duration": 0.0015789240133017302,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000490885999170132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005694080027751625,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015751869941595942,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::testCumProdAndSum",
            "lineno": 55,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006148770044092089,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003457099955994636,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCumProdAndSum>\n"
            },
            "teardown": {
                "duration": 0.002773938002064824,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003957349981646985,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004163309931755066,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014594700041925535,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testBool",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006208900013007224,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013564462002250366,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBool>\n"
            },
            "teardown": {
                "duration": 0.001425610011210665,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testComplex",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040771700150799006,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09064571899943985,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testComplex>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_14' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 249, in testComplex\n      output = string_ops.as_string(input_, scientific=True, shortest=True)\nNode: 'AsString_14'\nCannot select both scientific and shortest notation\n\t [[{{node AsString_14}}]]\n\nOriginal stack trace for 'AsString_14':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 249, in testComplex\n    output = string_ops.as_string(input_, scientific=True, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_14' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 249, in testComplex\n      output = string_ops.as_string(input_, scientific=True, shortest=True)\nNode: 'AsString_14'\nCannot select both scientific and shortest notation\n\t [[{{node AsString_14}}]]\n\nOriginal stack trace for 'AsString_14':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 249, in testComplex\n    output = string_ops.as_string(input_, scientific=True, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999186.0715117,
                        "msecs": 71.0,
                        "relativeCreated": 118943.38726997375,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0016957179905148223,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testFloat",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004321059968788177,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.170519991996116,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat>\n***RESULT [b'0.000000e+00' b'1.000000e+00' b'-1.000000e+00' b'5.000000e-01'\n b'2.500000e-01' b'1.250000e-01' b'inf' b'nan' b'-inf']\n***RESULT [b'0.000000e+00' b'1.000000e+00' b'-1.000000e+00' b'5.000000e-01'\n b'2.500000e-01' b'1.250000e-01' b'inf' b'nan' b'-inf']\n***RESULT [b'0.000000e+00' b'1.000000e+00' b'-1.000000e+00' b'5.000000e-01'\n b'2.500000e-01' b'1.250000e-01' b'inf' b'nan' b'-inf']\n***RESULT [b'0.000000e+00' b'1.000000e+00' b'-1.000000e+00' b'5.000000e-01'\n b'2.500000e-01' b'1.250000e-01' b'inf' b'nan' b'-inf']\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_32' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 82, in testFloat\n      output = string_ops.as_string(input_, scientific=True, shortest=True)\nNode: 'AsString_32'\nCannot select both scientific and shortest notation\n\t [[{{node AsString_32}}]]\n\nOriginal stack trace for 'AsString_32':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 82, in testFloat\n    output = string_ops.as_string(input_, scientific=True, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_33' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 86, in testFloat\n      output = string_ops.as_string(input_, fill=\"ab\")\nNode: 'AsString_33'\nFill string must be one or fewer characters\n\t [[{{node AsString_33}}]]\n\nOriginal stack trace for 'AsString_33':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 86, in testFloat\n    output = string_ops.as_string(input_, fill=\"ab\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_32' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 82, in testFloat\n      output = string_ops.as_string(input_, scientific=True, shortest=True)\nNode: 'AsString_32'\nCannot select both scientific and shortest notation\n\t [[{{node AsString_32}}]]\n\nOriginal stack trace for 'AsString_32':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 82, in testFloat\n    output = string_ops.as_string(input_, scientific=True, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999186.2384927,
                        "msecs": 238.0,
                        "relativeCreated": 119110.36825180054,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_33' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 86, in testFloat\n      output = string_ops.as_string(input_, fill=\"ab\")\nNode: 'AsString_33'\nFill string must be one or fewer characters\n\t [[{{node AsString_33}}]]\n\nOriginal stack trace for 'AsString_33':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 86, in testFloat\n    output = string_ops.as_string(input_, fill=\"ab\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999186.2446477,
                        "msecs": 244.0,
                        "relativeCreated": 119116.52326583862,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.001634173997445032,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testHalfInt",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044767599320039153,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018492638002499007,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testHalfInt>\n"
            },
            "teardown": {
                "duration": 0.001582427998073399,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testInt",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004402679915074259,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13000144599936903,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_9' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n      output = string_ops.as_string(input_, scientific=True)\nNode: 'AsString_9'\nscientific and shortest format not supported for datatype int64\n\t [[{{node AsString_9}}]]\n\nOriginal stack trace for 'AsString_9':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n    output = string_ops.as_string(input_, scientific=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_10' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n      output = string_ops.as_string(input_, shortest=True)\nNode: 'AsString_10'\nscientific and shortest format not supported for datatype int64\n\t [[{{node AsString_10}}]]\n\nOriginal stack trace for 'AsString_10':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n    output = string_ops.as_string(input_, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_11' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n      output = string_ops.as_string(input_, precision=0)\nNode: 'AsString_11'\nprecision not supported for datatype int64\n\t [[{{node AsString_11}}]]\n\nOriginal stack trace for 'AsString_11':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n    output = string_ops.as_string(input_, precision=0)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_21' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n      output = string_ops.as_string(input_, scientific=True)\nNode: 'AsString_21'\nscientific and shortest format not supported for datatype uint64\n\t [[{{node AsString_21}}]]\n\nOriginal stack trace for 'AsString_21':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n    output = string_ops.as_string(input_, scientific=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_22' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n      output = string_ops.as_string(input_, shortest=True)\nNode: 'AsString_22'\nscientific and shortest format not supported for datatype uint64\n\t [[{{node AsString_22}}]]\n\nOriginal stack trace for 'AsString_22':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n    output = string_ops.as_string(input_, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'AsString_23' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n      output = string_ops.as_string(input_, precision=0)\nNode: 'AsString_23'\nprecision not supported for datatype uint64\n\t [[{{node AsString_23}}]]\n\nOriginal stack trace for 'AsString_23':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n    output = string_ops.as_string(input_, precision=0)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_9' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n      output = string_ops.as_string(input_, scientific=True)\nNode: 'AsString_9'\nscientific and shortest format not supported for datatype int64\n\t [[{{node AsString_9}}]]\n\nOriginal stack trace for 'AsString_9':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n    output = string_ops.as_string(input_, scientific=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999186.3255424,
                        "msecs": 325.0,
                        "relativeCreated": 119197.41797447205,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_10' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n      output = string_ops.as_string(input_, shortest=True)\nNode: 'AsString_10'\nscientific and shortest format not supported for datatype int64\n\t [[{{node AsString_10}}]]\n\nOriginal stack trace for 'AsString_10':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n    output = string_ops.as_string(input_, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999186.3311183,
                        "msecs": 331.0,
                        "relativeCreated": 119202.9938697815,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_11' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n      output = string_ops.as_string(input_, precision=0)\nNode: 'AsString_11'\nprecision not supported for datatype int64\n\t [[{{node AsString_11}}]]\n\nOriginal stack trace for 'AsString_11':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n    output = string_ops.as_string(input_, precision=0)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999186.3367178,
                        "msecs": 336.0,
                        "relativeCreated": 119208.59336853027,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_21' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n      output = string_ops.as_string(input_, scientific=True)\nNode: 'AsString_21'\nscientific and shortest format not supported for datatype uint64\n\t [[{{node AsString_21}}]]\n\nOriginal stack trace for 'AsString_21':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n    output = string_ops.as_string(input_, scientific=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999186.3871768,
                        "msecs": 387.0,
                        "relativeCreated": 119259.05227661133,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_22' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n      output = string_ops.as_string(input_, shortest=True)\nNode: 'AsString_22'\nscientific and shortest format not supported for datatype uint64\n\t [[{{node AsString_22}}]]\n\nOriginal stack trace for 'AsString_22':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n    output = string_ops.as_string(input_, shortest=True)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999186.3932846,
                        "msecs": 393.0,
                        "relativeCreated": 119265.16008377075,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_23' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n      output = string_ops.as_string(input_, precision=0)\nNode: 'AsString_23'\nprecision not supported for datatype uint64\n\t [[{{node AsString_23}}]]\n\nOriginal stack trace for 'AsString_23':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n    output = string_ops.as_string(input_, precision=0)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999186.3993676,
                        "msecs": 399.0,
                        "relativeCreated": 119271.24309539795,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.001999697007704526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testLargeInt",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004714230017270893,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018989065996720456,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLargeInt>\n"
            },
            "teardown": {
                "duration": 0.0016115570033434778,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005014380003558472,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004466729878913611,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017077640077332035,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000748411999666132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004839679895667359,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0016342829912900925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004862219939241186,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004694559902418405,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0019593990000430495,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003875940019497648,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041359900205861777,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014359409979078919,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00038870600110385567,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044611199700739235,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0016573390021221712,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004245080053806305,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039962699520401657,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017422219971194863,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00040717600495554507,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003758749953703955,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013633370108436793,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035965899587608874,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003823570004897192,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013430760009214282,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004402310005389154,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004515870095929131,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0018042490119114518,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034017799771390855,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038813200080767274,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014396600017789751,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035490200389176607,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004641459963750094,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001405504997819662,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036906899185851216,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004555489867925644,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001831053989008069,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00040462099423166364,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039677599852439016,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001354991996777244,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036851500044576824,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003738149971468374,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013645620056195185,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034775599488057196,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004086150001967326,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0019808979996014386,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003401809954084456,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037413000245578587,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001353176005068235,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003601869975682348,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045039900578558445,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013569589937105775,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003614049928728491,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003715740022016689,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001903096999740228,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003380069974809885,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038365299405995756,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014111829950707033,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034592598967719823,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003834060044027865,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013870200054952875,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003677630011225119,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004752349923364818,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0018451170035405084,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00040809999336488545,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039643599302507937,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013307839981280267,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035381800262257457,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043320399709045887,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017752330022631213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005415240011643618,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039535500400234014,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.004428871994605288,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000352857998223044,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003952289989683777,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013398439914453775,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003607620019465685,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003709540033014491,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013635049981530756,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003597210015868768,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040580201311968267,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0019452310079941526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004054000019095838,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037229000008665025,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013684049918083474,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035126401053275913,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044043299567420036,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013585389970103279,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035430199932307005,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003753259952645749,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001965891002328135,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003546379884937778,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038563199632335454,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014229590015020221,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034991100255865604,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038695499824825674,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00132410999503918,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004108090070076287,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046570699487347156,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002330406990949996,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005373000021791086,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000538306005182676,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017149110062746331,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005145720060681924,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000542244000826031,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017233329999726266,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000496663007652387,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005817549972562119,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002333438998903148,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005080450064269826,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005329289997462183,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001827795000281185,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005263569910312071,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000537820000317879,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0018684539973037317,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005104640003992245,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038632898940704763,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017756650049705058,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003472880052868277,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044168099702801555,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013347069907467812,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003528849920257926,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039003099664114416,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013996850029798225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004455779999261722,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004466560058062896,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017628700006753206,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003435950056882575,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037736799276899546,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013374720001593232,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035096899955533445,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004303230089135468,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001363268995191902,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003490730014164001,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004566670104395598,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0019053290016017854,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004011280107079074,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003758910024771467,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001347812998574227,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003703170077642426,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037565099773928523,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013508919946616516,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035924999974668026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004289050120860338,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0019907039968529716,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004674969968618825,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045063800644129515,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014526330051012337,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035572299384512007,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045689099351875484,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001383647002512589,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000350094007444568,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038934600888751447,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002448547995300032,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034412900276947767,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004367770015960559,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013531349977711216,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003721469984157011,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039191900577861816,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013682150020031258,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003510670067043975,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041128300654236227,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0019992620073026046,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00043114899017382413,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003786000015679747,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014973680081311613,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003788739995798096,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09513469399826135,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_5dtensor_ds at 0x7f6ae2d079a0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a78328820>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a70454b80>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a70454b80>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:MapDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0027689650014508516,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00048140500439330935,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025448249944020063,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 62,
                        "message": "in _make_5dtensor_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_5dtensor_ds at 0x7f6ae2d079a0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a783fcee0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a78537fd0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a78537fd0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:62: in _make_5dtensor_ds\n    return _make_scalar_ds(nrows).map(\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0025053949939319864,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004589930031215772,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002669619003427215,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 62,
                        "message": "in _make_5dtensor_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_5dtensor_ds at 0x7f6ae2d079a0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a70400280>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a782843a0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a782843a0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:62: in _make_5dtensor_ds\n    return _make_scalar_ds(nrows).map(\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023614730016561225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00047419000475201756,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002732389999437146,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 84,
                        "message": "in _make_dict_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_dict_ds at 0x7f6ae2d07ac0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a7832a5f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a707264d0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a707264d0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:84: in _make_dict_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024028650077525526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000477659996249713,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002702639001654461,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 84,
                        "message": "in _make_dict_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_dict_ds at 0x7f6ae2d07ac0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a7832a560>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a452257b0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a452257b0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:84: in _make_dict_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002410272994893603,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005297399911796674,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00269665100495331,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 84,
                        "message": "in _make_dict_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_dict_ds at 0x7f6ae2d07ac0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a702997e0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a78160a30>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a78160a30>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:84: in _make_dict_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002274493992445059,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004459859919734299,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002466554011334665,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 47,
                        "message": "in _make_matrix_ds1"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds1 at 0x7f6ae2d077f0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a70400280>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a7076b220>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a7076b220>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:47: in _make_matrix_ds1\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x, 2], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002340433988138102,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004636719968402758,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002653570001712069,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 47,
                        "message": "in _make_matrix_ds1"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds1 at 0x7f6ae2d077f0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a783293f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a781d28f0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a781d28f0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:47: in _make_matrix_ds1\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x, 2], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0022482539934571832,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005112760118208826,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027081279986305162,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 47,
                        "message": "in _make_matrix_ds1"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds1 at 0x7f6ae2d077f0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a70400280>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a705c25f0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a705c25f0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:47: in _make_matrix_ds1\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x, 2], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002404936996754259,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004653879877878353,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0023680550075368956,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 52,
                        "message": "in _make_matrix_ds2"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds2 at 0x7f6ae2d07880>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a7029b0a0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a707deda0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a707deda0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:52: in _make_matrix_ds2\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002427348998025991,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004955140029778704,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0028474260034272447,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 52,
                        "message": "in _make_matrix_ds2"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds2 at 0x7f6ae2d07880>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a70400280>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a704797e0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a704797e0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:52: in _make_matrix_ds2\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023270969977602363,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004716920084320009,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026197780098300427,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 52,
                        "message": "in _make_matrix_ds2"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds2 at 0x7f6ae2d07880>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a783293f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a7844dde0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a7844dde0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:52: in _make_matrix_ds2\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023204720055218786,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004450999986147508,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002369829991948791,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 57,
                        "message": "in _make_matrix_ds_fully_defined"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7f6ae2d07910>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a7029b1c0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a707fa800>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a707fa800>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:57: in _make_matrix_ds_fully_defined\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, 3], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002515077998396009,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004961649974575266,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0028245090070413426,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 57,
                        "message": "in _make_matrix_ds_fully_defined"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7f6ae2d07910>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a782b8940>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a78471060>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a78471060>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:57: in _make_matrix_ds_fully_defined\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, 3], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023976920056156814,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000466808007331565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026624750025803223,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 57,
                        "message": "in _make_matrix_ds_fully_defined"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7f6ae2d07910>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a7832a5f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a707ca800>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a707ca800>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:57: in _make_matrix_ds_fully_defined\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, 3], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002771158004179597,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004807520017493516,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0024942089949036017,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 71,
                        "message": "in _make_ragged_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_ragged_ds at 0x7f6ae2d07a30>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a782b95a0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a7851f0a0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a7851f0a0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:71: in _make_ragged_ds\n    return dataset_ops.Dataset.from_tensor_slices(rt)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023683509934926406,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000494826992508024,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005278320008073933,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RaggedTensorToVariant]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 71,
                        "message": "in _make_ragged_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 35,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 369,
                        "message": "in to_batched_tensor_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 344,
                        "message": "in _to_tensor_list_helper"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 342,
                        "message": "in reduce_fn"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 370,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2572,
                        "message": "in _to_batched_tensor_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2049,
                        "message": "in _to_variant"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py",
                        "lineno": 396,
                        "message": "in ragged_tensor_to_variant"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_ragged_ds at 0x7f6ae2d07a30>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a7832a5f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a783048e0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a783048e0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:71: in _make_ragged_ds\n    return dataset_ops.Dataset.from_tensor_slices(rt)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:35: in __init__\n    self._tensors = structure.to_batched_tensor_list(batched_spec, element)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:369: in to_batched_tensor_list\n    return _to_tensor_list_helper(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:344: in _to_tensor_list_helper\n    return functools.reduce(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:342: in reduce_fn\n    return encode_fn(state, spec, component)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:370: in <lambda>\n    lambda state, spec, component: state + spec._to_batched_tensor_list(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2572: in _to_batched_tensor_list\n    return [value._to_variant(batched_input=True)]\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2049: in _to_variant\n    return gen_ragged_conversion_ops.ragged_tensor_to_variant(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py:396: in ragged_tensor_to_variant\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RaggedTensorToVariant]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002757886002655141,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004808990051969886,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004874304999248125,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RaggedTensorToVariant]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 71,
                        "message": "in _make_ragged_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 35,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 369,
                        "message": "in to_batched_tensor_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 344,
                        "message": "in _to_tensor_list_helper"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 342,
                        "message": "in reduce_fn"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 370,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2572,
                        "message": "in _to_batched_tensor_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2049,
                        "message": "in _to_variant"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py",
                        "lineno": 396,
                        "message": "in ragged_tensor_to_variant"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_ragged_ds at 0x7f6ae2d07a30>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a546aeb90>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a54665240>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a54665240>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:71: in _make_ragged_ds\n    return dataset_ops.Dataset.from_tensor_slices(rt)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:35: in __init__\n    self._tensors = structure.to_batched_tensor_list(batched_spec, element)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:369: in to_batched_tensor_list\n    return _to_tensor_list_helper(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:344: in _to_tensor_list_helper\n    return functools.reduce(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:342: in reduce_fn\n    return encode_fn(state, spec, component)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:370: in <lambda>\n    lambda state, spec, component: state + spec._to_batched_tensor_list(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2572: in _to_batched_tensor_list\n    return [value._to_variant(batched_input=True)]\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2049: in _to_variant\n    return gen_ragged_conversion_ops.ragged_tensor_to_variant(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py:396: in ragged_tensor_to_variant\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RaggedTensorToVariant]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023993859940674156,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004452559951459989,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025064090004889295,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_scalar_ds at 0x7f6ae2d06680>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a7832a5f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a707c8700>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a707c8700>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002421063996735029,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005216919962549582,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027749190048780292,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_scalar_ds at 0x7f6ae2d06680>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a782b9fc0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a78098c40>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a78098c40>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002922107989434153,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006633570010308176,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003995177990873344,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_scalar_ds at 0x7f6ae2d06680>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a7832a5f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a707272b0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a707272b0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0022507139947265387,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005019660020479932,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025063190114451572,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 93,
                        "message": "in _make_tuple_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_tuple_ds at 0x7f6ae2d07b50>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a546af010>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a78472290>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a78472290>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:93: in _make_tuple_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0025462260091444477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000533201004145667,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00297507899813354,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 93,
                        "message": "in _make_tuple_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_tuple_ds at 0x7f6ae2d07b50>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a782ba560>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a706d8d00>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a706d8d00>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:93: in _make_tuple_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002324362998479046,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000516704996698536,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002662627011886798,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 93,
                        "message": "in _make_tuple_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_tuple_ds at 0x7f6ae2d07b50>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a546ae9e0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a78304610>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a78304610>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:93: in _make_tuple_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024911969958338886,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005009259912185371,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026095390057889745,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 42,
                        "message": "in _make_vector_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_vector_ds at 0x7f6ae2d06c20>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a546aeb90>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a7851f550>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a7851f550>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:42: in _make_vector_ds\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023157539981184527,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045556000259239227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026779460022225976,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 42,
                        "message": "in _make_vector_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_vector_ds at 0x7f6ae2d06c20>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a546ae9e0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a7844d210>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a7844d210>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:42: in _make_vector_ds\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023741350014461204,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045665199286304414,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002637949990457855,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 42,
                        "message": "in _make_vector_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_vector_ds at 0x7f6ae2d06c20>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a70250310>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a7043d780>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a7043d780>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:42: in _make_vector_ds\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0036806740099564195,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004559849912766367,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027452060021460056,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 62,
                        "message": "in _make_5dtensor_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_5dtensor_ds at 0x7f6ae2d079a0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a70250a60>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a70356290>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a70356290>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:62: in _make_5dtensor_ds\n    return _make_scalar_ds(nrows).map(\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002502143004676327,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005409860023064539,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027871130005223677,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 62,
                        "message": "in _make_5dtensor_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_5dtensor_ds at 0x7f6ae2d079a0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a782ba560>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a785b39a0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a785b39a0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:62: in _make_5dtensor_ds\n    return _make_scalar_ds(nrows).map(\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024090170045383275,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005368510028347373,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026557579985819757,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 62,
                        "message": "in _make_5dtensor_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_5dtensor_ds at 0x7f6ae2d079a0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a546aeb90>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a7042fa60>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a7042fa60>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:62: in _make_5dtensor_ds\n    return _make_scalar_ds(nrows).map(\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0022867789957672358,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046783199650235474,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002586142989457585,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 84,
                        "message": "in _make_dict_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_dict_ds at 0x7f6ae2d07ac0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a70251bd0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a78576530>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a78576530>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:84: in _make_dict_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023303930065594614,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005023240082664415,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026810330018633977,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 84,
                        "message": "in _make_dict_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_dict_ds at 0x7f6ae2d07ac0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a70252d40>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a784490f0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a784490f0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:84: in _make_dict_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023242659954121336,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045822000538464636,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002672810005606152,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 84,
                        "message": "in _make_dict_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_dict_ds at 0x7f6ae2d07ac0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a546aeb90>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a707270a0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a707270a0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:84: in _make_dict_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002354145995923318,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005139760032761842,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002470316001563333,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 47,
                        "message": "in _make_matrix_ds1"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds1 at 0x7f6ae2d077f0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a782ba170>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a7844eb30>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a7844eb30>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:47: in _make_matrix_ds1\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x, 2], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023348430113401264,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004752720124088228,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026474879996385425,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 47,
                        "message": "in _make_matrix_ds1"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds1 at 0x7f6ae2d077f0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a546aeb90>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a78591b40>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a78591b40>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:47: in _make_matrix_ds1\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x, 2], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002337022000574507,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005108690093038604,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002830078999977559,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 47,
                        "message": "in _make_matrix_ds1"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds1 at 0x7f6ae2d077f0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a782ba170>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a7040f4f0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a7040f4f0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:47: in _make_matrix_ds1\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x, 2], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024619460018584505,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004774049884872511,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0024584180064266548,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 52,
                        "message": "in _make_matrix_ds2"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds2 at 0x7f6ae2d07880>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a546aeb90>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a78537460>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a78537460>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:52: in _make_matrix_ds2\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023714909912087023,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005848529981449246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027554620028240606,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 52,
                        "message": "in _make_matrix_ds2"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds2 at 0x7f6ae2d07880>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a54659090>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a780f4d60>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a780f4d60>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:52: in _make_matrix_ds2\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002419222000753507,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005267219967208803,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002670365007361397,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 52,
                        "message": "in _make_matrix_ds2"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds2 at 0x7f6ae2d07880>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a546aeb90>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a70726fb0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a70726fb0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:52: in _make_matrix_ds2\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002890390998800285,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00048235700523946434,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0024787090078461915,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 57,
                        "message": "in _make_matrix_ds_fully_defined"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7f6ae2d07910>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a782ba170>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a782a2560>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a782a2560>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:57: in _make_matrix_ds_fully_defined\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, 3], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023739129974273965,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046440800360869616,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002724307996686548,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 57,
                        "message": "in _make_matrix_ds_fully_defined"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7f6ae2d07910>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a546888b0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a705c1000>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a705c1000>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:57: in _make_matrix_ds_fully_defined\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, 3], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002343129992368631,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00047117299982346594,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026692980027291924,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 57,
                        "message": "in _make_matrix_ds_fully_defined"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7f6ae2d07910>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a782ba170>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a7851db10>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a7851db10>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:57: in _make_matrix_ds_fully_defined\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, 3], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024242759973276407,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004539619985735044,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0023869470023782924,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 71,
                        "message": "in _make_ragged_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_ragged_ds at 0x7f6ae2d07a30>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a546aeb90>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a78304370>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a78304370>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:71: in _make_ragged_ds\n    return dataset_ops.Dataset.from_tensor_slices(rt)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0026458089996594936,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006679969956167042,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004989469001884572,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RaggedTensorToVariant]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 71,
                        "message": "in _make_ragged_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 35,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 369,
                        "message": "in to_batched_tensor_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 344,
                        "message": "in _to_tensor_list_helper"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 342,
                        "message": "in reduce_fn"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 370,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2572,
                        "message": "in _to_batched_tensor_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2049,
                        "message": "in _to_variant"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py",
                        "lineno": 396,
                        "message": "in ragged_tensor_to_variant"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_ragged_ds at 0x7f6ae2d07a30>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a54659e10>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a70727cd0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a70727cd0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:71: in _make_ragged_ds\n    return dataset_ops.Dataset.from_tensor_slices(rt)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:35: in __init__\n    self._tensors = structure.to_batched_tensor_list(batched_spec, element)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:369: in to_batched_tensor_list\n    return _to_tensor_list_helper(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:344: in _to_tensor_list_helper\n    return functools.reduce(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:342: in reduce_fn\n    return encode_fn(state, spec, component)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:370: in <lambda>\n    lambda state, spec, component: state + spec._to_batched_tensor_list(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2572: in _to_batched_tensor_list\n    return [value._to_variant(batched_input=True)]\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2049: in _to_variant\n    return gen_ragged_conversion_ops.ragged_tensor_to_variant(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py:396: in ragged_tensor_to_variant\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RaggedTensorToVariant]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024117059947457165,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004599499952746555,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004786864999914542,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RaggedTensorToVariant]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 71,
                        "message": "in _make_ragged_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 35,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 369,
                        "message": "in to_batched_tensor_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 344,
                        "message": "in _to_tensor_list_helper"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 342,
                        "message": "in reduce_fn"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 370,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2572,
                        "message": "in _to_batched_tensor_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2049,
                        "message": "in _to_variant"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py",
                        "lineno": 396,
                        "message": "in ragged_tensor_to_variant"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_ragged_ds at 0x7f6ae2d07a30>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a546aeb90>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a781633d0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a781633d0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:71: in _make_ragged_ds\n    return dataset_ops.Dataset.from_tensor_slices(rt)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:35: in __init__\n    self._tensors = structure.to_batched_tensor_list(batched_spec, element)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:369: in to_batched_tensor_list\n    return _to_tensor_list_helper(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:344: in _to_tensor_list_helper\n    return functools.reduce(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:342: in reduce_fn\n    return encode_fn(state, spec, component)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/util/structure.py:370: in <lambda>\n    lambda state, spec, component: state + spec._to_batched_tensor_list(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2572: in _to_batched_tensor_list\n    return [value._to_variant(batched_input=True)]\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2049: in _to_variant\n    return gen_ragged_conversion_ops.ragged_tensor_to_variant(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py:396: in ragged_tensor_to_variant\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RaggedTensorToVariant]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024639970069983974,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005268399982014671,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002536073006922379,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_scalar_ds at 0x7f6ae2d06680>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a5468af80>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a782a07f0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a782a07f0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002485680000972934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004941829974995926,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002788384008454159,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_scalar_ds at 0x7f6ae2d06680>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a5465a4d0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a78160220>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a78160220>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0022774990065954626,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004732899978989735,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002598457009298727,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_scalar_ds at 0x7f6ae2d06680>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a5465b0a0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a785ef340>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a785ef340>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023779389885021374,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005236169963609427,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025555649917805567,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 93,
                        "message": "in _make_tuple_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_tuple_ds at 0x7f6ae2d07b50>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a5465a320>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a78472fb0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a78472fb0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:93: in _make_tuple_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0025351359945489094,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005035880021750927,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027411579940235242,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 93,
                        "message": "in _make_tuple_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_tuple_ds at 0x7f6ae2d07b50>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a5468ba30>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a54280eb0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a54280eb0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:93: in _make_tuple_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002352620998863131,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00047159699897747487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00265994000073988,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 93,
                        "message": "in _make_tuple_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_tuple_ds at 0x7f6ae2d07b50>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a5468a4d0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a706299c0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a706299c0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:93: in _make_tuple_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002390178997302428,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005912229971727356,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002861218003090471,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 42,
                        "message": "in _make_vector_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_vector_ds at 0x7f6ae2d06c20>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a5468a0e0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a70100250>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a70100250>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:42: in _make_vector_ds\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002342357998713851,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004910199932055548,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026633100060280412,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 42,
                        "message": "in _make_vector_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_vector_ds at 0x7f6ae2d06c20>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a5468a4d0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a7851c670>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a7851c670>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:42: in _make_vector_ds\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024294050090247765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004541469970718026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002811010999721475,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 42,
                        "message": "in _make_vector_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_vector_ds at 0x7f6ae2d06c20>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a5465a320>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a70724a60>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a70724a60>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:42: in _make_vector_ds\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023468750005122274,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005502650019479915,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004968959983671084,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0015975629939930514,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00037256599171087146,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041704501200001687,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001516591990366578,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003573760041035712,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007222709973575547,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001504911997471936,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000395737006329,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004140419914619997,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013626319996546954,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003691140009323135,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038922201201785356,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013753550010733306,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003451859956840053,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004149699961999431,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017477109940955415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003968600067310035,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004373150004539639,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014136190002318472,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034870200033765286,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040653599717188627,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014823200035607442,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035073800245299935,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037745900044683367,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017368919943692163,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039664599171373993,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004437019961187616,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0015015289973234758,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035573898639995605,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037359900306910276,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013848200032953173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036889201146550477,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003940259921364486,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0021179379982640967,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00033623899798840284,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038394000148400664,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017083020065911114,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003579339972930029,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005418579967226833,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00136217700492125,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034703800338320434,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003760230029001832,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017170469945995137,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039110500074457377,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037665400304831564,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0015804519935045391,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003551029949449003,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003739910025615245,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014169440109981224,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003875019901897758,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003913020045729354,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017592869990039617,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005137699918122962,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005369070131564513,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017798000044422224,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005311880086082965,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005547390028368682,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017455870111007243,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034462699841242284,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003781830018851906,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017761780036380515,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003982089983765036,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003755609941435978,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0016026590019464493,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000526606003404595,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005725130031351,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001744900000630878,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005037539958721027,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005396389897214249,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0022123939997982234,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003492620016913861,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043497698788996786,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014556590031133965,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003458479914115742,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038688600761815906,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013367310020839795,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034844600304495543,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040899700252339244,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001765669003361836,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00033781099773477763,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003884170000674203,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0015984360070433468,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035949099401477724,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040288899617735296,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001434624005923979,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003712229954544455,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004253899969626218,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017314069991698489,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039543499588035047,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037793099181726575,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014945699949748814,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00038786100049037486,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041381501068826765,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013182399998186156,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003475010016700253,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004191350017208606,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0018766509892884642,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003813740040641278,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003743980050785467,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001318790004006587,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004365740023786202,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045859700185246766,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013441020128084347,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036261499917600304,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043267899309284985,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017258219886571169,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003963470080634579,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003732839977601543,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014731579867657274,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000422190991230309,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004442610079422593,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014099990075919777,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003751290059881285,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042143400060012937,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001756110999849625,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003443300083745271,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003758289967663586,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001309227998717688,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034940900513902307,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004437740135472268,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0015400010015582666,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003459150029812008,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038091500755399466,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0018330000020796433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0008982909930637106,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008187460043700412,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002192071988247335,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000642200990114361,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006157649913802743,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002818300010403618,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005721320048905909,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006437839911086485,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0031192739988910034,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005883120029466227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006040150037733838,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002392823007539846,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005864739941898733,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003762339911190793,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002140418000635691,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0009972749976441264,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006417320109903812,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002955883988761343,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004009909898741171,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038959500670898706,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013276230019982904,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0010187510051764548,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004673950024880469,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002109327004291117,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0020017759961774573,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005329660052666441,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.002191132996813394,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003368699981365353,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042795701301656663,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0014713659911649302,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003617180045694113,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004001580091426149,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001400195003952831,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034196100023109466,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042464499711059034,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0017656139971222728,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039050800842233,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16514576600457076,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:25.919771: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nSize: GPU CPU \nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Size) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n  Const_1 (Const) /device:GPU:0\n  Size_1 (Size) /device:GPU:0\n  sub_1/y (Const) /device:GPU:0\n  sub_1 (Sub) /device:GPU:0\n\n2023-05-13 17:33:25.934601: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:25.935847: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:25.936331: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:25.936812: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002067832989268936,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004700410063378513,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.39081028099462856,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:26.024259: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:26.030799: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:26.031842: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:26.291337: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:26.292594: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:26.293097: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:26.293564: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002110222994815558,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005009419983252883,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.40442654200887773,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:26.418534: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:26.425528: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:26.426739: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:26.548450: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:26.549699: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:26.550196: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:26.550673: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002700252996874042,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004960149963153526,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2803028080088552,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:26.966949: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nSize: GPU CPU \nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Size) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n  Const_1 (Const) /device:GPU:0\n  Size_1 (Size) /device:GPU:0\n  sub_1/y (Const) /device:GPU:0\n  sub_1 (Sub) /device:GPU:0\n  RaggedFromVariant_1/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const_2 (Const) /device:GPU:0\n  Size_2 (Size) /device:GPU:0\n  sub_2/y (Const) /device:GPU:0\n  sub_2 (Sub) /device:GPU:0\n  RaggedFromVariant_2/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  RaggedFromVariant_3/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 17:33:26.991447: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:26.992682: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:26.993161: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:26.993626: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0025142270023934543,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004910129937343299,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3537883100070758,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:27.119868: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:27.127816: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:27.129033: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:27.299421: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:27.300659: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:27.301174: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:27.301661: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0021334700140869245,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000508076002006419,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5231663450103952,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:27.477787: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:27.485835: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:27.487102: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:27.658750: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:27.660033: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:27.660534: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:27.660988: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0021082180028315634,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046004900650586933,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08241174298746046,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:28.020622: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 17:33:28.029441: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.030682: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.031199: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.031664: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0018764540000120178,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004366240027593449,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10908021600334905,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:28.078224: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:28.084332: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.085161: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.132985: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.133804: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.134322: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.134810: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002295561003847979,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004858439933741465,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11790414599818178,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:28.192056: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:28.198890: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.200071: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.250097: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.251249: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.251718: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.252175: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0024063239980023354,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004919060011161491,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1249232169939205,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:28.365368: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nSize: GPU CPU \nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Size) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n\n2023-05-13 17:33:28.376397: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.377592: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.378103: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.378553: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.001859034993685782,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045778800267726183,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1614650179981254,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:28.441090: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:28.447298: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.448215: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.522030: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.522936: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.523411: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.523871: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0018119720043614507,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005057590024080127,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16388849400391337,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:28.605956: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:28.612146: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.613103: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.687774: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.688805: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.689303: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.689785: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0018155069992644712,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044811199768446386,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0754062089981744,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:28.800996: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nBatchDatasetV2: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:28.809026: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.810150: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.810632: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.811080: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0016523959930054843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046651798766106367,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09449005500937346,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:28.850384: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:28.856425: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.857086: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.899378: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.900182: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.900647: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.901095: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0016539709904463962,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045087900070939213,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1806764859938994,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:28.948082: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:28.953788: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:28.954548: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.000850: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.001673: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.002144: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.002595: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002026893009315245,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006933090044185519,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.047301287995651364,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:29.141730: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nBatchDatasetV2: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:29.148978: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.150176: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.150701: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.001706825991277583,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044890200661029667,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08219438900414389,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:29.182046: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nRaggedTensorFromVariant: CPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 17:33:29.187714: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 17:33:29.188400: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.223536: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 17:33:29.224223: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.224706: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.225191: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0016018229944165796,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004405630024848506,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08421567299228627,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:29.266732: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nRaggedTensorFromVariant: CPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 17:33:29.272435: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 17:33:29.273195: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.310249: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 17:33:29.311002: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.311468: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.311923: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0021667299879482016,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006810690101701766,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.046013660001335666,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:29.365668: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nBatchDatasetV2: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:29.372222: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.373109: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.373554: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0015025020111352205,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048125500325113535,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06033150298753753,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:29.399639: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:29.430619: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.431554: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.432069: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0015938400028971955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004398500022944063,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06062401099188719,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:29.462732: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:29.494248: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.495113: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.495591: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0015953609981806949,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044956400233786553,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11100586500833742,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:29.575937: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  RaggedFromVariant_1/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 17:33:29.586909: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.587873: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.588326: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.588763: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0020968500029994175,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004490970022743568,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1927197589975549,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:29.651424: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:29.658187: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.659142: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.721807: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.722696: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.723144: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.723567: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0020518860110314563,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046770799963269383,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19713933998718858,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:29.847679: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:29.854726: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.855847: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.925290: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.926324: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.926793: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:29.927221: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0019330509967403486,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045883399434387684,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07882322400109842,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:30.069716: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 17:33:30.078160: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.079314: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.079793: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.080233: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.00172211199242156,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005121139984112233,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11632578299031593,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:30.124832: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:30.130691: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.131474: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.178902: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.179748: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.180212: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.180655: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.001778553007170558,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005088369944132864,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1125764520111261,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:30.244761: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:30.250718: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.251570: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.302092: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.303041: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.303520: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.303978: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0018324369884794578,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004710139910457656,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15457883199269418,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:30.422999: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nSize: GPU CPU \nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Const) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n  Const_1 (Const) /device:GPU:0\n  Size_1 (Size) /device:GPU:0\n  sub_1/y (Const) /device:GPU:0\n  sub_1 (Sub) /device:GPU:0\n\n2023-05-13 17:33:30.436564: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.437633: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.438115: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.438544: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002044328997726552,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005078260001027957,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.35000876200501807,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:30.521519: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:30.528093: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.529089: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.643742: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.645013: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.645507: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.645957: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0022455049911513925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045845100248698145,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4059866680036066,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:30.875217: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:30.882462: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:30.883641: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:31.009872: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:31.011102: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:31.011595: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:31.012050: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.001945412004715763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000442573000327684,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2385251329978928,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:31.384150: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nSize: GPU CPU \nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Const) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n  Const_1 (Const) /device:GPU:0\n  Size_1 (Size) /device:GPU:0\n  sub_1/y (Const) /device:GPU:0\n  sub_1 (Sub) /device:GPU:0\n  RaggedFromVariant_1/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const_2 (Const) /device:GPU:0\n  Size_2 (Const) /device:GPU:0\n  sub_2/y (Const) /device:GPU:0\n  sub_2 (Sub) /device:GPU:0\n  RaggedFromVariant_2/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  RaggedFromVariant_3/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 17:33:31.408883: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:31.410111: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:31.410593: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:31.411029: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002131307002855465,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004696039977716282,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.36687106599856634,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:31.534441: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:31.542107: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:31.543176: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:31.716734: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:31.717885: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:31.718356: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:31.718787: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0021731330052716658,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004556640051305294,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5235606589994859,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:31.905167: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:31.913160: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:31.914415: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.089454: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.090705: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.091163: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.091590: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0022597079951083288,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048622798931319267,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06884848300251178,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:32.435302: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 17:33:32.444330: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.445617: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.446113: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.446563: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0018660149944480509,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046645999827887863,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11476190500252414,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:32.493865: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:32.500198: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.501162: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.550811: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.552033: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.552528: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.553023: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002045036992058158,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004746670019812882,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11848271999042481,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:32.613024: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:32.620184: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.621416: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.673586: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.674887: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.675380: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.675861: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0022678160021314397,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046659000508952886,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10730568699364085,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:32.768915: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Const) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n\n2023-05-13 17:33:32.779931: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.781110: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.781580: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.782030: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002344756998354569,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004550279991235584,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1579225400055293,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:32.845377: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:32.851795: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.852895: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.924214: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.925401: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.925905: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:32.926343: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002019280000240542,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000530420002178289,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1748348450055346,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:33.007034: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:33.013758: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.015168: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.098577: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.099952: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.100431: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.100886: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0021434509981190786,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004789520025951788,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.061750774999381974,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:33.197101: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nBatchDatasetV2: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:33.205681: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.206959: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.207475: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.207938: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0023886620037956163,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006925889902049676,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11849357000028249,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:33.252506: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:33.259233: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.260340: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.308236: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.309454: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.309997: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.310463: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0021631480049109086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004643930005840957,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18403218100138474,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:33.372389: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:33.379285: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.380414: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.429455: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.430620: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.431163: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.431631: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0023938439990160987,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005076090019429103,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04375378599797841,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:33.564973: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nBatchDatasetV2: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:33.572214: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.573368: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.573897: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0021869259944651276,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048455700743943453,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10203477898903657,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:33.606095: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nRaggedTensorFromVariant: CPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 17:33:33.612138: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 17:33:33.613079: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.650035: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 17:33:33.650972: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.651466: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.651916: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0025798040005611256,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047169800382107496,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08732428000075743,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:33.712295: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nRaggedTensorFromVariant: CPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 17:33:33.718874: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 17:33:33.719962: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.756910: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'RaggedTensorToVariant' OpKernel for GPU devices compatible with node {{node RaggedToVariant/RaggedTensorToVariant}}\n\t.  Registered:  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QUINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_QINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_STRING]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BOOL]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX128]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_COMPLEX64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_DOUBLE]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_FLOAT]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_BFLOAT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_HALF]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT8]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT16]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT32]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_INT64]; Tsplits in [DT_INT32]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT64]\n  device='CPU'; Tvalues in [DT_UINT64]; Tsplits in [DT_INT32]\n\n2023-05-13 17:33:33.757919: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.758414: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.758865: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0022068870021030307,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045514199882745743,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.049200753986951895,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:33.813772: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nBatchDatasetV2: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:33.821173: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.822334: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.822869: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.002300886990269646,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047271899529732764,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06553532999532763,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:33.851481: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:33.886094: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.887333: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.887806: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.001728957999148406,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005545360036194324,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06438960200466681,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:33.920429: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorGetNext: CPU GPU \nIteratorToStringHandle: CPU GPU \nTensorSliceDataset: CPU \nOneShotIterator: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:33.954471: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.955679: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:33.956136: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0017955820076167583,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000460604002000764,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08973840399994515,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:34.014731: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  RaggedFromVariant_1/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 17:33:34.026206: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.027335: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.027815: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.028287: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0019527149997884408,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005391009908635169,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15078106700093485,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:34.091865: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:34.098687: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.099602: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.161324: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.162257: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.162752: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.163216: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0020890849991701543,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004947190027451143,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.200467539994861,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:34.246745: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:34.254034: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.255292: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.324065: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.325285: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.325833: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.326336: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0020906779973302037,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004631540068658069,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06640549100120552,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0>\n",
                "stderr": "2023-05-13 17:33:34.458258: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nTensorSliceDataset: CPU \nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nBatchDatasetV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator_1 (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle_1 (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext_1 (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n\n2023-05-13 17:33:34.466714: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.467880: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.468410: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.468868: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0018347039876971394,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005106889875605702,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18907793700054754,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20>\n",
                "stderr": "2023-05-13 17:33:34.519962: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:34.526073: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.526891: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.578177: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.579292: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.579793: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.580264: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0021934760006843135,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005156900006113574,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18537699700391386,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23>\n",
                "stderr": "2023-05-13 17:33:34.709076: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIteratorToStringHandle: CPU GPU \nOneShotIterator: CPU \nTensorSliceDataset: CPU \nIteratorGetNext: CPU GPU \nMapDataset: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n\n2023-05-13 17:33:34.715802: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.716898: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.766543: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.767476: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.767968: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:34.768428: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.0021010329946875572,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005219480080995709,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004989609878975898,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testWithStructuredElements_test_mode_eager_tfapiversion_1>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0015587820089422166,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00040957499004434794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0893727160000708,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 165,
                        "message": "in testWithStructuredElements"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testWithStructuredElements_test_mode_eager_tfapiversion_2>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testWithStructuredElements_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44f3cee0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f6a706845b0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f6a706845b0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:165: in testWithStructuredElements\n    dataset = dataset.apply(batching.dense_to_ragged_batch(batch_size))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:MapDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024295250041177496,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005120770074427128,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005473499913932756,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testWithStructuredElements_test_mode_graph_tfapiversion_1>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0015577710000798106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040106699452735484,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17828117198951077,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testWithStructuredElements_test_mode_graph_tfapiversion_2>\n",
                "stderr": "2023-05-13 17:33:35.482749: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nDeserializeSparse: CPU \nSize: GPU CPU \nPack: GPU CPU \nConst: GPU CPU \nRaggedTensorFromVariant: CPU \nMapDataset: CPU \nIteratorGetNext: CPU GPU \nSub: GPU CPU \nTensorSliceDataset: CPU \nUnpack: GPU CPU \nBatchDatasetV2: CPU \nOneShotIterator: CPU \nIteratorToStringHandle: CPU GPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  TensorSliceDataset (TensorSliceDataset) /device:GPU:0\n  MapDataset (MapDataset) /device:GPU:0\n  MapDataset_1 (MapDataset) /device:GPU:0\n  BatchDatasetV2 (BatchDatasetV2) /device:GPU:0\n  OneShotIterator (OneShotIterator) /device:GPU:0\n  IteratorToStringHandle (IteratorToStringHandle) /device:GPU:0\n  IteratorGetNext (IteratorGetNext) /device:GPU:0\n  RaggedFromVariant/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  RaggedFromVariant_1/RaggedTensorFromVariant (RaggedTensorFromVariant) /device:GPU:0\n  Const (Const) /device:GPU:0\n  Size (Size) /device:GPU:0\n  sub/y (Const) /device:GPU:0\n  sub (Sub) /device:GPU:0\n  DeserializeSparse (DeserializeSparse) /device:GPU:0\n  unstack (Unpack) /device:GPU:0\n  Const_1 (Const) /device:GPU:0\n  stack (Pack) /device:GPU:0\n\n2023-05-13 17:33:35.500562: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'TensorSliceDataset' OpKernel for GPU devices compatible with node {{node TensorSliceDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:35.501740: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:35.502224: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'MapDataset' OpKernel for GPU devices compatible with node {{node MapDataset_1}}\n\t.  Registered:  device='CPU'\n\n2023-05-13 17:33:35.502675: W tensorflow/core/grappler/utils/graph_view.cc:836] No registered 'BatchDatasetV2' OpKernel for GPU devices compatible with node {{node BatchDatasetV2}}\n\t.  Registered:  device='CPU'\n\n"
            },
            "teardown": {
                "duration": 0.00197585100249853,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004997609939891845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046925299102440476,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.003560753000783734,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::testDiagFlat",
            "lineno": 145,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006804879958508536,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3574681820027763,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:MatrixDiagV3] name: diag"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/diagflat_test.py",
                        "lineno": 182,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/diagflat_test.py",
                        "lineno": 165,
                        "message": "in run_test"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_array_ops.py",
                        "lineno": 343,
                        "message": "in diagflat"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_array_ops.py",
                        "lineno": 304,
                        "message": "in diag"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_utils.py",
                        "lineno": 602,
                        "message": "in cond"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_array_ops.py",
                        "lineno": 305,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_array_ops.py",
                        "lineno": 289,
                        "message": "in _diag"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_utils.py",
                        "lineno": 604,
                        "message": "in cond"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_array_ops.py",
                        "lineno": 292,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py",
                        "lineno": 2614,
                        "message": "in matrix_diag"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 5679,
                        "message": "in matrix_diag_v3"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDiagFlat>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.diagflat_test.ArrayCreationTest testMethod=testDiagFlat>\n\n    def testDiagFlat(self):\n        array_transforms = [\n            lambda x: x,  # Identity,\n            ops.convert_to_tensor,\n            np.array,\n            lambda x: np.array(x, dtype=np.float32),\n            lambda x: np.array(x, dtype=np.float64),\n            np_array_ops.array,\n            lambda x: np_array_ops.array(x, dtype=np.float32),\n            lambda x: np_array_ops.array(x, dtype=np.float64)\n        ]\n    \n        def run_test(arr):\n            for fn in array_transforms:\n                import tensorflow as tf\n                with tf.device('cpu'):\n                    arr = fn(arr)\n                timer = tensorflow_op_timer()\n                with timer:\n                    test_2 = np_array_ops.diagflat(arr)\n                    timer.gen.send(test_2)\n                self.match(\n                    np_array_ops.diagflat(arr),\n                    np.diagflat(arr),\n                    msg='diagflat({})'.format(arr))\n                for k in range(-3, 3):\n                    timer = tensorflow_op_timer()\n                    with timer:\n                        test_1 = np_array_ops.diagflat(arr, k)\n                        timer.gen.send(test_1)\n                    self.match(\n                        np_array_ops.diagflat(arr, k),\n                        np.diagflat(arr, k),\n                        msg='diagflat({}, k={})'.format(arr, k))\n        # 1-d arrays.\n        run_test([])\n>       run_test([1])\n\nsrc/tensorflow_tests_reduced/diagflat_test.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/diagflat_test.py:165: in run_test\n    test_2 = np_array_ops.diagflat(arr)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_array_ops.py:343: in diagflat\n    return diag(array_ops.reshape(v, [-1]), k)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_array_ops.py:304: in diag\n    result = np_utils.cond(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_utils.py:602: in cond\n    return true_fn()\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_array_ops.py:305: in <lambda>\n    math_ops.equal(v_rank, 1), lambda: _diag(v, k), lambda: _diag_part(v, k))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_array_ops.py:289: in _diag\n    return np_utils.cond(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_utils.py:604: in cond\n    return false_fn()\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/numpy_ops/np_array_ops.py:292: in <lambda>\n    lambda: array_ops.matrix_diag(v, k=k))\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py:2614: in matrix_diag\n    return gen_array_ops.matrix_diag_v3(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py:5679: in matrix_diag_v3\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = 'diag'\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:MatrixDiagV3] name: diag\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.003037640010006726,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006619909981964156,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005198209983063862,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016554229950997978,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxGRY",
            "lineno": 114,
            "outcome": "failed",
            "setup": {
                "duration": 0.0011693249980453402,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006950903989491053,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:DrawBoundingBoxes]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 118,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5789,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1375,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDrawBoundingBoxGRY>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxGRY>\n\n    def testDrawBoundingBoxGRY(self):\n        \"\"\"Test if drawing bounding box on a GRY image works.\"\"\"\n        image = np.zeros([4, 4, 1], \"float32\")\n>       self._testDrawBoundingBoxColorCycling(image)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py:5789: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes(images, boxes, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_image_ops.py:1375: in draw_bounding_boxes\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:DrawBoundingBoxes]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0027133050025440753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxHalf",
            "lineno": 133,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005902760021854192,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008521371011738665,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:DrawBoundingBoxesV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 139,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5790,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1448,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDrawBoundingBoxHalf>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxHalf>\n\n    def testDrawBoundingBoxHalf(self):\n        \"\"\"Test if RGBA color cycling works correctly with provided colors.\"\"\"\n        image = np.zeros([10, 10, 4], \"float32\")\n        colors = np.asarray([[0.5, 0, 0.5, 1], [0.5, 0.5, 0, 1], [0.5, 0, 0, 1],\n                             [0, 0, 0.5, 1]])\n>       self._testDrawBoundingBoxColorCycling(\n            image, dtype=dtypes.half, colors=colors)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py:5790: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes_v2(images, boxes, colors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_image_ops.py:1448: in draw_bounding_boxes_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:DrawBoundingBoxesV2]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002812182006891817,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCycling",
            "lineno": 109,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004840420006075874,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006626340007642284,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:DrawBoundingBoxes]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 113,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5789,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1375,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDrawBoundingBoxRGBAColorCycling>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxRGBAColorCycling>\n\n    def testDrawBoundingBoxRGBAColorCycling(self):\n        \"\"\"Test if RGBA color cycling works correctly.\"\"\"\n        image = np.zeros([10, 10, 4], \"float32\")\n>       self._testDrawBoundingBoxColorCycling(image)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py:5789: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes(images, boxes, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_image_ops.py:1375: in draw_bounding_boxes\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:DrawBoundingBoxes]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002825578994816169,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCyclingWithColors",
            "lineno": 126,
            "outcome": "failed",
            "setup": {
                "duration": 0.00047312199603766203,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00685446200077422,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:DrawBoundingBoxesV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 132,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5790,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1448,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDrawBoundingBoxRGBAColorCyclingWithColors>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxRGBAColorCyclingWithColors>\n\n    def testDrawBoundingBoxRGBAColorCyclingWithColors(self):\n        \"\"\"Test if RGBA color cycling works correctly with provided colors.\"\"\"\n        image = np.zeros([10, 10, 4], \"float32\")\n        colors = np.asarray([[0.5, 0, 0.5, 1], [0.5, 0.5, 0, 1], [0.5, 0, 0, 1],\n                             [0, 0, 0.5, 1]])\n>       self._testDrawBoundingBoxColorCycling(image, colors=colors)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py:5790: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes_v2(images, boxes, colors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_image_ops.py:1448: in draw_bounding_boxes_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:DrawBoundingBoxesV2]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0026229700015392154,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCycling",
            "lineno": 104,
            "outcome": "failed",
            "setup": {
                "duration": 0.00043680399539880455,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006976496006245725,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:DrawBoundingBoxes]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 108,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5789,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1375,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDrawBoundingBoxRGBColorCycling>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxRGBColorCycling>\n\n    def testDrawBoundingBoxRGBColorCycling(self):\n        \"\"\"Test if RGB color cycling works correctly.\"\"\"\n        image = np.zeros([10, 10, 3], \"float32\")\n>       self._testDrawBoundingBoxColorCycling(image)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py:5789: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes(images, boxes, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_image_ops.py:1375: in draw_bounding_boxes\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:DrawBoundingBoxes]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0027936779952142388,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCyclingWithColors",
            "lineno": 119,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004754270048579201,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00673491699853912,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:DrawBoundingBoxesV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 125,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5790,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1448,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDrawBoundingBoxRGBColorCyclingWithColors>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxRGBColorCyclingWithColors>\n\n    def testDrawBoundingBoxRGBColorCyclingWithColors(self):\n        \"\"\"Test if RGB color cycling works correctly with provided colors.\"\"\"\n        image = np.zeros([10, 10, 3], \"float32\")\n        colors = np.asarray([[1, 1, 0, 1], [0, 0, 1, 1], [0.5, 0, 0.5, 1],\n                             [0.5, 0.5, 0, 1], [0, 1, 1, 1], [1, 0, 1, 1]])\n>       self._testDrawBoundingBoxColorCycling(image, colors=colors)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/image_ops_impl.py:5790: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes_v2(images, boxes, colors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_image_ops.py:1448: in draw_bounding_boxes_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:DrawBoundingBoxesV2]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002660275000380352,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005146110052010044,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004345829947851598,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0018000010022660717,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testCreate",
            "lineno": 109,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006353189965011552,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018804463994456455,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCreate>\n"
            },
            "teardown": {
                "duration": 0.0015599040052620694,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseDefaultGraph",
            "lineno": 96,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004448889958439395,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014217479998478666,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUseDefaultGraph>\n"
            },
            "teardown": {
                "duration": 0.00145161799446214,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseExistingGraph",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037915099528618157,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013911392001318745,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUseExistingGraph>\n"
            },
            "teardown": {
                "duration": 0.0014488730084849522,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003751879994524643,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000388319997000508,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014962349960114807,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesDeviceAssignment",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005679089954355732,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.033899646005011164,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesDeviceAssignment>\n"
            },
            "teardown": {
                "duration": 0.001432912002201192,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNames",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004360939929028973,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05287293498986401,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNames>\n"
            },
            "teardown": {
                "duration": 0.0016057769971666858,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesNoDebias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004782010073540732,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.042231982995872386,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNamesNoDebias>\n"
            },
            "teardown": {
                "duration": 0.0013785490009468049,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScope",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004682910075644031,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05103994101227727,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNamesRespectScope>\n"
            },
            "teardown": {
                "duration": 0.001397519008605741,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScopeNoDebias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004082219966221601,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0397918880044017,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNamesRespectScopeNoDebias>\n"
            },
            "teardown": {
                "duration": 0.0014750160044059157,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004636029916582629,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10892548700212501,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Scalar>\n",
                "stderr": "2023-05-13 17:33:38.499017: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.002261499990709126,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041733500256668776,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12425103998975828,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Scalar_Debias>\n",
                "stderr": "2023-05-13 17:33:38.621810: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0022432340047089383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047944599646143615,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1508687969908351,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Scalar_Debias_DynamicDecay>\n",
                "stderr": "2023-05-13 17:33:38.764895: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.002122042002156377,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042537899571470916,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12947711900051218,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Scalar_DynamicDecay>\n",
                "stderr": "2023-05-13 17:33:38.903051: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0022526050015585497,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004309590003686026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1106287740112748,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Vector>\n",
                "stderr": "2023-05-13 17:33:39.026810: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.006758254996384494,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047815899597480893,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12689556600525975,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Vector_Debias>\n",
                "stderr": "2023-05-13 17:33:39.157515: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0017367899999953806,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044989401067141443,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14973636200011242,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Vector_Debias_DynamicDecay>\n",
                "stderr": "2023-05-13 17:33:39.298759: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0026736879954114556,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005065090081188828,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1422699639952043,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNoNumUpdates_Vector_DynamicDecay>\n",
                "stderr": "2023-05-13 17:33:39.445396: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.002777027999400161,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046662898967042565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12045748700620607,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Scalar>\n",
                "stderr": "2023-05-13 17:33:39.580647: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.002782034993288107,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000460379000287503,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14006181800505146,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Scalar_Debias>\n",
                "stderr": "2023-05-13 17:33:39.718692: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0025479540054220706,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046628000563941896,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15799188900564332,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Scalar_Debias_DynamicDecay>\n",
                "stderr": "2023-05-13 17:33:39.871562: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0026164879964198917,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046203100646380335,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1381766270060325,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Scalar_DynamicDecay>\n",
                "stderr": "2023-05-13 17:33:40.021035: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0019631739996839315,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004805630014743656,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12238423200324178,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Vector>\n",
                "stderr": "2023-05-13 17:33:40.155488: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0021712140005547553,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004877280007349327,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13618492399109527,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Vector_Debias>\n",
                "stderr": "2023-05-13 17:33:40.288956: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:10 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0021505710028577596,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004631490010069683,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15407532900280785,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Vector_Debias_DynamicDecay>\n",
                "stderr": "2023-05-13 17:33:40.438697: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0024549220106564462,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043828500201925635,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13749180300510488,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesNumUpdates_Vector_DynamicDecay>\n",
                "stderr": "2023-05-13 17:33:40.584226: W tensorflow/c/c_api.cc:291] Operation '{name:'v1/Assign' id:15 op device:{requested: '', assigned: ''} def:{{{node v1/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](v1, v1/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0023131009947974235,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesWithControlDeps",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045462399430107325,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06602372998895589,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAverageVariablesWithControlDeps>\n"
            },
            "teardown": {
                "duration": 0.0017358850018354133,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testBasicEager",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004332710086600855,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017092547001084313,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasicEager>\n"
            },
            "teardown": {
                "duration": 0.0021311739983502775,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testCopyXlaSharding",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039443999412469566,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.030802331006270833,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCopyXlaSharding>\n"
            },
            "teardown": {
                "duration": 0.001604165998287499,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testImportedGraphVariablesToRestore",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006734850030625239,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016293868000502698,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testImportedGraphVariablesToRestore>\n"
            },
            "teardown": {
                "duration": 0.0021875459933653474,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNames",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005965440068393946,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.055993565008975565,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSubsetAverageVariablesNames>\n"
            },
            "teardown": {
                "duration": 0.0017454780027037486,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNamesEager",
            "lineno": 449,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004127409920329228,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013785978997475468,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSubsetAverageVariablesNamesEager>\n"
            },
            "teardown": {
                "duration": 0.001942359987879172,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00040296799852512777,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003975229919888079,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001916061999509111,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::testArrayFill",
            "lineno": 44,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006571709964191541,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005342168005881831,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Fill]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/fill_test.py",
                        "lineno": 48,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py",
                        "lineno": 243,
                        "message": "in fill"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 3505,
                        "message": "in fill"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testArrayFill>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.fill_test.RunEagerOpAsFunctionTest testMethod=testArrayFill>\n\n    def testArrayFill(self):\n        timer = tensorflow_op_timer()\n        with timer:\n>           test = array_ops.fill(\n            constant_op.constant([2], dtype=dtypes.int64), constant_op.constant(1))\n\nsrc/tensorflow_tests_reduced/fill_test.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py:243: in fill\n    result = gen_array_ops.fill(dims, value, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py:3505: in fill\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Fill]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002707476989598945,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005540529964491725,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004832819977309555,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001984998001717031,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testDictInputs",
            "lineno": 67,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007796800055075437,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009194754995405674,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 78,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDictInputs>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testDictInputs>\n\n    def testDictInputs(self):\n      elements = [{\n          \"foo\": [1, 2, 3],\n          \"bar\": [[4.0], [5.0], [6.0]]\n      }, {\n          \"foo\": [4, 5, 6],\n          \"bar\": [[7.0], [8.0], [9.0]]\n      }]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002540073008276522,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_emptyinput",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004441189958015457,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000709620988345705,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 334,
                    "message": "ValueError: The test does not take parameters that were passed : {'elements'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 334,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testInvalidInputs_test_elements_emptyinput>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testInvalidInputs_test_elements_emptyinput>\nkwargs = {'elements': empty_input}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a5425aef0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n        raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\n      missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n          set(requested_parameters))\n      if missing_arguments:\n>       raise ValueError(\"The test does not take parameters that were passed \"\n                         \": {} .\".format(missing_arguments))\nE       ValueError: The test does not take parameters that were passed : {'elements'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:334: ValueError"
            },
            "teardown": {
                "duration": 0.00154577600187622,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_nonlistinput",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003724629932548851,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005093369982205331,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 334,
                    "message": "ValueError: The test does not take parameters that were passed : {'elements'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 334,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testInvalidInputs_test_elements_nonlistinput>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testInvalidInputs_test_elements_nonlistinput>\nkwargs = {'elements': non-list_input}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a5425af80>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n        raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\n      missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n          set(requested_parameters))\n      if missing_arguments:\n>       raise ValueError(\"The test does not take parameters that were passed \"\n                         \": {} .\".format(missing_arguments))\nE       ValueError: The test does not take parameters that were passed : {'elements'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:334: ValueError"
            },
            "teardown": {
                "duration": 0.0014423890097532421,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testLargeNInputs",
            "lineno": 37,
            "outcome": "failed",
            "setup": {
                "duration": 0.00038818499888293445,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0036159579904051498,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 40,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testLargeNInputs>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testLargeNInputs>\n\n    def testLargeNInputs(self):\n      elements = list(range(1000))\n>     dataset = dataset_ops.Dataset.from_tensor_slices(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorSliceDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002540822999435477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testNonRectangularInputs",
            "lineno": 55,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045471699559129775,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0029039479995844886,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 60,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testNonRectangularInputs>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testNonRectangularInputs>\n\n    def testNonRectangularInputs(self):\n      elements = [[[1]], [[2, 3]], [[4, 5, 6]]]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002641826999024488,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testTupleInputs",
            "lineno": 43,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005301180062815547,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0029414160089800134,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 48,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testTupleInputs>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testTupleInputs>\n\n    def testTupleInputs(self):\n      elements = [(1, 2), (3, 4)]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0025276149972341955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testUintInputs",
            "lineno": 89,
            "outcome": "failed",
            "setup": {
                "duration": 0.000454645007266663,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005659877002472058,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 97,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testUintInputs>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testUintInputs>\n\n    def testUintInputs(self):\n      elements = [(np.tile(np.array([[0], [1]], dtype=np.uint8), 2),\n                   np.tile(np.array([[2], [256]], dtype=np.uint16), 2),\n                   np.tile(np.array([[4], [65536]], dtype=np.uint32), 2),\n                   np.tile(np.array([[8], [4294967296]], dtype=np.uint64), 2))]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0028024509956594557,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004684129962697625,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042848401062656194,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0019377589924260974,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testDictionary",
            "lineno": 149,
            "outcome": "failed",
            "setup": {
                "duration": 0.00043929199455305934,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001005329002509825,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 153,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDictionary>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testDictionary>\n\n    def testDictionary(self):\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list([{\"a\": 1, \"b\": 3}, {\"a\": 2, \"b\": 4}])\n\nsrc/tensorflow_tests_reduced/from_list_test.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023580519919050857,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testInvalidIndex",
            "lineno": 108,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004415980074554682,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009911900124279782,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 112,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testInvalidIndex>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testInvalidIndex>\n\n    def testInvalidIndex(self):\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list([1, 2, 3])\n\nsrc/tensorflow_tests_reduced/from_list_test.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024501389998476952,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testMultipleElements",
            "lineno": 138,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004545919946394861,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0028993850137339905,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 142,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleElements>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testMultipleElements>\n\n    def testMultipleElements(self):\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list([[1, 2], [3, 4], [5, 6]])\n\nsrc/tensorflow_tests_reduced/from_list_test.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024126799980876967,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testName",
            "lineno": 180,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004557419888442382,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025528580008540303,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 184,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testName>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testName>\n\n    def testName(self):\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list([42], name=\"from_list\")\n\nsrc/tensorflow_tests_reduced/from_list_test.py:184: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0025266559969168156,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testNumpy",
            "lineno": 164,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004447819956112653,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0034619770012795925,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 174,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testNumpy>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testNumpy>\n\n    def testNumpy(self):\n      elements = [\n          np.tile(np.array([[0], [1]], dtype=np.uint64), 2),\n          np.tile(np.array([[2], [256]], dtype=np.uint64), 2),\n          np.tile(np.array([[4], [65536]], dtype=np.uint64), 2),\n          np.tile(np.array([[8], [4294967296]], dtype=np.uint64), 2),\n      ]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002438291994621977,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testOneDimensionalArray",
            "lineno": 119,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004513480089372024,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010106889967573807,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 124,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testOneDimensionalArray>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testOneDimensionalArray>\n\n    def testOneDimensionalArray(self):\n      tensor = [1, 2, 3]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(tensor)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0021884779998799786,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testTwoDimensionalArray",
            "lineno": 130,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004853189893765375,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027699589991243556,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 133,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testTwoDimensionalArray>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testTwoDimensionalArray>\n\n    def testTwoDimensionalArray(self):\n      tensor = [[1, 2], [3, 4]]\n>     dataset = from_list.from_list(tensor)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002571678996901028,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045689099351875484,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004451360000530258,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017686619976302609,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004194189968984574,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007621345997904427,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 225,
                        "message": "in testDict"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 86,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 193,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 226,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDict_test_verifyfn_verifyexhaustediterator>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=testDict_test_verifyfn_verifyexhaustediterator>\nkwargs = {'verify_fn': verify_exhausted_iterator}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a45ae32e0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:225: in testDict\n    verify_fn(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:86: in verify_exhausted_iterator\n    obj.verify_exhausted_iterator(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:193: in verify_exhausted_iterator\n    self.gen_outputs(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:226: in <lambda>\n    self, lambda: self._build_list_dataset(dict_elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023164849990280345,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00047225899470504373,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0017423370009055361,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 225,
                        "message": "in testDict"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 76,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 177,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 226,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDict_test_verifyfn_verifyfullyusediterator>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=testDict_test_verifyfn_verifyfullyusediterator>\nkwargs = {'verify_fn': verify_fully_used_iterator}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a5425ac20>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:225: in testDict\n    verify_fn(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:76: in verify_fully_used_iterator\n    obj.verify_fully_used_iterator(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:177: in verify_fully_used_iterator\n    self.verify_run_with_breaks(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:226: in <lambda>\n    self, lambda: self._build_list_dataset(dict_elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0022120909998193383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045563899038825184,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0018449610070092604,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 225,
                        "message": "in testDict"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 96,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 226,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 226,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDict_test_verifyfn_verifymultiplebreaks>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=testDict_test_verifyfn_verifymultiplebreaks>\nkwargs = {'verify_fn': verify_multiple_breaks}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a5425b760>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:225: in testDict\n    verify_fn(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:96: in verify_multiple_breaks\n    obj.verify_multiple_breaks(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:226: in verify_multiple_breaks\n    self.verify_run_with_breaks(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:226: in <lambda>\n    self, lambda: self._build_list_dataset(dict_elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024023239966481924,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005061679985374212,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001057872999808751,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testDict_test_verifyfn_verifyresetrestorediterator>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped: Eager mode iteration do not support re-initialization.')"
            },
            "teardown": {
                "duration": 0.0016524029924767092,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00036372599424794316,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001510665999376215,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 225,
                        "message": "in testDict"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 66,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 152,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 226,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDict_test_verifyfn_verifyunusediterator>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=testDict_test_verifyfn_verifyunusediterator>\nkwargs = {'verify_fn': verify_unused_iterator}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a45ae27a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:225: in testDict\n    verify_fn(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:66: in verify_unused_iterator\n    obj.verify_unused_iterator(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:152: in verify_unused_iterator\n    self.verify_run_with_breaks(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:226: in <lambda>\n    self, lambda: self._build_list_dataset(dict_elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023185780009953305,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005031449982197955,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004433190042618662,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016012889973353595,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003666139964479953,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003735723003046587,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in test"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 86,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 193,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyexhaustediterator>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=test_test_verifyfn_verifyexhaustediterator>\nkwargs = {'verify_fn': verify_exhausted_iterator}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a542243a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in test\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:86: in verify_exhausted_iterator\n    obj.verify_exhausted_iterator(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:193: in verify_exhausted_iterator\n    self.gen_outputs(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in <lambda>\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002440429001580924,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005525440064957365,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0037097140011610463,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in test"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 76,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 177,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyfullyusediterator>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=test_test_verifyfn_verifyfullyusediterator>\nkwargs = {'verify_fn': verify_fully_used_iterator}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a45ae27a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in test\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:76: in verify_fully_used_iterator\n    obj.verify_fully_used_iterator(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:177: in verify_fully_used_iterator\n    self.verify_run_with_breaks(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in <lambda>\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002387348999036476,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004704530001617968,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003923702999600209,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in test"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 96,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 226,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifymultiplebreaks>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=test_test_verifyfn_verifymultiplebreaks>\nkwargs = {'verify_fn': verify_multiple_breaks}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a45ae0af0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in test\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:96: in verify_multiple_breaks\n    obj.verify_multiple_breaks(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:226: in verify_multiple_breaks\n    self.verify_run_with_breaks(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in <lambda>\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023937469959491864,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045378500362858176,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001081665002857335,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyresetrestorediterator>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped: Eager mode iteration do not support re-initialization.')"
            },
            "teardown": {
                "duration": 0.001585715013789013,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003630649880506098,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0035448039998300374,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in test"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 66,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 152,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyunusediterator>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=test_test_verifyfn_verifyunusediterator>\nkwargs = {'verify_fn': verify_unused_iterator}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a54303880>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in test\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:66: in verify_unused_iterator\n    obj.verify_unused_iterator(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:152: in verify_unused_iterator\n    self.verify_run_with_breaks(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in <lambda>\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ListDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024406739976257086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testCPUGPUMatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000714668000000529,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17580388899659738,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCPUGPUMatch>\n"
            },
            "teardown": {
                "duration": 0.0017762629868229851,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testDistinct",
            "lineno": 136,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004644129949156195,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0071990370051935315,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 140,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 45,
                        "message": "in func"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 648,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 241,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testDistinct>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testDistinct>\n\n    def testDistinct(self):\n      for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n        sampler = self._Sampler(1000, 2.0, 1.0, dt)\n>       x = sampler()\n\nsrc/tensorflow_tests_reduced/gamma_test.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/gamma_test.py:45: in func\n    rng = random_ops.random_gamma(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/random_ops.py:648: in random_gamma\n    gen_random_ops.random_gamma(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_random_ops.py:241: in random_gamma\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002743694989476353,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testEmptySamplingNoError",
            "lineno": 57,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004695390089182183,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006869417004054412,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 59,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 648,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 241,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testEmptySamplingNoError>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testEmptySamplingNoError>\n\n    def testEmptySamplingNoError(self):\n>     self.evaluate(random_ops.random_gamma(\n          [5], alpha=np.ones([2, 0, 3]), beta=np.ones([3]), dtype=dtypes.float32))\n\nsrc/tensorflow_tests_reduced/gamma_test.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/random_ops.py:648: in random_gamma\n    gen_random_ops.random_gamma(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_random_ops.py:241: in random_gamma\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002868057999876328,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044343300396576524,
                "outcome": "passed"
            },
            "call": {
                "duration": 14.690553010994336,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMomentsFloat32>\n"
            },
            "teardown": {
                "duration": 0.002861257002223283,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007081609946908429,
                "outcome": "passed"
            },
            "call": {
                "duration": 20.560022866993677,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMomentsFloat64>\n"
            },
            "teardown": {
                "duration": 0.0025619720108807087,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNoCSE",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004811200051335618,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06865160800225567,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNoCSE>\n"
            },
            "teardown": {
                "duration": 0.0019138990028295666,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallShape",
            "lineno": 127,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004318610008340329,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008466560990200378,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 129,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 121,
                        "message": "in _testZeroDensity"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 45,
                        "message": "in func"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 648,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 241,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testNonZeroSmallShape>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testNonZeroSmallShape>\n\n    def testNonZeroSmallShape(self):\n>     self._testZeroDensity(0.01)\n\nsrc/tensorflow_tests_reduced/gamma_test.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/gamma_test.py:121: in _testZeroDensity\n    x = sampler()\nsrc/tensorflow_tests_reduced/gamma_test.py:45: in func\n    rng = random_ops.random_gamma(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/random_ops.py:648: in random_gamma\n    gen_random_ops.random_gamma(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_random_ops.py:241: in random_gamma\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0025516060122754425,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallishShape",
            "lineno": 130,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004313060053391382,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009186273004161194,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 132,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 121,
                        "message": "in _testZeroDensity"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 45,
                        "message": "in func"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 648,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 241,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testNonZeroSmallishShape>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testNonZeroSmallishShape>\n\n    def testNonZeroSmallishShape(self):\n>     self._testZeroDensity(0.35)\n\nsrc/tensorflow_tests_reduced/gamma_test.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/gamma_test.py:121: in _testZeroDensity\n    x = sampler()\nsrc/tensorflow_tests_reduced/gamma_test.py:45: in func\n    rng = random_ops.random_gamma(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/random_ops.py:648: in random_gamma\n    gen_random_ops.random_gamma(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_random_ops.py:241: in random_gamma\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0027327179996063933,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNpDtypes",
            "lineno": 53,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004392620030557737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0069822439982090145,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 55,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 648,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 241,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testNpDtypes>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testNpDtypes>\n\n    def testNpDtypes(self):\n>     self.evaluate(random_ops.random_gamma(\n          [5], alpha=np.ones([2, 1, 3]), beta=np.ones([3]), dtype=np.float32))\n\nsrc/tensorflow_tests_reduced/gamma_test.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/random_ops.py:648: in random_gamma\n    gen_random_ops.random_gamma(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_random_ops.py:241: in random_gamma\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0029384450026554987,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testPositive",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005410199955804273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0660220260033384,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPositive>\n"
            },
            "teardown": {
                "duration": 0.0016435720026493073,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSeed",
            "lineno": 160,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004592909972416237,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006276632004301064,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 165,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 45,
                        "message": "in func"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 648,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 241,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testSeed>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testSeed>\n\n    def testSeed(self):\n      for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n        sx = self._Sampler(1000, 0.0, 1.0, dt, seed=345)\n        sy = self._Sampler(1000, 0.0, 1.0, dt, seed=345)\n>       self.assertAllEqual(sx(), sy())\n\nsrc/tensorflow_tests_reduced/gamma_test.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/gamma_test.py:45: in func\n    rng = random_ops.random_gamma(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/random_ops.py:648: in random_gamma\n    gen_random_ops.random_gamma(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_random_ops.py:241: in random_gamma\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0030320649966597557,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004288360069040209,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.040294847000041045,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testShape>\n"
            },
            "teardown": {
                "duration": 0.0014788710104767233,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSizeTooLarge",
            "lineno": 221,
            "outcome": "failed",
            "setup": {
                "duration": 0.00041241399594582617,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0066969389881705865,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/gamma_test.py",
                    "lineno": 226,
                    "message": "AssertionError: \"overflow\" does not match \"Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]\""
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 226,
                        "message": "AssertionError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testSizeTooLarge>\n",
                "longrepr": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]\n\nDuring handling of the above exception, another exception occurred:\n\nself = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testSizeTooLarge>\n\n    def testSizeTooLarge(self):\n      # Grappler asserts on size overflow, so this error is only caught when\n      # running eagerly.\n      if context.executing_eagerly():\n>       with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                    \"overflow\"):\nE                                   AssertionError: \"overflow\" does not match \"Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:RandomGamma]\"\n\nsrc/tensorflow_tests_reduced/gamma_test.py:226: AssertionError"
            },
            "teardown": {
                "duration": 0.0017340980120934546,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041937100468203425,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00034161400981247425,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.0015822269924683496,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collection",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005976559914415702,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008435709896730259,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collection>\n"
            },
            "teardown": {
                "duration": 0.0012946599890710786,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_generator",
            "lineno": 206,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037703099951613694,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000542694004252553,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collections_from_generator>\n"
            },
            "teardown": {
                "duration": 0.002345259999856353,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_list",
            "lineno": 178,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004626709996955469,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005873659974895418,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collections_from_list>\n"
            },
            "teardown": {
                "duration": 0.0018110200035152957,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_set",
            "lineno": 225,
            "outcome": "passed",
            "setup": {
                "duration": 0.00032786499650683254,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046902199392206967,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collections_from_set>\n"
            },
            "teardown": {
                "duration": 0.0012707300047622994,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_string",
            "lineno": 240,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037940399488434196,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004918390040984377,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collections_from_string>\n"
            },
            "teardown": {
                "duration": 0.0013130070001352578,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_tuple",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038511399179697037,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005321329954313114,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collections_from_tuple>\n"
            },
            "teardown": {
                "duration": 0.0013045179948676378,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_uniquify",
            "lineno": 168,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033819599775597453,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000502787996083498,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_add_to_collections_uniquify>\n"
            },
            "teardown": {
                "duration": 0.0017075969954021275,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_default_graph",
            "lineno": 249,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003284940030425787,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005384409887483343,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_default_graph>\n"
            },
            "teardown": {
                "duration": 0.0013330719957593828,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_get_collections",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037425699701998383,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004534230101853609,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_get_collections>\n"
            },
            "teardown": {
                "duration": 0.0015754990017740056,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036494100640993565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00034203399263788015,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014595609973184764,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_create_global_step",
            "lineno": 67,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005515759985428303,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007922117001726292,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_create_global_step>\n"
            },
            "teardown": {
                "duration": 0.0013604959967778996,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_global_step",
            "lineno": 82,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003490739909466356,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0030428540048887953,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_get_global_step>\n"
            },
            "teardown": {
                "duration": 0.0015283660031855106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_or_create_global_step",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035532900074031204,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003579670999897644,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_get_or_create_global_step>\n"
            },
            "teardown": {
                "duration": 0.0012798969983123243,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_dtype",
            "lineno": 31,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003630360006354749,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0031883329938864335,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_invalid_dtype>\n"
            },
            "teardown": {
                "duration": 0.00135751799098216,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_shape",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003997000021627173,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00314990000333637,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_invalid_shape>\n"
            },
            "teardown": {
                "duration": 0.0043644949910230935,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003354709915583953,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037035500281490386,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00147131500125397,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testPerReplicaBatchSize",
            "lineno": 32,
            "outcome": "passed",
            "setup": {
                "duration": 0.000630706999800168,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003796179953496903,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPerReplicaBatchSize>\n"
            },
            "teardown": {
                "duration": 0.0013764920004177839,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testProperties",
            "lineno": 25,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004146110004512593,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003706150018842891,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testProperties>\n"
            },
            "teardown": {
                "duration": 0.0014770929992664605,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testStr",
            "lineno": 43,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037564900412689894,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003688389988383278,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStr>\n"
            },
            "teardown": {
                "duration": 0.00172717499663122,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000339483012794517,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000367098007700406,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0013933110021753237,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testAddShape",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006542790069943294,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00541312999848742,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAddShape>\n"
            },
            "teardown": {
                "duration": 0.0019087839900748804,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testScalarShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003887830098392442,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011140382994199172,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testScalarShape>\n"
            },
            "teardown": {
                "duration": 0.0019636239885585383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testShape",
            "lineno": 69,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008591090008849278,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012250669969944283,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testShape>\n"
            },
            "teardown": {
                "duration": 0.002070784001261927,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownDim",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000615281009231694,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012843730000895448,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnknownDim>\n"
            },
            "teardown": {
                "duration": 0.0025754939997568727,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005810420116176829,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011801054002717137,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnknownShape>\n"
            },
            "teardown": {
                "duration": 0.001856602990301326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003897099959431216,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003555799921741709,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015813939971849322,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignDifferentShapesAllowed",
            "lineno": 143,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007265960011864081,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04365279999910854,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAssignDifferentShapesAllowed>\n***VAR /device:GPU:0\n***VAR /job:localhost/replica:0/task:0/device:GPU:0\n"
            },
            "teardown": {
                "duration": 0.0018146399961551651,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignments",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042213899723719805,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04243603700888343,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAssignments>\n"
            },
            "teardown": {
                "duration": 0.0016515769966645166,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitialization",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00037290999898687005,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040853700193110853,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testInitialization>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.002292115008458495,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializationOrder",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036753600579686463,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044628600880969316,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testInitializationOrder>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0013362189929466695,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializerFunction",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003681299858726561,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045009198947809637,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testInitializerFunction>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.001510324000264518,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testLoad",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036984498728998005,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02613879699492827,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLoad>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py:360: Variable.load (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\nInstructions for updating:\nPrefer Variable.assign which has equivalent behavior in 2.X.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py:360: Variable.load (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\nInstructions for updating:\nPrefer Variable.assign which has equivalent behavior in 2.X.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999264.9592927,
                        "msecs": 959.0,
                        "relativeCreated": 197831.16817474365,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0015896380064077675,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testNoRefDataRace",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003756680089281872,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037716299993917346,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testNoRefDataRace>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0013712969957850873,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testOperators",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003464699984760955,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2155965970014222,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOperators>\n",
                "stderr": "2023-05-13 17:34:25.029284: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  Variable_1/Initializer/initial_value (Const) \n  Variable_1 (VarHandleOp) /device:GPU:0\n  Variable_1/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  Variable_1/Assign (AssignVariableOp) /device:GPU:0\n  Variable_1/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n  ReadVariableOp_18 (ReadVariableOp) \n  ReadVariableOp_19 (ReadVariableOp) \n\n"
            },
            "teardown": {
                "duration": 0.0023237580026034266,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testResourceAssignments",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048663699999451637,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04322346700064372,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testResourceAssignments>\n"
            },
            "teardown": {
                "duration": 0.0019555229955585673,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testSession",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000496174005093053,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021952323004370555,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSession>\n",
                "stderr": "2023-05-13 17:34:25.252053: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  Variable/Initializer/initial_value (Const) \n  Variable (VarHandleOp) /device:GPU:0\n  Variable/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  Variable/Assign (AssignVariableOp) /device:GPU:0\n  Variable/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n\n"
            },
            "teardown": {
                "duration": 0.0015983609919203445,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testUseVariableAsTensor",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003810599882854149,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03740165899216663,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUseVariableAsTensor>\n"
            },
            "teardown": {
                "duration": 0.0016583039978286251,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testZeroSizeVarSameAsConst",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004477949987631291,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029633869999088347,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroSizeVarSameAsConst>\n"
            },
            "teardown": {
                "duration": 0.0015315740020014346,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004207250021863729,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004188900056760758,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0022370090009644628,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::testAssertVariablesInitialized",
            "lineno": 366,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004745839978568256,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05196738500671927,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAssertVariablesInitialized>\n",
                "stderr": "2023-05-13 17:34:25.373772: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  v/Initializer/initial_value (Const) \n  v (VarHandleOp) /device:GPU:0\n  v/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  v/Assign (AssignVariableOp) /device:GPU:0\n  v/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n  report_uninitialized_variables/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n\n2023-05-13 17:34:25.373837: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  w/Initializer/initial_value (Const) \n  w (VarHandleOp) /device:GPU:0\n  w/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  w/Assign (AssignVariableOp) /device:GPU:0\n  w/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n  report_uninitialized_variables/VarIsInitializedOp_1 (VarIsInitializedOp) /device:GPU:0\n\n2023-05-13 17:34:25.384425: W tensorflow/c/c_api.cc:291] Operation '{name:'w/Assign' id:10 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node w/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_INT32, validate_shape=false, _device=\"/device:GPU:0\"](w, w/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0016535040049348027,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039736999315209687,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039371800085064024,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014411709998967126,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testPartitionedVariableAssignments",
            "lineno": 414,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046922000183258206,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00031723799475003034,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testPartitionedVariableAssignments>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py', 415, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0020278750016586855,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testVariables",
            "lineno": 399,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036098199780099094,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002999239950440824,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testVariables>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py', 400, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0015476690023206174,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003542019985616207,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00031118000333663076,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0014745270018465817,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random0",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005982379952911288,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2152605580049567,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random0>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0034290019975742325,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random1",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000443488999735564,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024228089998359792,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random1>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0023101030092220753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random10",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004116180061828345,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003829339984804392,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random10>\n"
            },
            "teardown": {
                "duration": 0.0014768019900657237,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random11",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004271079960744828,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004082789964741096,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random11>\n"
            },
            "teardown": {
                "duration": 0.001563369994983077,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random12",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003685870033223182,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00035786999796982855,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random12>\n"
            },
            "teardown": {
                "duration": 0.0016883419884834439,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random13",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003978360036853701,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00033780900412239134,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random13>\n"
            },
            "teardown": {
                "duration": 0.0013870849943486974,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random14",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036534800892695785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037302199052646756,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random14>\n"
            },
            "teardown": {
                "duration": 0.0014239529991755262,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random15",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004539600049611181,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003521000035107136,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random15>\n"
            },
            "teardown": {
                "duration": 0.00134768700809218,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random16",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036262399225961417,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003725760034285486,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random16>\n"
            },
            "teardown": {
                "duration": 0.0017205559997819364,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random17",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038762600161135197,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000349812995409593,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random17>\n"
            },
            "teardown": {
                "duration": 0.001363025003229268,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random18",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004176520014880225,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041183200664818287,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random18>\n"
            },
            "teardown": {
                "duration": 0.0015812640049261972,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random19",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003746559959836304,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00036488000478129834,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random19>\n"
            },
            "teardown": {
                "duration": 0.001371064005070366,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random2",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003611230058595538,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02516901599301491,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random2>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002346949011553079,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random20",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037096899177413434,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0440423429972725,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random20>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0026259700098307803,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random21",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037723999412264675,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04236748701077886,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random21>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002357186996960081,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random22",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039427100273314863,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04090715400525369,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random22>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0025428420049138367,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random23",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003783659922191873,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03846913200686686,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random23>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0024229400005424395,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random24",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003983400092693046,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03903436500695534,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random24>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0024634739966131747,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random25",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003956930013373494,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03873697100789286,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random25>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0024647679965710267,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random26",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003761600091820583,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04172789900621865,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random26>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002880902000470087,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random27",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004248000041116029,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.042151101006311364,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random27>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003194971999619156,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random28",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005097899993415922,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0437335879978491,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random28>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002887804002966732,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random29",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004759459989145398,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.043718312997953035,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random29>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0028170989971840754,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random3",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004453330038813874,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02513071800058242,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random3>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002324617002159357,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random30",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043771199125330895,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.050439453989383765,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random30>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0031958249892340973,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random31",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004745820042444393,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04968863000976853,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random31>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003159270010655746,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random32",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045193798723630607,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04771666800661478,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random32>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0029790580010740086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random33",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004227269964758307,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04667930900177453,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random33>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003042876996914856,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random34",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004871639976045117,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04868818700197153,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random34>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002604623994557187,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random35",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041884600068442523,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0475123700016411,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random35>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002937475001090206,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random36",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005036369984736666,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04838833199755754,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random36>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0027636739978333935,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random37",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039953998930286616,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04752247799478937,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random37>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003672812003060244,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random38",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043718499364331365,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04807275799976196,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random38>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0026658920105546713,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random39",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004391490074340254,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04677462899417151,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random39>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002778400987153873,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random4",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041547100408934057,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024145435003447346,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random4>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0021553179976763204,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random40",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004037260077893734,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03873650899913628,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random40>\n***idct\n"
            },
            "teardown": {
                "duration": 0.00237794998975005,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random41",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003792909992625937,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03894744299759623,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random41>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002581936991191469,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random42",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004401199985295534,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03959098699851893,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random42>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003117536994977854,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random43",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004283620073692873,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04024940900853835,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random43>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0026687530044000596,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random44",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004177630034973845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04023736600356642,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random44>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002748676997725852,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random45",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040058699960354716,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04143650199694093,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random45>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0027586149954004213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random46",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003883379977196455,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04000429199368227,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random46>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0028282389976084232,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random47",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004467510007089004,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03925593200256117,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random47>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002514553998480551,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random48",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039627699879929423,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.040152547997422516,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random48>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002646592998644337,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random49",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038938099169172347,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.040684483989025466,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random49>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0027851109916809946,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random5",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004425649967743084,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024860397999873385,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random5>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0023833269951865077,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random50",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004408509994391352,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04615874600131065,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random50>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002842941990820691,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random51",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004575159982778132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.048892770006204955,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random51>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003434774000197649,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random52",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046412200026679784,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04814616900694091,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random52>\n***idct\n"
            },
            "teardown": {
                "duration": 0.003026863996637985,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random53",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004427839885465801,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04755965599906631,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random53>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002833799007930793,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random54",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045747400145046413,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04777824299526401,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random54>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0027630929980659857,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random55",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004417610034579411,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04726891600876115,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random55>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002917814999818802,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random56",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038389500696212053,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.047587547000148334,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random56>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002840793997165747,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random57",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003922179894289002,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.046084731991868466,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random57>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0026998240064131096,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random58",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045521301217377186,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.046654243997181766,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random58>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002880821004509926,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random59",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039770199509803206,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.046874171996023506,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random59>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0026857310003833845,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random6",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003812520008068532,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025108543995884247,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random6>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0023677249992033467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random60",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003769509930862114,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04035689399461262,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random60>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0023555389925604686,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random61",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048186100320890546,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.039921785006299615,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random61>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002453010994940996,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random62",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005645080091198906,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04069275000074413,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random62>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0023314450081670657,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random63",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047178901149891317,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04205465399718378,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random63>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002438663999782875,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random64",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005617179995169863,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04078926499641966,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random64>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0024191200063796714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random65",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005913919885642827,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04116736800642684,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random65>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002586110000265762,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random66",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004975150077370927,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04182215599576011,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random66>\n***idct\n"
            },
            "teardown": {
                "duration": 0.00246636699012015,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random67",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005028790037613362,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04060023800411727,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random67>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0024527819914510474,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random68",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004991749883629382,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04078196299087722,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random68>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002659504010807723,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random69",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000514259998453781,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04131110598973464,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random69>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002894356002798304,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random7",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005426290008472279,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024997168002300896,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random7>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0022422360052587464,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random70",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039813500188756734,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.041773396005737595,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random70>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0032500390079803765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random71",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005573879898292944,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0434460419928655,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random71>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0030603460036218166,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random72",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005252390110399574,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04146285400202032,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random72>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002623014006530866,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random73",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005363749951357022,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.041555112999049015,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random73>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0028532899887068197,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random74",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005211659881751984,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04220157700183336,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random74>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002691802990739234,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random75",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005475420039147139,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04134612999041565,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random75>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0026793249999172986,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random76",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005166379996808246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.041760296997381374,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random76>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0025911879929481074,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random77",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005579010030487552,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04199988099571783,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random77>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002440689000650309,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random78",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048789099673740566,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04233658300654497,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random78>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0027363750123186037,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random79",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005005049897590652,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.042860853995080106,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random79>\n***idct\n"
            },
            "teardown": {
                "duration": 0.0025443190097576007,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random8",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005434129998320714,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0257906969927717,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random8>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002341365994652733,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random9",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004266559990355745,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02568942098878324,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_random9>\n***idct\n"
            },
            "teardown": {
                "duration": 0.002807926997775212,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005889369931537658,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005798330093966797,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.003781071995035745,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA0",
            "lineno": 75,
            "outcome": "passed",
            "setup": {
                "duration": 0.000642756000161171,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4384078830044018,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLargeXSmallA0>\n"
            },
            "teardown": {
                "duration": 0.0027739729994209483,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA1",
            "lineno": 75,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047424499643966556,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.41408094100188464,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLargeXSmallA1>\n"
            },
            "teardown": {
                "duration": 0.0025817889982135966,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues0",
            "lineno": 86,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044834500295110047,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01097220799420029,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmallValues0>\n"
            },
            "teardown": {
                "duration": 0.0019402549951337278,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues1",
            "lineno": 86,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040180400537792593,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010953778008115478,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmallValues1>\n"
            },
            "teardown": {
                "duration": 0.0019099810015177354,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00038697100535500795,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004183349956292659,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001503644001786597,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005770370044047013,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003797020035563037,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001454956000088714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_difference_multirow_2d",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003347449965076521,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9775712570117321,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_set_difference_multirow_2d>\n"
            },
            "teardown": {
                "duration": 0.0022607370046898723,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005204390035942197,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6490567500004545,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_set_intersection_3d>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: sparse_to_dense (from tensorflow.python.ops.sparse_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nCreate a `tf.sparse.SparseTensor` and use `tf.sparse.to_dense` instead.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: sparse_to_dense (from tensorflow.python.ops.sparse_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nCreate a `tf.sparse.SparseTensor` and use `tf.sparse.to_dense` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999270.6714878,
                        "msecs": 671.0,
                        "relativeCreated": 203543.3633327484,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.002825221003149636,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d_invalid_indices",
            "lineno": 91,
            "outcome": "failed",
            "setup": {
                "duration": 0.00048338000488001853,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004436438990524039,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/intersection_test.py",
                    "lineno": 179,
                    "message": "AssertionError: \"out of order\" does not match \"Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:SparseToSparseSetOperation]\""
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/intersection_test.py",
                        "lineno": 94,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/intersection_test.py",
                        "lineno": 179,
                        "message": "in _test_set_intersection_3d"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_set_intersection_3d_invalid_indices>\n",
                "longrepr": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:SparseToSparseSetOperation]\n\nDuring handling of the above exception, another exception occurred:\n\nself = <src.tensorflow_tests_reduced.intersection_test.SetOpsTest testMethod=test_set_intersection_3d_invalid_indices>\n\n    def test_set_intersection_3d_invalid_indices(self):\n        for dtype in _DTYPES:\n>           self._test_set_intersection_3d(dtype=dtype, invalid_indices=True)\n\nsrc/tensorflow_tests_reduced/intersection_test.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/intersection_test.py:179: in _test_set_intersection_3d\n    with self.assertRaisesRegex(errors_impl.OpError, \"out of order\"):\nE   AssertionError: \"out of order\" does not match \"Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:SparseToSparseSetOperation]\""
            },
            "teardown": {
                "duration": 0.0019214000058127567,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_size_2d",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044743900070898235,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.25171837299421895,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_set_size_2d>\n"
            },
            "teardown": {
                "duration": 0.0017827480041887611,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::testIsVariableInitialized",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007723870076006278,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04095430999586824,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIsVariableInitialized>\n"
            },
            "teardown": {
                "duration": 0.0016615929926047102,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046157100587151945,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004198070091661066,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00157168299483601,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testFSPath",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006969690002733842,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08269067900255322,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFSPath>\n"
            },
            "teardown": {
                "duration": 0.0015122300101211295,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testGetAllVariables",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004389590030768886,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0793943189928541,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGetAllVariables>\n"
            },
            "teardown": {
                "duration": 0.0015820590051589534,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046615400060545653,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042831299651879817,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016818930016597733,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::testLaplaceLogSurvivalFunction",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006862679874757305,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04652255000837613,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLaplaceLogSurvivalFunction>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/log_survival_function_test.py:55: Laplace.__init__ (from tensorflow.python.ops.distributions.laplace) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/log_survival_function_test.py:55: Laplace.__init__ (from tensorflow.python.ops.distributions.laplace) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999271.7895713,
                        "msecs": 789.0,
                        "relativeCreated": 204661.44680976868,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.001999825006350875,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004691050125984475,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048180400335695595,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015391600027214736,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006345309957396239,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043608900159597397,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testMapStructure_test_mode_eager_tfapiversion_1>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.001477035999414511,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003940269962185994,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002853978003258817,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMapStructure_test_mode_eager_tfapiversion_2>\n"
            },
            "teardown": {
                "duration": 0.0015339919918915257,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003640450013335794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003929270023945719,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testMapStructure_test_mode_graph_tfapiversion_1>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0013537120103137568,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000345965992892161,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001178705002530478,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMapStructure_test_mode_graph_tfapiversion_2>\n"
            },
            "teardown": {
                "duration": 0.0014013239997439086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000369525994756259,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00035063200630247593,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0020747469970956445,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::testMapStructureUpTo",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005816429911646992,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0022224470012588426,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMapStructureUpTo>\n"
            },
            "teardown": {
                "duration": 0.0013582989922724664,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00042977300472557545,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00036835300852544606,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016421840118709952,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_numpy_arguments",
            "lineno": 31,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006604039954254404,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02077806201123167,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_numpy_arguments>\n"
            },
            "teardown": {
                "duration": 0.0016117220075102523,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003926210047211498,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00034606701228767633,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015207579999696463,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateful",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003490730014164001,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08140682200610172,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_stateful>\n"
            },
            "teardown": {
                "duration": 0.0017600319988559932,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateless",
            "lineno": 43,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004172580083832145,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07993312500184402,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_stateless>\n"
            },
            "teardown": {
                "duration": 0.0018547139916336164,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::testParamShapes",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006794479995733127,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07105682700057514,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testParamShapes>\n"
            },
            "teardown": {
                "duration": 0.00234967700089328,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004983279941370711,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005352879961719736,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.0015643599908798933,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_hash_bucket",
            "lineno": 37,
            "outcome": "failed",
            "setup": {
                "duration": 0.000739258000976406,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0055297590006375685,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ParseSequenceExampleV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 39,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 80,
                        "message": "in _test_parsed_sequence_example"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 795,
                        "message": "in parse_single_sequence_example"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 838,
                        "message": "in _parse_single_sequence_example_raw"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 622,
                        "message": "in _parse_sequence_example_raw"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1345,
                        "message": "in parse_sequence_example_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1603,
                        "message": "in parse_sequence_example_v2_eager_fallback"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_seq_ex_in_sequence_categorical_column_with_hash_bucket>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.parse_single_sequence_example_test.SequenceExampleParsingTest testMethod=test_seq_ex_in_sequence_categorical_column_with_hash_bucket>\n\n    def test_seq_ex_in_sequence_categorical_column_with_hash_bucket(self):\n>     self._test_parsed_sequence_example(\n          'bytes_list', sfc.sequence_categorical_column_with_hash_bucket,\n          10, [3, 4], [compat.as_bytes(x) for x in 'acg'])\n\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:80: in _test_parsed_sequence_example\n    context, seq_features = parsing_ops.parse_single_sequence_example(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py:795: in parse_single_sequence_example\n    _parse_single_sequence_example_raw(serialized, context_params,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py:838: in _parse_single_sequence_example_raw\n    return _parse_sequence_example_raw(serialized, debug_name, context,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py:622: in _parse_sequence_example_raw\n    outputs = gen_parsing_ops.parse_sequence_example_v2(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py:1345: in parse_sequence_example_v2\n    return parse_sequence_example_v2_eager_fallback(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py:1603: in parse_sequence_example_v2_eager_fallback\n    _result = _execute.execute(b\"ParseSequenceExampleV2\", Ncontext_sparse +\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'ParseSequenceExampleV2', num_outputs = 7\ninputs = [<tf.Tensor: shape=(), dtype=string, numpy=b'\\n)\\n\\x15\\n\\tfloat_ctx\\x12\\x08\\x12\\x06\\n\\x0433\\xf7B\\n\\x10\\n\\x07int_ctx\\x1...numpy=array([], dtype=object)>, <tf.Tensor: shape=(1,), dtype=string, numpy=array([b'bytes_list'], dtype=object)>, ...]\nattrs = ('Ncontext_sparse', 1, 'Tcontext_dense', [1], 'context_sparse_types', [9], ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f6afb36b670>\nname = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ParseSequenceExampleV2]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0021178640017751604,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_identity",
            "lineno": 32,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004997870128136128,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006128587003331631,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ParseSequenceExampleV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 34,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 80,
                        "message": "in _test_parsed_sequence_example"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 795,
                        "message": "in parse_single_sequence_example"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 838,
                        "message": "in _parse_single_sequence_example_raw"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 622,
                        "message": "in _parse_sequence_example_raw"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1345,
                        "message": "in parse_sequence_example_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1603,
                        "message": "in parse_sequence_example_v2_eager_fallback"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_seq_ex_in_sequence_categorical_column_with_identity>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.parse_single_sequence_example_test.SequenceExampleParsingTest testMethod=test_seq_ex_in_sequence_categorical_column_with_identity>\n\n    def test_seq_ex_in_sequence_categorical_column_with_identity(self):\n>     self._test_parsed_sequence_example(\n          'int_list', sfc.sequence_categorical_column_with_identity,\n          10, [3, 6], [2, 4, 6])\n\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:80: in _test_parsed_sequence_example\n    context, seq_features = parsing_ops.parse_single_sequence_example(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py:795: in parse_single_sequence_example\n    _parse_single_sequence_example_raw(serialized, context_params,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py:838: in _parse_single_sequence_example_raw\n    return _parse_sequence_example_raw(serialized, debug_name, context,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py:622: in _parse_sequence_example_raw\n    outputs = gen_parsing_ops.parse_sequence_example_v2(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py:1345: in parse_sequence_example_v2\n    return parse_sequence_example_v2_eager_fallback(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py:1603: in parse_sequence_example_v2_eager_fallback\n    _result = _execute.execute(b\"ParseSequenceExampleV2\", Ncontext_sparse +\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'ParseSequenceExampleV2', num_outputs = 7\ninputs = [<tf.Tensor: shape=(), dtype=string, numpy=b'\\n)\\n\\x15\\n\\tfloat_ctx\\x12\\x08\\x12\\x06\\n\\x0433\\xf7B\\n\\x10\\n\\x07int_ctx\\x1..., numpy=array([], dtype=object)>, <tf.Tensor: shape=(1,), dtype=string, numpy=array([b'int_list'], dtype=object)>, ...]\nattrs = ('Ncontext_sparse', 1, 'Tcontext_dense', [1], 'context_sparse_types', [9], ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f6afb36b670>\nname = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ParseSequenceExampleV2]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002449477993650362,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_file",
            "lineno": 48,
            "outcome": "failed",
            "setup": {
                "duration": 0.00048383699322585016,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006702539001707919,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ParseSequenceExampleV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 53,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 80,
                        "message": "in _test_parsed_sequence_example"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 795,
                        "message": "in parse_single_sequence_example"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 838,
                        "message": "in _parse_single_sequence_example_raw"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 622,
                        "message": "in _parse_sequence_example_raw"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1345,
                        "message": "in parse_sequence_example_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1603,
                        "message": "in parse_sequence_example_v2_eager_fallback"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_seq_ex_in_sequence_categorical_column_with_vocabulary_file>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.parse_single_sequence_example_test.SequenceExampleParsingTest testMethod=test_seq_ex_in_sequence_categorical_column_with_vocabulary_file>\n\n    def test_seq_ex_in_sequence_categorical_column_with_vocabulary_file(self):\n      _, fname = tempfile.mkstemp()\n      with open(fname, 'w') as f:\n        f.write(string.ascii_lowercase)\n>     self._test_parsed_sequence_example(\n          'bytes_list', sfc.sequence_categorical_column_with_vocabulary_file,\n          fname, [3, 4], [compat.as_bytes(x) for x in 'acg'])\n\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:80: in _test_parsed_sequence_example\n    context, seq_features = parsing_ops.parse_single_sequence_example(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py:795: in parse_single_sequence_example\n    _parse_single_sequence_example_raw(serialized, context_params,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py:838: in _parse_single_sequence_example_raw\n    return _parse_sequence_example_raw(serialized, debug_name, context,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py:622: in _parse_sequence_example_raw\n    outputs = gen_parsing_ops.parse_sequence_example_v2(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py:1345: in parse_sequence_example_v2\n    return parse_sequence_example_v2_eager_fallback(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py:1603: in parse_sequence_example_v2_eager_fallback\n    _result = _execute.execute(b\"ParseSequenceExampleV2\", Ncontext_sparse +\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'ParseSequenceExampleV2', num_outputs = 7\ninputs = [<tf.Tensor: shape=(), dtype=string, numpy=b'\\n)\\n\\x15\\n\\tfloat_ctx\\x12\\x08\\x12\\x06\\n\\x0433\\xf7B\\n\\x10\\n\\x07int_ctx\\x1...numpy=array([], dtype=object)>, <tf.Tensor: shape=(1,), dtype=string, numpy=array([b'bytes_list'], dtype=object)>, ...]\nattrs = ('Ncontext_sparse', 1, 'Tcontext_dense', [1], 'context_sparse_types', [9], ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f6afb36b670>\nname = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ParseSequenceExampleV2]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024012320063775405,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_list",
            "lineno": 42,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004534109903033823,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0061742359976051375,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ParseSequenceExampleV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 44,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 80,
                        "message": "in _test_parsed_sequence_example"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 795,
                        "message": "in parse_single_sequence_example"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 838,
                        "message": "in _parse_single_sequence_example_raw"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 622,
                        "message": "in _parse_sequence_example_raw"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1345,
                        "message": "in parse_sequence_example_v2"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1603,
                        "message": "in parse_sequence_example_v2_eager_fallback"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_seq_ex_in_sequence_categorical_column_with_vocabulary_list>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.parse_single_sequence_example_test.SequenceExampleParsingTest testMethod=test_seq_ex_in_sequence_categorical_column_with_vocabulary_list>\n\n    def test_seq_ex_in_sequence_categorical_column_with_vocabulary_list(self):\n>     self._test_parsed_sequence_example(\n          'bytes_list', sfc.sequence_categorical_column_with_vocabulary_list,\n          list(string.ascii_lowercase), [3, 4],\n          [compat.as_bytes(x) for x in 'acg'])\n\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:80: in _test_parsed_sequence_example\n    context, seq_features = parsing_ops.parse_single_sequence_example(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py:795: in parse_single_sequence_example\n    _parse_single_sequence_example_raw(serialized, context_params,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py:838: in _parse_single_sequence_example_raw\n    return _parse_sequence_example_raw(serialized, debug_name, context,\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/parsing_ops.py:622: in _parse_sequence_example_raw\n    outputs = gen_parsing_ops.parse_sequence_example_v2(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py:1345: in parse_sequence_example_v2\n    return parse_sequence_example_v2_eager_fallback(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_parsing_ops.py:1603: in parse_sequence_example_v2_eager_fallback\n    _result = _execute.execute(b\"ParseSequenceExampleV2\", Ncontext_sparse +\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'ParseSequenceExampleV2', num_outputs = 7\ninputs = [<tf.Tensor: shape=(), dtype=string, numpy=b'\\n)\\n\\x10\\n\\x07int_ctx\\x12\\x05\\x1a\\x03\\n\\x01\\x05\\n\\x15\\n\\tfloat_ctx\\x12\\x...numpy=array([], dtype=object)>, <tf.Tensor: shape=(1,), dtype=string, numpy=array([b'bytes_list'], dtype=object)>, ...]\nattrs = ('Ncontext_sparse', 1, 'Tcontext_dense', [1], 'context_sparse_types', [9], ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f6afb36b670>\nname = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ParseSequenceExampleV2]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0022315459937090054,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00042002799455076456,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040657799399923533,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017780909984139726,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006538999878102913,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048228200466837734,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015630050038453192,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder0",
            "lineno": 208,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038170500192791224,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08449565900082234,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_placeholder0>\n"
            },
            "teardown": {
                "duration": 0.002269964010338299,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder1",
            "lineno": 208,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005059499962953851,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07877235701016616,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_placeholder1>\n"
            },
            "teardown": {
                "duration": 0.0023384109954349697,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder2",
            "lineno": 208,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005036009970353916,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08508429799985606,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_placeholder2>\n"
            },
            "teardown": {
                "duration": 0.002703624006244354,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006627499969908968,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044246700417716056,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017392810113960877,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_multiple_prints",
            "lineno": 85,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006317799998214468,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07141924600000493,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/reference_test_base.py",
                    "lineno": 122,
                    "message": "AssertionError: Native and compiled functions are not equivalent.\n\nNative results: None\nCompiled results: None\nNative out: None\nCompiled out: \nNative error: InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:StringFormat]\nCompiled error: NoneType: None\nNative call: multiple_prints(1, 2)\nCheck the logs for the generated code."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/print_test.py",
                        "lineno": 87,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/reference_test_base.py",
                        "lineno": 169,
                        "message": "in assertFunctionMatchesEager"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/reference_test_base.py",
                        "lineno": 122,
                        "message": "in assertResultsMatch"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_multiple_prints>\n/device:CPU:0\nsave/SaveV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/SaveV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/tensor_names: (Const): /job:localhost/replica:0/task:0/device:CPU:0\nsave/RestoreV2/shape_and_slices: (Const): /job:localhost/replica:0/task:0/device:CPU:0\n*** Capturing exception:\nTraceback (most recent call last):\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/reference_test_base.py\", line 60, in _run_with_output_capture\n    results = func()\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/reference_test_base.py\", line 86, in <lambda>\n    return self._run_with_output_capture(lambda: f(*args))\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/print_test.py\", line 47, in multiple_prints\n    tf.print('x is', x)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/logging_ops.py\", line 384, in print_v2\n    formatted_string = string_ops.string_format(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/string_ops.py\", line 169, in string_format\n    return gen_string_ops.string_format(inputs,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 785, in string_format\n    _ops.raise_from_not_ok_status(e, name)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 7215, in raise_from_not_ok_status\n    raise core._status_to_exception(e) from None  # pylint: disable=protected-access\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:StringFormat]\n\n\n",
                "stderr": "x is 1\ny is 2\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.print_test.ReferenceTest testMethod=test_multiple_prints>\n\n    def test_multiple_prints(self):\n>       self.assertFunctionMatchesEager(multiple_prints, 1, 2)\n\nsrc/tensorflow_tests_reduced/print_test.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/reference_test_base.py:169: in assertFunctionMatchesEager\n    self.assertResultsMatch(f, args, native_data, compiled_data)\nsrc/tensorflow_tests_reduced/reference_test_base.py:122: in assertResultsMatch\n    self.fail('Native and compiled functions are not equivalent.\\n\\n'\nE   AssertionError: Native and compiled functions are not equivalent.\nE   \nE   Native results: None\nE   Compiled results: None\nE   Native out: None\nE   Compiled out: \nE   Native error: InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:StringFormat]\nE   Compiled error: NoneType: None\nE   Native call: multiple_prints(1, 2)\nE   Check the logs for the generated code."
            },
            "teardown": {
                "duration": 0.0016142300009960309,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00042559999565128237,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004010720003861934,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014398670027730986,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_tf_print",
            "lineno": 95,
            "outcome": "failed",
            "setup": {
                "duration": 0.00037748899194411933,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029050784010905772,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/reference_test_base.py",
                    "lineno": 122,
                    "message": "AssertionError: Native and compiled functions are not equivalent.\n\nNative results: None\nCompiled results: None\nNative out: None\nCompiled out: \nNative error: InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:StringFormat]\nCompiled error: NoneType: None\nNative call: tf_print(0)\nCheck the logs for the generated code."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/print_test.py",
                        "lineno": 97,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/reference_test_base.py",
                        "lineno": 169,
                        "message": "in assertFunctionMatchesEager"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/reference_test_base.py",
                        "lineno": 122,
                        "message": "in assertResultsMatch"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_tf_print>\n*** Capturing exception:\nTraceback (most recent call last):\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/reference_test_base.py\", line 60, in _run_with_output_capture\n    results = func()\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/reference_test_base.py\", line 86, in <lambda>\n    return self._run_with_output_capture(lambda: f(*args))\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/print_test.py\", line 67, in tf_print\n    tf.print(x)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/logging_ops.py\", line 384, in print_v2\n    formatted_string = string_ops.string_format(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/string_ops.py\", line 169, in string_format\n    return gen_string_ops.string_format(inputs,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_string_ops.py\", line 785, in string_format\n    _ops.raise_from_not_ok_status(e, name)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 7215, in raise_from_not_ok_status\n    raise core._status_to_exception(e) from None  # pylint: disable=protected-access\ntensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:StringFormat]\n\n\n",
                "stderr": "0\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.print_test.ReferenceTest testMethod=test_tf_print>\n\n    def test_tf_print(self):\n>       self.assertFunctionMatchesEager(tf_print, 0)\n\nsrc/tensorflow_tests_reduced/print_test.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/reference_test_base.py:169: in assertFunctionMatchesEager\n    self.assertResultsMatch(f, args, native_data, compiled_data)\nsrc/tensorflow_tests_reduced/reference_test_base.py:122: in assertResultsMatch\n    self.fail('Native and compiled functions are not equivalent.\\n\\n'\nE   AssertionError: Native and compiled functions are not equivalent.\nE   \nE   Native results: None\nE   Compiled results: None\nE   Native out: None\nE   Compiled out: \nE   Native error: InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:StringFormat]\nE   Compiled error: NoneType: None\nE   Native call: tf_print(0)\nE   Check the logs for the generated code."
            },
            "teardown": {
                "duration": 0.0018269859865540639,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testBasic",
            "lineno": 41,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00068025900691282,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042422598926350474,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBasic>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 42, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0019378480064915493,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testExceptionsCaptured",
            "lineno": 90,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004972640017513186,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004003209905931726,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testExceptionsCaptured>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 91, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0017681000026641414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testGracePeriod",
            "lineno": 182,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000552313998923637,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003185729874530807,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testGracePeriod>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 183, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.001855273003457114,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testIgnoreMultiStarts",
            "lineno": 220,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000399737007683143,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00025956600438803434,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testIgnoreMultiStarts>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 221, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0016278969997074455,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testMultipleSessions",
            "lineno": 202,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00038409199623856694,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00027186099032405764,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testMultipleSessions>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 203, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0013989170111017302,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testName",
            "lineno": 269,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035603799915406853,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00026450000586919487,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testName>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 270, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0018234650051454082,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testQueueRunnerSerializationRoundTrip",
            "lineno": 358,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003986829979112372,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00027069800125900656,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testQueueRunnerSerializationRoundTrip>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 359, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0013829469971824437,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRealDequeueEnqueue",
            "lineno": 109,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004254770028637722,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003079879970755428,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRealDequeueEnqueue>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 110, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0014134040102362633,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRequestStopOnException",
            "lineno": 167,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034799800778273493,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028778800333384424,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRequestStopOnException>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 168, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0023890860029496253,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRespectCoordShouldStop",
            "lineno": 140,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000351476002833806,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002504150033928454,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRespectCoordShouldStop>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 141, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0013916379975853488,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunners",
            "lineno": 281,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000370829991879873,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003134340076940134,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testStartQueueRunners>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 282, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0015002500003902242,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersIgnoresMonitoredSession",
            "lineno": 318,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003613019944168627,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002540010027587414,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testStartQueueRunnersIgnoresMonitoredSession>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 319, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0017776049935491756,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersNonDefaultGraph",
            "lineno": 335,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00040294299833476543,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00027781100652646273,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testStartQueueRunnersNonDefaultGraph>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 336, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0015185439988272265,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersRaisesIfNotASession",
            "lineno": 302,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003625379904406145,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002547350013628602,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testStartQueueRunnersRaisesIfNotASession>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 303, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.001632113999221474,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testThreads",
            "lineno": 239,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039228999230545014,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002596650010673329,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testThreads>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 240, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0018583410128485411,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testTwoOps",
            "lineno": 64,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035111900069750845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002503380092093721,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testTwoOps>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 65, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0014010910090291873,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003553749993443489,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002766539982985705,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0017654839903116226,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_bfloat16",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005886980070499703,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008023200061870739,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnaryUfunc_bfloat16>\n"
            },
            "teardown": {
                "duration": 0.0014581470022676513,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_float8_e4m3b11",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034125799720641226,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007790320087224245,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnaryUfunc_float8_e4m3b11>\n"
            },
            "teardown": {
                "duration": 0.0018711650045588613,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testBasic",
            "lineno": 23,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005748489929828793,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00561405900225509,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic>\n"
            },
            "teardown": {
                "duration": 0.0016994680045172572,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testDType",
            "lineno": 78,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035505399864632636,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026126904995180666,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDType>\n"
            },
            "teardown": {
                "duration": 0.002131510991603136,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testEmpty",
            "lineno": 50,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036599299346562475,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002200696006184444,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmpty>\n"
            },
            "teardown": {
                "duration": 0.0017254849954042584,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testLimitOnly",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004136260104132816,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01891497999895364,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLimitOnly>\n"
            },
            "teardown": {
                "duration": 0.0019996589981019497,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testMixedDType",
            "lineno": 160,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005472499906318262,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006492903994512744,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMixedDType>\n"
            },
            "teardown": {
                "duration": 0.001922744995681569,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNegativeDelta",
            "lineno": 70,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004313929966883734,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007552178998594172,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNegativeDelta>\n"
            },
            "teardown": {
                "duration": 0.0018981730099767447,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNonInteger",
            "lineno": 54,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003586000093491748,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009438021996174939,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNonInteger>\n"
            },
            "teardown": {
                "duration": 0.002225496995379217,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00037888099905103445,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004033519944641739,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016121220105560496,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testEmitDifferentStructureThanCellOutput",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00060483199195005,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002934299991466105,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testEmitDifferentStructureThanCellOutput>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0016024109936552122,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopState",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035182799911126494,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002733950095716864,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testLoopState>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0018995040009031072,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopStateWithTensorArray",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00043097299931105226,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00027419699472375214,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testLoopStateWithTensorArray>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.001372697006445378,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNN",
            "lineno": 175,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034803099697455764,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00027275200409349054,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRawRNN>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/raw_rnn_test.py', 176, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0018078810098813847,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNScope",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004318529972806573,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00027833499189000577,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRawRNNScope>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0019813359976978973,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNZeroLength",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036222400376573205,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028872200346086174,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRawRNNZeroLength>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0014922479895176366,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041473399323876947,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00030835700454190373,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.0017953289934666827,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testInputOnGPUCellNotDeclared",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004693460068665445,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004198620008537546,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testInputOnGPUCellNotDeclared>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00174004198925104,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnCPU",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004175869980826974,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004283519956516102,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRNNOnCPUCellOnCPU>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.001904439995996654,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnGPU",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003864270111080259,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003869829961331561,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRNNOnCPUCellOnGPU>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0018703069945331663,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004337439895607531,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003675359912449494,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001588779006851837,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::testReduceLogSumExp",
            "lineno": 29,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008294099970953539,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08128759100509342,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReduceLogSumExp>\n"
            },
            "teardown": {
                "duration": 0.0030081220029387623,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005391349986894056,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004303500027162954,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016747870104154572,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testNegAxes",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007047910039545968,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010343600995838642,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNegAxes>\n"
            },
            "teardown": {
                "duration": 0.0015484500036109239,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testSimple",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003913370019290596,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009653551009250805,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSimple>\n"
            },
            "teardown": {
                "duration": 0.001395002007484436,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testZeros",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004091950104339048,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010160353995161131,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeros>\n"
            },
            "teardown": {
                "duration": 0.0015176570013863966,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003967440134147182,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003874569956678897,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0019614909979281947,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::testBasic",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043535701115615666,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011999355992884375,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic>\n"
            },
            "teardown": {
                "duration": 0.0015974120033206418,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003471119998721406,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00035948900040239096,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0013875529984943569,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::testBasic",
            "lineno": 114,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004661939892685041,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005694569990737364,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBasic>\n"
            },
            "teardown": {
                "duration": 0.004015943995909765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00043358800758142024,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003885949990944937,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0016119810024974868,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00040288298623636365,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000371825008187443,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014130110066616908,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testAxesType",
            "lineno": 443,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004762900061905384,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0021369599999161437,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Mean]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/reduce_mean_test.py",
                        "lineno": 450,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 2640,
                        "message": "in reduce_mean"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 6279,
                        "message": "in mean"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 6311,
                        "message": "in mean_eager_fallback"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testAxesType>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.reduce_mean_test.MeanReductionTest testMethod=testAxesType>\n\n    def testAxesType(self):\n      # for dtype in [dtypes.int64, dtypes.int32]:\n      dtype = dtypes.int64\n      with self.cached_session():\n        timer = tensorflow_op_timer()\n        with timer:\n>         v = math_ops.reduce_mean([0, 0], constant_op.constant(0, dtype=dtype))\n\nsrc/tensorflow_tests_reduced/reduce_mean_test.py:450: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/math_ops.py:2640: in reduce_mean\n    gen_math_ops.mean(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_math_ops.py:6279: in mean\n    return mean_eager_fallback(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_math_ops.py:6311: in mean_eager_fallback\n    _result = _execute.execute(b\"Mean\", 1, inputs=_inputs_flat, attrs=_attrs,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'Mean', num_outputs = 1\ninputs = [<tf.Tensor: shape=(2,), dtype=int32, numpy=array([0, 0], dtype=int32)>, <tf.Tensor: shape=(), dtype=int64, numpy=0>]\nattrs = ('keep_dims', False, 'T', 3, 'Tidx', 9)\nctx = <tensorflow.python.eager.context.Context object at 0x7f6afb36b670>\nname = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:Mean]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002676434989552945,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testComplex64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046382599975913763,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.8083393099950626,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testComplex64>\n"
            },
            "teardown": {
                "duration": 0.0031576740002492443,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testDegenerate",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004650570044759661,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02877018200524617,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDegenerate>\n"
            },
            "teardown": {
                "duration": 0.001542665995657444,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044081399391870946,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02593384099600371,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmptyGradients>\n"
            },
            "teardown": {
                "duration": 0.0016763530002208427,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000413597997976467,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.850951846994576,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat32>\n"
            },
            "teardown": {
                "duration": 0.0031146609981078655,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046630200813524425,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.897889715997735,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat64>\n"
            },
            "teardown": {
                "duration": 0.0032349610119126737,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005363160016713664,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.6585524309921311,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient>\n"
            },
            "teardown": {
                "duration": 0.0022170390002429485,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInfinity",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004653729993151501,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24388699200062547,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfinity>\n"
            },
            "teardown": {
                "duration": 0.0016804850019980222,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInt32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005188619979890063,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.8619238219980616,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt32>\n"
            },
            "teardown": {
                "duration": 0.003702822999912314,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt16",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004962509992765263,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10659733999636956,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSizeOverflowInt16>\n"
            },
            "teardown": {
                "duration": 0.0021774699998786673,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt8",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004564809933071956,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08874100400134921,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSizeOverflowInt8>\n"
            },
            "teardown": {
                "duration": 0.0016793039976619184,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint16",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046152700087986887,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.46790428599342704,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSizeOverflowUint16>\n"
            },
            "teardown": {
                "duration": 0.002547444004449062,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint8",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004511800070758909,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09064091500476934,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSizeOverflowUint8>\n"
            },
            "teardown": {
                "duration": 0.0017155160021502525,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testUint8",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004962659877492115,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.9158096720057074,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUint8>\n"
            },
            "teardown": {
                "duration": 0.004850735000218265,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006109520036261529,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005072030035080388,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002823415008606389,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testAxesType",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047371799882967025,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02210138899681624,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAxesType>\n"
            },
            "teardown": {
                "duration": 0.0018155479920096695,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testComplex64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004269760102033615,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.0195795749896206,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testComplex64>\n"
            },
            "teardown": {
                "duration": 0.003436800994677469,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005028029991080984,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.0661262089997763,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat32>\n"
            },
            "teardown": {
                "duration": 0.003950753991375677,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004894180019618943,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.9132860310055548,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat64>\n"
            },
            "teardown": {
                "duration": 0.003604069002903998,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004517820052569732,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.6441852569987532,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient>\n"
            },
            "teardown": {
                "duration": 0.0025786860060179606,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInfinity",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045672099804505706,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17715341699658893,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfinity>\n"
            },
            "teardown": {
                "duration": 0.0016884319920791313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInt32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047295399417635053,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.8547633819980547,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt32>\n"
            },
            "teardown": {
                "duration": 0.0035454680037219077,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testSingleton",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045054299698676914,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.049594548996537924,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSingleton>\n"
            },
            "teardown": {
                "duration": 0.0018653380102477968,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004508540005190298,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004227839963277802,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017727249942254275,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testAxesType",
            "lineno": 650,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005210179951973259,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005932820000452921,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAxesType>\n"
            },
            "teardown": {
                "duration": 0.0018808099994203076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testComplex64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003429609932936728,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.342900132003706,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testComplex64>\n"
            },
            "teardown": {
                "duration": 0.004764013006933965,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testDegenerate",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000932933995500207,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0365110600105254,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDegenerate>\n"
            },
            "teardown": {
                "duration": 0.0026383279910078272,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000740447998396121,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07956402200215962,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmptyGradients>\n"
            },
            "teardown": {
                "duration": 0.003104226998402737,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006398599944077432,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.5534105279948562,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat32>\n"
            },
            "teardown": {
                "duration": 0.003247222994104959,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045084100565873086,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.8459665970003698,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloat64>\n"
            },
            "teardown": {
                "duration": 0.00333590799709782,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testGradientWithZeros",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047819799510762095,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.208098317991244,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradientWithZeros>\n"
            },
            "teardown": {
                "duration": 0.0046014539984753355,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInfinity",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005678570014424622,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17243952400167473,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfinity>\n"
            },
            "teardown": {
                "duration": 0.002646819004439749,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004548169963527471,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8246858850034187,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt32>\n"
            },
            "teardown": {
                "duration": 0.005185255009564571,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006806839955970645,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.86287462200562,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt64>\n"
            },
            "teardown": {
                "duration": 0.0030643180070910603,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004669070040108636,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004272390069672838,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017515860090497881,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testAxesType",
            "lineno": 767,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004918630002066493,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006781932999729179,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAxesType>\n"
            },
            "teardown": {
                "duration": 0.002260093009681441,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testDoubleReduce3D",
            "lineno": 796,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003594430017983541,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021093065006425604,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDoubleReduce3D>\n"
            },
            "teardown": {
                "duration": 0.002291824988787994,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004087690031155944,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029146537010092288,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmptyGradients>\n"
            },
            "teardown": {
                "duration": 0.0025717430107761174,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testFloatReduce3D",
            "lineno": 782,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004597450024448335,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021564392998698168,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatReduce3D>\n"
            },
            "teardown": {
                "duration": 0.00259163900045678,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042585500341374427,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09811273499508388,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient>\n"
            },
            "teardown": {
                "duration": 0.0021357349905883893,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient2",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004572750040097162,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1047765240073204,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient2>\n"
            },
            "teardown": {
                "duration": 0.002203889991506003,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient3",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046558500616811216,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10076047599432059,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient3>\n"
            },
            "teardown": {
                "duration": 0.002461819996824488,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient4",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005007259896956384,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09015586900932249,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient4>\n"
            },
            "teardown": {
                "duration": 0.001779220998287201,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testSpecialValues",
            "lineno": 774,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045894501090515405,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4145062970055733,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSpecialValues>\n"
            },
            "teardown": {
                "duration": 0.0033061949943657964,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00047400301264133304,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042770699656102806,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002072208997560665,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testAxesType",
            "lineno": 884,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004412220005178824,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005758400991908275,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAxesType>\n"
            },
            "teardown": {
                "duration": 0.0019984539976576343,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testDoubleReduce3D",
            "lineno": 927,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004233750078128651,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02116938299150206,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDoubleReduce3D>\n"
            },
            "teardown": {
                "duration": 0.0023972439958015457,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040393800009042025,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0305036409990862,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmptyGradients>\n"
            },
            "teardown": {
                "duration": 0.0015082590107340366,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testFloatReduce3D",
            "lineno": 913,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041669899655971676,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021188086990150623,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatReduce3D>\n"
            },
            "teardown": {
                "duration": 0.0020251950045349076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000370888999896124,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09118024101189803,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient>\n"
            },
            "teardown": {
                "duration": 0.0021731890010414645,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient2",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043444300536066294,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1062469190073898,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient2>\n"
            },
            "teardown": {
                "duration": 0.0018498470017220825,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient3",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044130200694780797,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09835179698711727,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient3>\n"
            },
            "teardown": {
                "duration": 0.002578446001280099,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient4",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004298029962228611,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08944745500048157,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradient4>\n"
            },
            "teardown": {
                "duration": 0.0020278230076655746,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testInt64Reduce3D",
            "lineno": 899,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046818499686196446,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023787579993950203,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt64Reduce3D>\n"
            },
            "teardown": {
                "duration": 0.002402879996225238,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testSpecialValues",
            "lineno": 891,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004142480029258877,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.41753092998987995,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSpecialValues>\n"
            },
            "teardown": {
                "duration": 0.0034983680088771507,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000465442004497163,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042713900620583445,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.002009178002481349,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAll3D",
            "lineno": 1025,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004191089974483475,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.035517397001967765,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAll3D>\n"
            },
            "teardown": {
                "duration": 0.0029128970054443926,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAxesType",
            "lineno": 1017,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004649239999707788,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005447025992907584,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAxesType>\n"
            },
            "teardown": {
                "duration": 0.0019281140121165663,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testEmpty",
            "lineno": 1039,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036990999069530517,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007545254004071467,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmpty>\n"
            },
            "teardown": {
                "duration": 0.0020290360116632655,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00041108400910161436,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004566349962260574,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015102110046427697,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAll3D",
            "lineno": 1074,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044755000271834433,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03603524599748198,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAll3D>\n"
            },
            "teardown": {
                "duration": 0.00243890899582766,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAxesType",
            "lineno": 1066,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038789300015196204,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005305342987412587,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testAxesType>\n"
            },
            "teardown": {
                "duration": 0.0019211790058761835,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testEmpty",
            "lineno": 1088,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004121819947613403,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007378986003459431,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmpty>\n"
            },
            "teardown": {
                "duration": 0.002207496014307253,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036832300247624516,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037417600105982274,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015932359965518117,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testBoolReduce1D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038729599327780306,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1786787769960938,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBoolReduce1D>\n"
            },
            "teardown": {
                "duration": 0.0015915309923002496,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testDegenerate",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004905460082227364,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028961570002138615,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDegenerate>\n"
            },
            "teardown": {
                "duration": 0.0016026090015657246,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testExpand",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000445711993961595,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08774440598790534,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testExpand>\n"
            },
            "teardown": {
                "duration": 0.0018857760005630553,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce1D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046979699982330203,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08791667500918265,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatReduce1D>\n"
            },
            "teardown": {
                "duration": 0.00194522000674624,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce4D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004909900017082691,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6794846770062577,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatReduce4D>\n"
            },
            "teardown": {
                "duration": 0.002565130009315908,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce",
            "lineno": 1168,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045905300066806376,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008017411004402675,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStringReduce>\n"
            },
            "teardown": {
                "duration": 0.002941434009699151,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce1D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040439200529363006,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07057651800278109,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStringReduce1D>\n"
            },
            "teardown": {
                "duration": 0.0016001059993868694,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce2D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004445029917405918,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10319534699374344,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStringReduce2D>\n"
            },
            "teardown": {
                "duration": 0.0016718900005798787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045476599188987166,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004500259965425357,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0018524879997130483,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testBoolBasic",
            "lineno": 79,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006049930088920519,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009844437008723617,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBoolBasic>\n"
            },
            "teardown": {
                "duration": 0.002180914001655765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testComplex64Basic",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036177200672682375,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009198817002470605,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testComplex64Basic>\n"
            },
            "teardown": {
                "duration": 0.002080821999697946,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testDoubleBasic",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005415380001068115,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009084756005904637,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDoubleBasic>\n"
            },
            "teardown": {
                "duration": 0.001968391996342689,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testErrors",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003455620026215911,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0038236459949985147,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testErrors>\n"
            },
            "teardown": {
                "duration": 0.0013389179948717356,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatBasic",
            "lineno": 86,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003522019978845492,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008944947010604665,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatBasic>\n"
            },
            "teardown": {
                "duration": 0.0018481969891581684,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatEmpty",
            "lineno": 153,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034783499722834677,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021772797001176514,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatEmpty>\n"
            },
            "teardown": {
                "duration": 0.0020318169990787283,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeGradThreeDimensions",
            "lineno": 137,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003781139967031777,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08175381900218781,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatReshapeGradThreeDimensions>\n"
            },
            "teardown": {
                "duration": 0.0029734220006503165,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeThreeDimensions",
            "lineno": 106,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047987300786189735,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010102095009642653,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatReshapeThreeDimensions>\n"
            },
            "teardown": {
                "duration": 0.0022608659928664565,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimBegin",
            "lineno": 114,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004043179942527786,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009457132007810287,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatUnspecifiedDimBegin>\n"
            },
            "teardown": {
                "duration": 0.002280564993270673,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimEnd",
            "lineno": 118,
            "outcome": "passed",
            "setup": {
                "duration": 0.000384881001082249,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00924640400626231,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatUnspecifiedDimEnd>\n"
            },
            "teardown": {
                "duration": 0.0020557000098051503,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimOnly",
            "lineno": 110,
            "outcome": "passed",
            "setup": {
                "duration": 0.000362014994607307,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009051148997968994,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFloatUnspecifiedDimOnly>\n"
            },
            "teardown": {
                "duration": 0.002238650995423086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt32Basic",
            "lineno": 94,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039577699499204755,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007579591008834541,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt32Basic>\n"
            },
            "teardown": {
                "duration": 0.0020066500001121312,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt64Shape",
            "lineno": 250,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003696350031532347,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.301448915997753,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 1156,
                    "message": "numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.33 GiB for an array with shape (2500000000,) and data type bool"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/reshape_test.py",
                        "lineno": 256,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/contextlib.py",
                        "lineno": 142,
                        "message": "in __exit__"
                    },
                    {
                        "path": "src/utils/timer_wrapper.py",
                        "lineno": 100,
                        "message": "in tensorflow_op_timer"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1156,
                        "message": "MemoryError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testInt64Shape>\n",
                "stderr": "2023-05-13 17:35:19.265060: W tensorflow/tsl/framework/cpu_allocator_impl.cc:82] Allocation of 2500000000 exceeds 10% of free system memory.\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.reshape_test.ReshapeTest testMethod=testInt64Shape>\n\n    def testInt64Shape(self):\n      # with ops.device(\"/device:CPU:0\"):\n      x = array_ops.zeros([50000, 50000], dtype=dtypes.bool)\n      # Provide dimension larger than int32\n      timer = tensorflow_op_timer()\n>     with timer:\n\nsrc/tensorflow_tests_reduced/reshape_test.py:256: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/contextlib.py:142: in __exit__\n    next(self.gen)\nsrc/utils/timer_wrapper.py:100: in tensorflow_op_timer\n    result.numpy()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tf.Tensor: shape=(2500000000,), dtype=bool, numpy=array([False, False, False, ..., False, False, False])>\n\n    def numpy(self):\n      \"\"\"Copy of the contents of this Tensor into a NumPy array or scalar.\n    \n      Unlike NumPy arrays, Tensors are immutable, so this method has to copy\n      the contents to ensure safety. Use `memoryview` to get a readonly\n      view of the contents without doing a copy:\n    \n      >>> t = tf.constant([42])\n      >>> np.array(memoryview(t))\n      array([42], dtype=int32)\n    \n      Note that `memoryview` is only zero-copy for Tensors on CPU. If a Tensor\n      is on GPU, it will have to be transferred to CPU first in order for\n      `memoryview` to work.\n    \n      Returns:\n        A NumPy array of the same shape and dtype or a NumPy scalar, if this\n        Tensor has rank 0.\n    \n      Raises:\n        ValueError: If the dtype of this Tensor does not have a compatible\n          NumPy dtype.\n      \"\"\"\n      # TODO(slebedev): Consider avoiding a copy for non-CPU or remote tensors.\n      maybe_arr = self._numpy()  # pylint: disable=protected-access\n>     return maybe_arr.copy() if isinstance(maybe_arr, np.ndarray) else maybe_arr\nE     numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.33 GiB for an array with shape (2500000000,) and data type bool\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:1156: MemoryError"
            },
            "teardown": {
                "duration": 0.0028603190003195778,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testPartialShapes",
            "lineno": 179,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048783000966068357,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009633088993723504,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPartialShapes>\n"
            },
            "teardown": {
                "duration": 0.001441436994355172,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testTensorShape",
            "lineno": 235,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039427701267413795,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005959062997135334,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTensorShape>\n"
            },
            "teardown": {
                "duration": 0.0018536669958848506,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimBasic",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034923698694910854,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00747780199162662,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroDimBasic>\n"
            },
            "teardown": {
                "duration": 0.001993999001570046,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR1",
            "lineno": 126,
            "outcome": "passed",
            "setup": {
                "duration": 0.000392016998375766,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007696025000768714,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroDimReshapeR1>\n"
            },
            "teardown": {
                "duration": 0.0017441499949200079,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR3",
            "lineno": 130,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003551539994077757,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007499575993278995,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroDimReshapeR3>\n"
            },
            "teardown": {
                "duration": 0.0017447099962737411,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimWithUnspecifiedDim",
            "lineno": 162,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003436750121181831,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005700228997739032,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroDimWithUnspecifiedDim>\n"
            },
            "teardown": {
                "duration": 0.0020238620054442436,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035244799801148474,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00035641700378619134,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017639920115470886,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005837019998580217,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003731829929165542,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014879369991831481,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::testSerializeRestore",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043251700117252767,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08499454699631315,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSerializeRestore>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py:148: IdentityReader.__init__ (from tensorflow.python.ops.io_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nQueue-based input pipelines have been replaced by `tf.data`. Use `tf.data.Dataset.map(...)`.\n2023-05-13 17:35:20.687470: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReaderNumRecordsProducedV2: CPU \nIdentityReaderV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  test_reader (IdentityReaderV2) /device:GPU:0\n  ReaderNumRecordsProducedV2 (ReaderNumRecordsProducedV2) \n\n2023-05-13 17:35:20.728896: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at reader_ops.cc:227 : INVALID_ARGUMENT: Could not parse state for IdentityReader 'test_reader': \\001\\020\\001\\030\\001\\\"\\001X\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_4' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 187, in testSerializeRestore\n      self.evaluate(reader.restore_state(state[1:]))\nNode: 'ReaderRestoreStateV2_4'\nCould not parse state for IdentityReader 'test_reader': \\001\\020\\001\\030\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_4}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_4':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 187, in testSerializeRestore\n    self.evaluate(reader.restore_state(state[1:]))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n2023-05-13 17:35:20.737570: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at reader_ops.cc:227 : INVALID_ARGUMENT: Could not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_5' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 191, in testSerializeRestore\n      self.evaluate(reader.restore_state(state[:-1]))\nNode: 'ReaderRestoreStateV2_5'\nCould not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001\n\t [[{{node ReaderRestoreStateV2_5}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_5':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 191, in testSerializeRestore\n    self.evaluate(reader.restore_state(state[:-1]))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n2023-05-13 17:35:20.743241: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at reader_ops.cc:227 : INVALID_ARGUMENT: Could not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001XExtraJunk\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_6' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 195, in testSerializeRestore\n      self.evaluate(reader.restore_state(state + b\"ExtraJunk\"))\nNode: 'ReaderRestoreStateV2_6'\nCould not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001XExtraJunk\n\t [[{{node ReaderRestoreStateV2_6}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_6':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 195, in testSerializeRestore\n    self.evaluate(reader.restore_state(state + b\"ExtraJunk\"))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n2023-05-13 17:35:20.748999: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at reader_ops.cc:227 : INVALID_ARGUMENT: Could not parse state for IdentityReader 'test_reader': PREFIX\\010\\001\\020\\001\\030\\001\\\"\\001X\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_7' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 199, in testSerializeRestore\n      self.evaluate(reader.restore_state(b\"PREFIX\" + state))\nNode: 'ReaderRestoreStateV2_7'\nCould not parse state for IdentityReader 'test_reader': PREFIX\\010\\001\\020\\001\\030\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_7}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_7':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 199, in testSerializeRestore\n    self.evaluate(reader.restore_state(b\"PREFIX\" + state))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n2023-05-13 17:35:20.754802: W tensorflow/core/framework/op_kernel.cc:1830] OP_REQUIRES failed at reader_ops.cc:227 : INVALID_ARGUMENT: Could not parse state for IdentityReader 'test_reader': BOGUS\\001\\\"\\001X\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_8' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 203, in testSerializeRestore\n      self.evaluate(reader.restore_state(b\"BOGUS\" + state[5:]))\nNode: 'ReaderRestoreStateV2_8'\nCould not parse state for IdentityReader 'test_reader': BOGUS\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_8}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_8':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 203, in testSerializeRestore\n    self.evaluate(reader.restore_state(b\"BOGUS\" + state[5:]))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py:148: IdentityReader.__init__ (from tensorflow.python.ops.io_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nQueue-based input pipelines have been replaced by `tf.data`. Use `tf.data.Dataset.map(...)`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999320.6719682,
                        "msecs": 671.0,
                        "relativeCreated": 253543.8437461853,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_4' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 187, in testSerializeRestore\n      self.evaluate(reader.restore_state(state[1:]))\nNode: 'ReaderRestoreStateV2_4'\nCould not parse state for IdentityReader 'test_reader': \\001\\020\\001\\030\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_4}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_4':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 187, in testSerializeRestore\n    self.evaluate(reader.restore_state(state[1:]))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999320.7322884,
                        "msecs": 732.0,
                        "relativeCreated": 253604.16388511658,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_5' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 191, in testSerializeRestore\n      self.evaluate(reader.restore_state(state[:-1]))\nNode: 'ReaderRestoreStateV2_5'\nCould not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001\n\t [[{{node ReaderRestoreStateV2_5}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_5':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 191, in testSerializeRestore\n    self.evaluate(reader.restore_state(state[:-1]))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999320.738697,
                        "msecs": 738.0,
                        "relativeCreated": 253610.57257652283,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_6' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 195, in testSerializeRestore\n      self.evaluate(reader.restore_state(state + b\"ExtraJunk\"))\nNode: 'ReaderRestoreStateV2_6'\nCould not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001XExtraJunk\n\t [[{{node ReaderRestoreStateV2_6}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_6':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 195, in testSerializeRestore\n    self.evaluate(reader.restore_state(state + b\"ExtraJunk\"))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999320.7444983,
                        "msecs": 744.0,
                        "relativeCreated": 253616.37377738953,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_7' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 199, in testSerializeRestore\n      self.evaluate(reader.restore_state(b\"PREFIX\" + state))\nNode: 'ReaderRestoreStateV2_7'\nCould not parse state for IdentityReader 'test_reader': PREFIX\\010\\001\\020\\001\\030\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_7}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_7':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 199, in testSerializeRestore\n    self.evaluate(reader.restore_state(b\"PREFIX\" + state))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999320.7501206,
                        "msecs": 750.0,
                        "relativeCreated": 253621.9961643219,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_8' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 203, in testSerializeRestore\n      self.evaluate(reader.restore_state(b\"BOGUS\" + state[5:]))\nNode: 'ReaderRestoreStateV2_8'\nCould not parse state for IdentityReader 'test_reader': BOGUS\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_8}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_8':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 203, in testSerializeRestore\n    self.evaluate(reader.restore_state(b\"BOGUS\" + state[5:]))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999320.7558732,
                        "msecs": 755.0,
                        "relativeCreated": 253627.74872779846,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0018376430089119822,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046329700853675604,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040130200795829296,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015468140045413747,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testAutoConvertAndCheckData",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006144409999251366,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044896500185132027,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testAutoConvertAndCheckData>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0018422970024403185,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildCostModel",
            "lineno": 1812,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003415670071262866,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09612342200125568,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBuildCostModel>\n"
            },
            "teardown": {
                "duration": 0.001913275002152659,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDirect",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004180160030955449,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004285569884814322,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBuildGraphErrorDirect>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.001438660008716397,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDist",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00035426901013124734,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045847700675949454,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testBuildGraphErrorDist>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0018591780099086463,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultGraph",
            "lineno": 1200,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004094299947610125,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03483772400068119,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDefaultGraph>\n"
            },
            "teardown": {
                "duration": 0.0014436760102398694,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultServerTimeout",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003953569976147264,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004083420062670484,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testDefaultServerTimeout>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00134007100132294,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDuplicatedInputs",
            "lineno": 1496,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003499769954942167,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014861167990602553,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDuplicatedInputs>\n"
            },
            "teardown": {
                "duration": 0.0017222299939021468,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testErrorsReported",
            "lineno": 123,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004030710115330294,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010175215007620864,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testErrorsReported>\n"
            },
            "teardown": {
                "duration": 0.002288877993123606,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithGroupBy",
            "lineno": 1175,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039680200279690325,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03144899199833162,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testExtendWithGroupBy>\n",
                "stderr": "2023-05-13 17:35:20.963202: W tensorflow/c/c_api.cc:291] Operation '{name:'testExtendWithGroupBy_p/Assign' id:5 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node testExtendWithGroupBy_p/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false, _device=\"/device:GPU:0\"](testExtendWithGroupBy_p, Const)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
            },
            "teardown": {
                "duration": 0.0030160399910528213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatefulOperations",
            "lineno": 1147,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004230439953971654,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03407341901038308,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testExtendWithStatefulOperations>\n"
            },
            "teardown": {
                "duration": 0.0016801740130176768,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatelessOperations",
            "lineno": 1127,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038053400930948555,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019271968994871713,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testExtendWithStatelessOperations>\n"
            },
            "teardown": {
                "duration": 0.0018774889904307202,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedAndFetch",
            "lineno": 1509,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004251529899192974,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4254337970050983,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedAndFetch>\n"
            },
            "teardown": {
                "duration": 0.00222834300075192,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedDictKeyException",
            "lineno": 1788,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046070400276221335,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010113661002833396,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedDictKeyException>\n"
            },
            "teardown": {
                "duration": 0.0015081210003700107,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedError",
            "lineno": 1598,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041898600466083735,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010631251992890611,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedError>\n"
            },
            "teardown": {
                "duration": 0.0013675340014742687,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlices",
            "lineno": 988,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004237649991409853,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021180335999815725,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedIndexedSlices>\n"
            },
            "teardown": {
                "duration": 0.0014648799988208339,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlicesWithoutDenseShape",
            "lineno": 1086,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036923500010743737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018480783997802064,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedIndexedSlicesWithoutDenseShape>\n"
            },
            "teardown": {
                "duration": 0.001469263996114023,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedPrecisionLossError",
            "lineno": 1611,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003730099997483194,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010773996007628739,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedPrecisionLossError>\n"
            },
            "teardown": {
                "duration": 0.001398826003423892,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedShapeCompatibility",
            "lineno": 1795,
            "outcome": "passed",
            "setup": {
                "duration": 0.000355046009644866,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01707867499499116,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedShapeCompatibility>\n"
            },
            "teardown": {
                "duration": 0.001471657000365667,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholder",
            "lineno": 823,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003656250046333298,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020438795996597037,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedSparsePlaceholder>\n"
            },
            "teardown": {
                "duration": 0.0021061570005258545,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderConstantShape",
            "lineno": 912,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039961400034371763,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023590967000927776,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedSparsePlaceholderConstantShape>\n"
            },
            "teardown": {
                "duration": 0.0017112899950006977,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderPartialShape",
            "lineno": 867,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035440700594335794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021334744000341743,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedSparsePlaceholderPartialShape>\n"
            },
            "teardown": {
                "duration": 0.0020743819914059713,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparseTensor",
            "lineno": 757,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003688770084409043,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0213290940009756,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFeedSparseTensor>\n"
            },
            "teardown": {
                "duration": 0.001451752003049478,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchAttrs",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003783830034080893,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046650700096506625,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testFetchAttrs>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0013734899985138327,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchByNameDifferentStringTypes",
            "lineno": 1663,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003719480009749532,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03473879500234034,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchByNameDifferentStringTypes>\n"
            },
            "teardown": {
                "duration": 0.001406205992680043,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchDict",
            "lineno": 241,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004148739972151816,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013494162994902581,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchDict>\n"
            },
            "teardown": {
                "duration": 0.001771057999576442,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlices",
            "lineno": 937,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004446379898581654,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017430535997846164,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchIndexedSlices>\n"
            },
            "teardown": {
                "duration": 0.0016930089914239943,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlicesWithoutDenseShape",
            "lineno": 1036,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003560230106813833,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016914969004574232,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchIndexedSlicesWithoutDenseShape>\n"
            },
            "teardown": {
                "duration": 0.0017311249976046383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchList",
            "lineno": 181,
            "outcome": "passed",
            "setup": {
                "duration": 0.000387238003895618,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02127172300242819,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchList>\n"
            },
            "teardown": {
                "duration": 0.0013756190019194037,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNamedTuple",
            "lineno": 217,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003616299945861101,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014018125002621673,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchNamedTuple>\n"
            },
            "teardown": {
                "duration": 0.0021995069982949644,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestedAttrs",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00038136099465191364,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004450230044312775,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testFetchNestedAttrs>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0014085970033193007,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingEmptyOneLevel",
            "lineno": 360,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003525729989632964,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012712367999483831,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchNestingEmptyOneLevel>\n"
            },
            "teardown": {
                "duration": 0.0013663709978573024,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingOneLevel",
            "lineno": 391,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035730899253394455,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016360260007786565,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchNestingOneLevel>\n"
            },
            "teardown": {
                "duration": 0.0016345309995813295,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNone",
            "lineno": 132,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003688099968712777,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009492070996202528,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchNone>\n"
            },
            "teardown": {
                "duration": 0.0014192750095389783,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOperationObject",
            "lineno": 643,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003643480013124645,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020463744003791362,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchOperationObject>\n"
            },
            "teardown": {
                "duration": 0.0014544000005116686,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOrderedDict",
            "lineno": 256,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004043279914185405,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015514625993091613,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchOrderedDict>\n"
            },
            "teardown": {
                "duration": 0.0016460769984405488,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchScalar",
            "lineno": 603,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003739060048246756,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.040125796003849246,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchScalar>\n"
            },
            "teardown": {
                "duration": 0.001427812996553257,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingleton",
            "lineno": 145,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003658110072137788,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015555150996078737,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchSingleton>\n"
            },
            "teardown": {
                "duration": 0.0019723629957297817,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingletonByName",
            "lineno": 166,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003871420049108565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014973185010603629,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchSingletonByName>\n"
            },
            "teardown": {
                "duration": 0.0014684130001114681,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSparseTensor",
            "lineno": 658,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036195499706082046,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022847336003906094,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchSparseTensor>\n"
            },
            "teardown": {
                "duration": 0.0015937330026645213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTensorObject",
            "lineno": 552,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004129879962420091,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021810019010445103,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchTensorObject>\n"
            },
            "teardown": {
                "duration": 0.0014623660099459812,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTuple",
            "lineno": 200,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040232500759884715,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01462221700057853,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFetchTuple>\n"
            },
            "teardown": {
                "duration": 0.0014808030100539327,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testIncorrectGraph",
            "lineno": 1760,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003722239925991744,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024639745999593288,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testIncorrectGraph>\n"
            },
            "teardown": {
                "duration": 0.0018435800011502579,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testLocalMasterSessionTimeout",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003676289925351739,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004931159928673878,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testLocalMasterSessionTimeout>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.001380399990011938,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMakeCallableOnOperationWithRunOptions",
            "lineno": 1574,
            "outcome": "passed",
            "setup": {
                "duration": 0.00035813999420497566,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.3287900510040345,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMakeCallableOnOperationWithRunOptions>\n",
                "stderr": "2023-05-13 17:35:22.098205: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcupti.so.11.2'; dlerror: libcupti.so.11.2: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/cuda/lib64:/usr/local/nccl2/lib:/usr/local/cuda/extras/CUPTI/lib64\n"
            },
            "teardown": {
                "duration": 0.01405868399888277,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMultipleInteractiveSessionsWarning",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005009330052416772,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003391585996723734,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testMultipleInteractiveSessionsWarning>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.007265145002747886,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDirect",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00047548700240440667,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005398119974415749,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testOutputPartitionGraphsDirect>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0016217770025832579,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDistributed",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003890770021826029,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004227929894113913,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testOutputPartitionGraphsDistributed>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.001704866997897625,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRegisterFetchAndFeedConversionFunctions",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044704999891109765,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000399548007408157,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testRegisterFetchAndFeedConversionFunctions>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0019923919899156317,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRunFeedDict",
            "lineno": 1338,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004204360011499375,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0691633199894568,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRunFeedDict>\n"
            },
            "teardown": {
                "duration": 0.002155890004360117,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testSessionInterOpThreadPool",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004871720011578873,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04201831899990793,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSessionInterOpThreadPool>\n***INP /device:GPU:0\n"
            },
            "teardown": {
                "duration": 0.0025196280039381236,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testStringFeed",
            "lineno": 1629,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004696200048783794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05415402099606581,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testStringFeed>\n"
            },
            "teardown": {
                "duration": 0.0019807260105153546,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testTimeoutWithShortOperations",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005046449950896204,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005127650074427947,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testTimeoutWithShortOperations>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0016103999951155856,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterClose",
            "lineno": 1372,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043468200601637363,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014274279004894197,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUseAfterClose>\n"
            },
            "teardown": {
                "duration": 0.0017418289935449138,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterCloseConcurrent",
            "lineno": 1381,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004332000098656863,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.130088195001008,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUseAfterCloseConcurrent>\n"
            },
            "teardown": {
                "duration": 0.002638466001371853,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseEmptyGraph",
            "lineno": 1401,
            "outcome": "passed",
            "setup": {
                "duration": 0.000642686994979158,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009946669000783004,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUseEmptyGraph>\n"
            },
            "teardown": {
                "duration": 0.002091269998345524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004374639975139871,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000416997994761914,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0027722420054487884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testDtypes",
            "lineno": 101,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006244190008146688,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.042225470999255776,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDtypes>\n"
            },
            "teardown": {
                "duration": 0.002867759991204366,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testExceptions",
            "lineno": 41,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005049339961260557,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002383512008236721,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testExceptions>\n"
            },
            "teardown": {
                "duration": 0.00157011799456086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalDtypeWithoutMaxlen",
            "lineno": 57,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003736509970622137,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027835781991598196,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOneDimensionalDtypeWithoutMaxlen>\n"
            },
            "teardown": {
                "duration": 0.0024802900006761774,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithMaxlen",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004321380110923201,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007341046002693474,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOneDimensionalWithMaxlen>\n"
            },
            "teardown": {
                "duration": 0.002234681000118144,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithoutMaxlen",
            "lineno": 68,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044081501255277544,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009733794999192469,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOneDimensionalWithoutMaxlen>\n"
            },
            "teardown": {
                "duration": 0.002198201007558964,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOutputDtype",
            "lineno": 121,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003864559985231608,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03903980000177398,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOutputDtype>\n"
            },
            "teardown": {
                "duration": 0.002790276994346641,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testTwoDimensional",
            "lineno": 78,
            "outcome": "passed",
            "setup": {
                "duration": 0.000529206998180598,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012371803997666575,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTwoDimensional>\n"
            },
            "teardown": {
                "duration": 0.002279350010212511,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004041299980599433,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004294399986974895,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0022554059978574514,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGrad",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006251690065255389,
                "outcome": "passed"
            },
            "call": {
                "duration": 54.18502707099833,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGrad>\n"
            },
            "teardown": {
                "duration": 0.004896108992397785,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGradWithNoShapeInformation",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006014999962644652,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13330701501399744,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testGradWithNoShapeInformation>\n"
            },
            "teardown": {
                "duration": 0.002176385998609476,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005157190025784075,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005018577998271212,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInvalidShape>\n"
            },
            "teardown": {
                "duration": 0.001525017010862939,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShapeAtEval",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038546501309610903,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.053554975005681626,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInvalidShapeAtEval>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'set_diag' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\nNode: 'set_diag'\nDetected at node 'set_diag' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\nNode: 'set_diag'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: input must be at least 2-dim, received shape: []\n\t [[{{node set_diag}}]]\n\t [[set_diag/_3]]\n  (1) INVALID_ARGUMENT: input must be at least 2-dim, received shape: []\n\t [[{{node set_diag}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'set_diag_1' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\nNode: 'set_diag_1'\nDetected at node 'set_diag_1' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\nNode: 'set_diag_1'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: diagonal must be at least 1-dim, received shape: []\n\t [[{{node set_diag_1}}]]\n\t [[set_diag_1/_7]]\n  (1) INVALID_ARGUMENT: diagonal must be at least 1-dim, received shape: []\n\t [[{{node set_diag_1}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag_1':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\nERROR:tensorflow:Graph execution error:\n\nDetected at node 'set_diag_2' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, d).eval(feed_dict={\nNode: 'set_diag_2'\nDetected at node 'set_diag_2' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, d).eval(feed_dict={\nNode: 'set_diag_2'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: Either first dimensions of diagonal don't match input.shape[:-2], or diagonal.shape[:-1] is not equal to the longests diagonal in range [lower_diag_index:upper_diag_index].\nInput shape: [2,3,3]\nDiagonal shape: [2,4]\nExpected diagonal shape: [2,3]\n\t [[{{node set_diag_2}}]]\n\t [[set_diag_2/_13]]\n  (1) INVALID_ARGUMENT: Either first dimensions of diagonal don't match input.shape[:-2], or diagonal.shape[:-1] is not equal to the longests diagonal in range [lower_diag_index:upper_diag_index].\nInput shape: [2,3,3]\nDiagonal shape: [2,4]\nExpected diagonal shape: [2,3]\n\t [[{{node set_diag_2}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag_2':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag(v, d).eval(feed_dict={\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'set_diag' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\nNode: 'set_diag'\nDetected at node 'set_diag' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\nNode: 'set_diag'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: input must be at least 2-dim, received shape: []\n\t [[{{node set_diag}}]]\n\t [[set_diag/_3]]\n  (1) INVALID_ARGUMENT: input must be at least 2-dim, received shape: []\n\t [[{{node set_diag}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999378.3360572,
                        "msecs": 336.0,
                        "relativeCreated": 311207.9327106476,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'set_diag_1' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\nNode: 'set_diag_1'\nDetected at node 'set_diag_1' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\nNode: 'set_diag_1'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: diagonal must be at least 1-dim, received shape: []\n\t [[{{node set_diag_1}}]]\n\t [[set_diag_1/_7]]\n  (1) INVALID_ARGUMENT: diagonal must be at least 1-dim, received shape: []\n\t [[{{node set_diag_1}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag_1':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999378.3464582,
                        "msecs": 346.0,
                        "relativeCreated": 311218.3337211609,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'set_diag_2' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, d).eval(feed_dict={\nNode: 'set_diag_2'\nDetected at node 'set_diag_2' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, d).eval(feed_dict={\nNode: 'set_diag_2'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: Either first dimensions of diagonal don't match input.shape[:-2], or diagonal.shape[:-1] is not equal to the longests diagonal in range [lower_diag_index:upper_diag_index].\nInput shape: [2,3,3]\nDiagonal shape: [2,4]\nExpected diagonal shape: [2,3]\n\t [[{{node set_diag_2}}]]\n\t [[set_diag_2/_13]]\n  (1) INVALID_ARGUMENT: Either first dimensions of diagonal don't match input.shape[:-2], or diagonal.shape[:-1] is not equal to the longests diagonal in range [lower_diag_index:upper_diag_index].\nInput shape: [2,3,3]\nDiagonal shape: [2,4]\nExpected diagonal shape: [2,3]\n\t [[{{node set_diag_2}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag_2':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag(v, d).eval(feed_dict={\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999378.354959,
                        "msecs": 354.0,
                        "relativeCreated": 311226.83453559875,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0017024389962898567,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangular",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005558340053539723,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3368437460012501,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRectangular>\n"
            },
            "teardown": {
                "duration": 0.0017009920120472088,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangularBatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005124369927216321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.32640846399590373,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRectangularBatch>\n"
            },
            "teardown": {
                "duration": 0.001783461993909441,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquare",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005663229967467487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16346956900088117,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSquare>\n"
            },
            "teardown": {
                "duration": 0.00334764200670179,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquareBatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045590200170408934,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8732942470087437,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSquareBatch>\n"
            },
            "teardown": {
                "duration": 0.002203419993747957,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004607630107784644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047147899749688804,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017269999952986836,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards",
            "lineno": 74,
            "outcome": "failed",
            "setup": {
                "duration": 0.0008632179960841313,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01781854999717325,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 80,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testIndexEqualsNumShards>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testIndexEqualsNumShards>\n\n    def testIndexEqualsNumShards(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(5, 4)\n\nsrc/tensorflow_tests_reduced/shard_test.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0025266540033044294,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards2",
            "lineno": 86,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004840050096390769,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003538552002282813,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 92,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testIndexEqualsNumShards2>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testIndexEqualsNumShards2>\n\n    def testIndexEqualsNumShards2(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(4, 3)\n\nsrc/tensorflow_tests_reduced/shard_test.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002586436996352859,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIteratorEndsBeforeFirstElem",
            "lineno": 49,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004823640047106892,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0024198430037358776,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 55,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testIteratorEndsBeforeFirstElem>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testIteratorEndsBeforeFirstElem>\n\n    def testIteratorEndsBeforeFirstElem(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(1)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(5, 2)\n\nsrc/tensorflow_tests_reduced/shard_test.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023648209898965433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testLargerWorkerPool",
            "lineno": 62,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004438330070115626,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002402732992777601,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 68,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testLargerWorkerPool>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testLargerWorkerPool>\n\n    def testLargerWorkerPool(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(7, 5)\n\nsrc/tensorflow_tests_reduced/shard_test.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024572850088588893,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testName",
            "lineno": 110,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004362889885669574,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0023449059954145923,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 116,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testName>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testName>\n\n    def testName(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(1, 0, name=\"shard\")\n\nsrc/tensorflow_tests_reduced/shard_test.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002462590011418797,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNestedData",
            "lineno": 27,
            "outcome": "failed",
            "setup": {
                "duration": 0.00047940599324647337,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0036001519911224023,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ZipDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 34,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1259,
                        "message": "in zip"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 4956,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 8383,
                        "message": "in zip_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testNestedData>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testNestedData>\n\n    def testNestedData(self):\n      with tf.device(\"cpu\"):\n          dataset_a = dataset_ops.Dataset.range(10)\n          dataset_b = dataset_ops.Dataset.range(10, 0, -1)\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = dataset_ops.Dataset.zip((dataset_a, dataset_b)).shard(5, 2)\n\nsrc/tensorflow_tests_reduced/shard_test.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1259: in zip\n    return ZipDataset(datasets, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:4956: in __init__\n    variant_tensor = gen_dataset_ops.zip_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:8383: in zip_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ZipDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00248695099435281,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNumShardsLargerThanDataset",
            "lineno": 98,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004542259994195774,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0036627439985750243,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 104,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testNumShardsLargerThanDataset>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testNumShardsLargerThanDataset>\n\n    def testNumShardsLargerThanDataset(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(20, 5)\n\nsrc/tensorflow_tests_reduced/shard_test.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002561249988502823,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testOffsetZero",
            "lineno": 38,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046311500773299485,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002376656004344113,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 44,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testOffsetZero>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testOffsetZero>\n\n    def testOffsetZero(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = dataset.shard(5, 0)\n\nsrc/tensorflow_tests_reduced/shard_test.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024079409922705963,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testSimpleCase",
            "lineno": 16,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046083999041002244,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002365047999774106,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 23,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testSimpleCase>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testSimpleCase>\n\n    def testSimpleCase(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = dataset.shard(5, 2)\n\nsrc/tensorflow_tests_reduced/shard_test.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0025266890006605536,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00059128699649591,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004997799987904727,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0018694620084716007,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00040870199154596776,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040300399996340275,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014674590056529269,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003809509944403544,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009641892000217922,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_100_index_0_numshards_2>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_0_numshards_2>\nkwargs = {'elems': 100, 'index': 0, 'num_shards': 2}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44437f40>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0016049919940996915,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004252479993738234,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007928379927761853,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_100_index_0_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_0_numshards_5>\nkwargs = {'elems': 100, 'index': 0, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44170c10>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0016248199972324073,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00038695099647156894,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008065080037340522,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_100_index_1_numshards_2>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_1_numshards_2>\nkwargs = {'elems': 100, 'index': 1, 'num_shards': 2}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44171990>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0015340599929913878,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004555990017252043,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007387700024992228,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_100_index_1_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_1_numshards_5>\nkwargs = {'elems': 100, 'index': 1, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44171f30>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0015238820051308721,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004078659985680133,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007817050063749775,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_10_index_0_numshards_2>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_0_numshards_2>\nkwargs = {'elems': 10, 'index': 0, 'num_shards': 2}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44171c60>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0014978719991631806,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00040838199493009597,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008611110097263008,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_10_index_0_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_0_numshards_5>\nkwargs = {'elems': 10, 'index': 0, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a441724d0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.001446094989660196,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003703769907588139,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008248770027421415,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_10_index_1_numshards_2>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_1_numshards_2>\nkwargs = {'elems': 10, 'index': 1, 'num_shards': 2}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44172a70>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0014125089946901426,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000334814001689665,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007745920011075214,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction test_test_elems_10_index_1_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_1_numshards_5>\nkwargs = {'elems': 10, 'index': 1, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a441715a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0015224280068650842,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testEmptyDataset",
            "lineno": 163,
            "outcome": "failed",
            "setup": {
                "duration": 0.00042246699740644544,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005232694995356724,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 170,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testEmptyDataset>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testEmptyDataset>\n\n    def testEmptyDataset(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.from_tensor_slices([])\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(\n          num_shards=2, index=1)\n\nsrc/tensorflow_tests_reduced/shard_test.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0026461420056875795,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_1",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005152200028533116,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0028165339899715036,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 155,
                        "message": "in testInvalidIndex"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testInvalidIndex_test_index_1>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testInvalidIndex_test_index_1>\nkwargs = {'index': -1}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44528dc0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:155: in testInvalidIndex\n    dataset = dataset.shard(num_shards=2, index=0)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002326103000086732,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004457850009202957,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0024512980016879737,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 155,
                        "message": "in testInvalidIndex"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testInvalidIndex_test_index_2>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testInvalidIndex_test_index_2>\nkwargs = {'index': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a441732e0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:155: in testInvalidIndex\n    dataset = dataset.shard(num_shards=2, index=0)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0025351810036227107,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_3",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005317150062182918,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027723590028472245,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 155,
                        "message": "in testInvalidIndex"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testInvalidIndex_test_index_3>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testInvalidIndex_test_index_3>\nkwargs = {'index': 3}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44528e50>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:155: in testInvalidIndex\n    dataset = dataset.shard(num_shards=2, index=0)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002411716995993629,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_4",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004587050061672926,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002596779988380149,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 155,
                        "message": "in testInvalidIndex"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testInvalidIndex_test_index_4>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testInvalidIndex_test_index_4>\nkwargs = {'index': 4}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44528280>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:155: in testInvalidIndex\n    dataset = dataset.shard(num_shards=2, index=0)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00231024700042326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00044875399908050895,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025304390001110733,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_0_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_0_numshards_10>\nkwargs = {'elements': 0, 'index': 0, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44172560>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00257717099157162,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000472839004942216,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026103730051545426,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_0_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_0_numshards_5>\nkwargs = {'elements': 0, 'index': 0, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44528670>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00244267399830278,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046324900176841766,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025793969980441034,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_0_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_0_numshards_7>\nkwargs = {'elements': 0, 'index': 0, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44171510>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024238649930339307,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00048152898671105504,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003309385007014498,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_1_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_1_numshards_10>\nkwargs = {'elements': 0, 'index': 1, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44170b80>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00230137599282898,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004977939970558509,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002471974992658943,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_1_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_1_numshards_5>\nkwargs = {'elements': 0, 'index': 1, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448c670>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002394518000073731,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004703049926320091,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025976980105042458,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_1_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_1_numshards_7>\nkwargs = {'elements': 0, 'index': 1, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44171510>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023298230080399662,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004924849927192554,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0024984479969134554,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_2_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_2_numshards_10>\nkwargs = {'elements': 0, 'index': 2, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44528280>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023894299956737086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004621660045813769,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0024606770020909607,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_2_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_2_numshards_5>\nkwargs = {'elements': 0, 'index': 2, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4452a950>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002407979001873173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004550299927359447,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0024252230068668723,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_2_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_2_numshards_7>\nkwargs = {'elements': 0, 'index': 2, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448f7f0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002311046002432704,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004636550002032891,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002514808002160862,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_3_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_3_numshards_10>\nkwargs = {'elements': 0, 'index': 3, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448d900>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0026685179909691215,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005238780140643939,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002591667012893595,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_3_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_3_numshards_5>\nkwargs = {'elements': 0, 'index': 3, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4452ba30>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023491470055887476,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005366099940147251,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026690150116337463,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_3_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_3_numshards_7>\nkwargs = {'elements': 0, 'index': 3, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44170a60>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002415189999737777,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005034010100644082,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025654439959907904,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_4_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_4_numshards_10>\nkwargs = {'elements': 0, 'index': 4, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448d990>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024049810017459095,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004665379965445027,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025112440052907914,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_4_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_4_numshards_5>\nkwargs = {'elements': 0, 'index': 4, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448e8c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002276646002428606,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046490000386256725,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00259298000310082,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_0_index_4_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_4_numshards_7>\nkwargs = {'elements': 0, 'index': 4, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4452a9e0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023987049935385585,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045148500066716224,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00254226999823004,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_0_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_0_numshards_10>\nkwargs = {'elements': 10, 'index': 0, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4452ba30>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00232858800154645,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046792099601589143,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027332680037943646,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_0_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_0_numshards_5>\nkwargs = {'elements': 10, 'index': 0, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448f490>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023556320084026083,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000447690996224992,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025216319918399677,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_0_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_0_numshards_7>\nkwargs = {'elements': 10, 'index': 0, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448e8c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002295967991813086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00044710499059874564,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025454629940213636,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_1_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_1_numshards_10>\nkwargs = {'elements': 10, 'index': 1, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448e050>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002255408006021753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045250800030771643,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0024883160076569766,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_1_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_1_numshards_5>\nkwargs = {'elements': 10, 'index': 1, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448e8c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0025578060012776405,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004735669936053455,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002551169993239455,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_1_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_1_numshards_7>\nkwargs = {'elements': 10, 'index': 1, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448e050>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0021079729922348633,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045440001122187823,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027913619996979833,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_2_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_2_numshards_10>\nkwargs = {'elements': 10, 'index': 2, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448e8c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002310117008164525,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00044939298823010176,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002519264002330601,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_2_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_2_numshards_5>\nkwargs = {'elements': 10, 'index': 2, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448e050>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0022937540052225813,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004964410036336631,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026457339990884066,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_2_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_2_numshards_7>\nkwargs = {'elements': 10, 'index': 2, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448e8c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0022983689996181056,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004832459962926805,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002530906000174582,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_3_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_3_numshards_10>\nkwargs = {'elements': 10, 'index': 3, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4448e050>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002288632997078821,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005048510065535083,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025643300032243133,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_3_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_3_numshards_5>\nkwargs = {'elements': 10, 'index': 3, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44516d40>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002280925997183658,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004546509881038219,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025597649946575984,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_3_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_3_numshards_7>\nkwargs = {'elements': 10, 'index': 3, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a457475b0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023093720083124936,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046701799146831036,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002590214993688278,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_4_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_4_numshards_10>\nkwargs = {'elements': 10, 'index': 4, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a445141f0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023187019978649914,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005134670063853264,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002687694999622181,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_4_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_4_numshards_5>\nkwargs = {'elements': 10, 'index': 4, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44515000>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024420600093435496,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005221449973760173,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026023339887615293,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_10_index_4_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_4_numshards_7>\nkwargs = {'elements': 10, 'index': 4, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a45746710>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024436239909846336,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004980900121154264,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002662333004991524,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_0_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_0_numshards_10>\nkwargs = {'elements': 50, 'index': 0, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a45747eb0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024683850060682744,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004881089989794418,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002538696993724443,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_0_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_0_numshards_5>\nkwargs = {'elements': 50, 'index': 0, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44515090>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023676019918639213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005261670012259856,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026984709984390065,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_0_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_0_numshards_7>\nkwargs = {'elements': 50, 'index': 0, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44515fc0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002189117993111722,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004467679973458871,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002420233009615913,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_1_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_1_numshards_10>\nkwargs = {'elements': 50, 'index': 1, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a45747f40>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0023124329891288653,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045867200242355466,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026377329922979698,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_1_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_1_numshards_5>\nkwargs = {'elements': 50, 'index': 1, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a45747d90>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002411380992271006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004491889994824305,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002533064005547203,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_1_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_1_numshards_7>\nkwargs = {'elements': 50, 'index': 1, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44514550>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002788390003843233,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005153420061105862,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026028620050055906,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_2_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_2_numshards_10>\nkwargs = {'elements': 50, 'index': 2, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44515510>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0022457860031863675,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005350440042093396,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002743555000051856,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_2_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_2_numshards_5>\nkwargs = {'elements': 50, 'index': 2, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44450670>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002745017991401255,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00060100200062152,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003076338005485013,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_2_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_2_numshards_7>\nkwargs = {'elements': 50, 'index': 2, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44451000>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0022770619980292395,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00044905800314154476,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025094339944189414,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_3_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_3_numshards_10>\nkwargs = {'elements': 50, 'index': 3, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44515510>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0022216130018932745,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004488660051720217,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025749640044523403,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_3_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_3_numshards_5>\nkwargs = {'elements': 50, 'index': 3, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44515750>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0024051600048551336,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005130919889779761,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002612263007904403,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_3_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_3_numshards_7>\nkwargs = {'elements': 50, 'index': 3, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44515510>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002397731994278729,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00047439298941753805,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002635580996866338,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_4_numshards_10>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_4_numshards_10>\nkwargs = {'elements': 50, 'index': 4, 'num_shards': 10}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a4457b760>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002330613002413884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004981730016879737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002522786002373323,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_4_numshards_5>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_4_numshards_5>\nkwargs = {'elements': 50, 'index': 4, 'num_shards': 5}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44515510>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002331759998924099,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005141940055182204,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026611810026224703,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testMultipleCombinations_test_elements_50_index_4_numshards_7>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_4_numshards_7>\nkwargs = {'elements': 50, 'index': 4, 'num_shards': 7}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f6afb36a800>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f6a44453490>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002364054002100602,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexGreaterThanNumElements",
            "lineno": 213,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045921299897599965,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004059981001773849,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 220,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testNumShardsAndIndexGreaterThanNumElements>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testNumShardsAndIndexGreaterThanNumElements>\n\n    def testNumShardsAndIndexGreaterThanNumElements(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(13)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(23, 21)\n\nsrc/tensorflow_tests_reduced/shard_test.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00245880099828355,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexLessThanNumElements",
            "lineno": 180,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005282670026645064,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0024700670037418604,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 187,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testNumShardsAndIndexLessThanNumElements>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testNumShardsAndIndexLessThanNumElements>\n\n    def testNumShardsAndIndexLessThanNumElements(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(5, 0)\n\nsrc/tensorflow_tests_reduced/shard_test.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002621624997118488,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsGreaterThanNumElementsIndexLess",
            "lineno": 197,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004931400035275146,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003929070007870905,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 204,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testNumShardsGreaterThanNumElementsIndexLess>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testNumShardsGreaterThanNumElementsIndexLess>\n\n    def testNumShardsGreaterThanNumElementsIndexLess(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(7)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(8, 3)\n\nsrc/tensorflow_tests_reduced/shard_test.py:204: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:ShardDataset]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002376539006945677,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045593699906021357,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045236499863676727,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0022625140118179843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006304490088950843,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06737336798687465,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCorrectOutput>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/shuffle_and_repeat_test.py:35: shuffle_and_repeat (from tensorflow.python.data.experimental.ops.shuffle_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.data.Dataset.shuffle(buffer_size, seed)` followed by `tf.data.Dataset.repeat(count)`. Static tf.data optimizations will take care of using the fused implementation.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/shuffle_and_repeat_test.py:35: shuffle_and_repeat (from tensorflow.python.data.experimental.ops.shuffle_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.data.Dataset.shuffle(buffer_size, seed)` followed by `tf.data.Dataset.repeat(count)`. Static tf.data optimizations will take care of using the fused implementation.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999404.8622007,
                        "msecs": 862.0,
                        "relativeCreated": 337734.0762615204,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0026571499911369756,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne",
            "lineno": 94,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004894309968221933,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05496574299468193,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCountMinusOne>\n"
            },
            "teardown": {
                "duration": 0.002624928005388938,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone",
            "lineno": 85,
            "outcome": "passed",
            "setup": {
                "duration": 0.00042645899520721287,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.051081840007100254,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testCountNone>\n"
            },
            "teardown": {
                "duration": 0.0025234259956050664,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds",
            "lineno": 78,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004396720032673329,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05125510699872393,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDifferentOrderForDifferentSeeds>\n"
            },
            "teardown": {
                "duration": 0.0024797130026854575,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty",
            "lineno": 111,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005790799914393574,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015300390994525515,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfiniteEmpty>\n"
            },
            "teardown": {
                "duration": 0.0022705349983880296,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs",
            "lineno": 103,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004957400087732822,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.050896387998363934,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInfiniteOutputs>\n"
            },
            "teardown": {
                "duration": 0.0023579270055051893,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize",
            "lineno": 120,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004624430002877489,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015600525002810173,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testLargeBufferSize>\n"
            },
            "teardown": {
                "duration": 0.0022454630088759586,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041138799861073494,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08397558399883565,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testRerandomizeOnReplicate>\n"
            },
            "teardown": {
                "duration": 0.003085994001594372,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling",
            "lineno": 63,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045313900045584887,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029228577011963353,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testReshuffling>\n"
            },
            "teardown": {
                "duration": 0.0024538970028515905,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds",
            "lineno": 72,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004528360004769638,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04999566600599792,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSameOrderForSameSeeds>\n"
            },
            "teardown": {
                "duration": 0.0029729850066360086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize",
            "lineno": 134,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004967250133631751,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05824530200334266,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testVeryLargeBufferSize>\n"
            },
            "teardown": {
                "duration": 0.0028786830080207437,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000453408996690996,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043738399108406156,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0020239309960743412,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005323699879227206,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041670899372547865,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015451460058102384,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039363300311379135,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08731715600879397,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyexhaustediterator>\n"
            },
            "teardown": {
                "duration": 0.0027963169995928183,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000771708000684157,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06410742399748415,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyfullyusediterator>\n"
            },
            "teardown": {
                "duration": 0.002789704012684524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005204219924053177,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13667973499104846,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifymultiplebreaks>\n"
            },
            "teardown": {
                "duration": 0.0031929270044201985,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005755029997089878,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009451820078538731,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyresetrestorediterator>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped: Eager mode iteration do not support re-initialization.')"
            },
            "teardown": {
                "duration": 0.0015300020022550598,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003649910067906603,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06360442598816007,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_test_verifyfn_verifyunusediterator>\n"
            },
            "teardown": {
                "duration": 0.002682915990590118,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::testSimpleSave",
            "lineno": 36,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006829010089859366,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0925397770042764,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSimpleSave>\n",
                "stderr": "2023-05-13 17:36:45.825234: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  var_x/Initializer/initial_value (Const) \n  var_x (VarHandleOp) /device:GPU:0\n  var_x/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  var_x/Assign (AssignVariableOp) /device:GPU:0\n  var_x/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n\n2023-05-13 17:36:45.837854: W tensorflow/c/c_api.cc:291] Operation '{name:'var_x/Assign' id:5 op device:{requested: '/device:GPU:0', assigned: ''} def:{{{node var_x/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_INT32, validate_shape=false, _device=\"/device:GPU:0\"](var_x, var_x/Initializer/initial_value)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n2023-05-13 17:36:45.838226: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  var_y/Initializer/initial_value (Const) \n  var_y (VarHandleOp) /device:GPU:0\n  var_y/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  var_y/Assign (AssignVariableOp) /device:GPU:0\n  var_y/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n\nWARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/simple_save_test.py:56: simple_save (from tensorflow.python.saved_model.simple_save) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.\nWARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/saved_model/signature_def_utils_impl.py:203: build_tensor_info (from tensorflow.python.saved_model.utils_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.\nWARNING:tensorflow:From /home/frasermince/portability/src/tensorflow_tests_reduced/simple_save_test.py:62: load (from tensorflow.python.saved_model.loader_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.saved_model.load` instead.\n2023-05-13 17:36:45.889693: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  var_x/Initializer/initial_value (Const) /device:GPU:0\n  var_x (VarHandleOp) /device:GPU:0\n  var_x/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  var_x/Assign (AssignVariableOp) /device:GPU:0\n  var_x/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n  save/AssignVariableOp (AssignVariableOp) /device:GPU:0\n\n2023-05-13 17:36:45.889752: W tensorflow/core/common_runtime/colocation_graph.cc:1214] Failed to place the graph without changing the devices of some resources. Some of the operations (that had to be colocated with resource generating operations) are not supported on the resources' devices. Current candidate devices are [\n  /job:localhost/replica:0/task:0/device:CPU:0].\nSee below for details of this colocation group:\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:GPU:0' assigned_device_name_='' resource_device_name_='/device:GPU:0' supported_device_types_=[CPU] possible_devices_=[]\nReadVariableOp: GPU CPU \nAssignVariableOp: GPU CPU \nVarIsInitializedOp: GPU CPU \nConst: GPU CPU \nVarHandleOp: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  var_y/Initializer/initial_value (Const) /device:GPU:0\n  var_y (VarHandleOp) /device:GPU:0\n  var_y/IsInitialized/VarIsInitializedOp (VarIsInitializedOp) /device:GPU:0\n  var_y/Assign (AssignVariableOp) /device:GPU:0\n  var_y/Read/ReadVariableOp (ReadVariableOp) /device:GPU:0\n  save/AssignVariableOp_1 (AssignVariableOp) /device:GPU:0\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/simple_save_test.py:56: simple_save (from tensorflow.python.saved_model.simple_save) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999405.847346,
                        "msecs": 847.0,
                        "relativeCreated": 338719.22159194946,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/saved_model/signature_def_utils_impl.py:203: build_tensor_info (from tensorflow.python.saved_model.utils_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999405.8475132,
                        "msecs": 847.0,
                        "relativeCreated": 338719.3887233734,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/simple_save_test.py:62: load (from tensorflow.python.saved_model.loader_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.saved_model.load` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999405.8819487,
                        "msecs": 881.0,
                        "relativeCreated": 338753.8242340088,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0016117949999170378,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004119139921385795,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040607999835629016,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001514621006208472,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testEval",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006977120065130293,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018365623996942304,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEval>\n"
            },
            "teardown": {
                "duration": 0.001596287009306252,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testFalse",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003615760069806129,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015020021004602313,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFalse>\n"
            },
            "teardown": {
                "duration": 0.001519020996056497,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg1",
            "lineno": 102,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003971109981648624,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00937045700266026,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMissingArg1>\n"
            },
            "teardown": {
                "duration": 0.0015294490003725514,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg2",
            "lineno": 110,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034805500763468444,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009378154994919896,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testMissingArg2>\n"
            },
            "teardown": {
                "duration": 0.0015017849946161732,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testPlaceholderWithDefault",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.00038602099812123924,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.030421774004935287,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testPlaceholderWithDefault>\n"
            },
            "teardown": {
                "duration": 0.00146632399992086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testTrue",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003611049905885011,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01436507300240919,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTrue>\n"
            },
            "teardown": {
                "duration": 0.0013106880069244653,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testUnknown",
            "lineno": 61,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034861700260080397,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02421095200406853,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnknown>\n"
            },
            "teardown": {
                "duration": 0.0017352949944324791,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004174499918008223,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041025399696081877,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014564419980160892,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::testSmallInput2x2Pad1x0",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005745899979956448,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02912422700319439,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmallInput2x2Pad1x0>\n"
            },
            "teardown": {
                "duration": 0.0014715889992658049,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00040584099770057946,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004050190036650747,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015703950048191473,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testDirect",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004435940063558519,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2536940799909644,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDirect>\n"
            },
            "teardown": {
                "duration": 0.0016937290056375787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimOneRemainingDim",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004636430094251409,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.044046145005268045,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOneBlockDimOneRemainingDim>\n"
            },
            "teardown": {
                "duration": 0.0021581990004051477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimZeroRemainingDims",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004611850017681718,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04276540099817794,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testOneBlockDimZeroRemainingDims>\n"
            },
            "teardown": {
                "duration": 0.0022190890013007447,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsOneRemainingDim",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000443879995145835,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08241216099122539,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroBlockDimsOneRemainingDim>\n"
            },
            "teardown": {
                "duration": 0.0018686889961827546,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsTwoRemainingDims",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004694600065704435,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11877146099868696,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroBlockDimsTwoRemainingDims>\n"
            },
            "teardown": {
                "duration": 0.0020443859975785017,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsZeroRemainingDims",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004589999880408868,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04480133199831471,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testZeroBlockDimsZeroRemainingDims>\n"
            },
            "teardown": {
                "duration": 0.001508308996562846,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004137319920118898,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004211310006212443,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001659550005570054,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::testSpaceToDepthTranspose",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004811630060430616,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03352492400154006,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSpaceToDepthTranspose>\n"
            },
            "teardown": {
                "duration": 0.0017468209989601746,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00036735000321641564,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039180000021588057,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001403514004778117,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSize0",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047039901255629957,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0022787210036767647,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBlockSize0>\n"
            },
            "teardown": {
                "duration": 0.0014788700063945726,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeLarger",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003343290009070188,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0021774850029032677,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBlockSizeLarger>\n"
            },
            "teardown": {
                "duration": 0.0013754380051977932,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleBoth",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003389180055819452,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0019205839926144108,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBlockSizeNotDivisibleBoth>\n"
            },
            "teardown": {
                "duration": 0.0014142790023470297,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleHeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003823510051006451,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0019383429898880422,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBlockSizeNotDivisibleHeight>\n"
            },
            "teardown": {
                "duration": 0.001309074999880977,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleWidth",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003873189998557791,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0022939350019441918,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBlockSizeNotDivisibleWidth>\n"
            },
            "teardown": {
                "duration": 0.0014731979899806902,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeOne",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003794639924308285,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0020834450115216896,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testBlockSizeOne>\n"
            },
            "teardown": {
                "duration": 0.0013054459996055812,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testInputWrongDimMissingBatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003456170088611543,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0019940070051234215,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInputWrongDimMissingBatch>\n"
            },
            "teardown": {
                "duration": 0.0013284299930091947,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testUnknownShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033927599724847823,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003748172995983623,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUnknownShape>\n"
            },
            "teardown": {
                "duration": 0.0013304110034368932,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00034736499947030097,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003807539906119928,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014960900007281452,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00041380999027751386,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.28861944800883066,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmall>\n"
            },
            "teardown": {
                "duration": 0.002081608006847091,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall2",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005299939948599786,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.43603502100449987,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmall2>\n"
            },
            "teardown": {
                "duration": 0.0020601229916792363,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmallPad1x1",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011537940008565784,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3729792130034184,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSmallPad1x1>\n"
            },
            "teardown": {
                "duration": 0.0023845469986554235,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004495290049817413,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004230110062053427,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0018269120046170428,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006188489933265373,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039081899740267545,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014933440106688067,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test0",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004400199977681041,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011049628999899141,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test0>\n"
            },
            "teardown": {
                "duration": 0.001817637006752193,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test1",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.00033840499236248434,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004439373005880043,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test1>\n"
            },
            "teardown": {
                "duration": 0.005083800991997123,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test2",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.000349758003721945,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004541759000858292,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test2>\n"
            },
            "teardown": {
                "duration": 0.00164317199960351,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test3",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037679600063711405,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004750652995426208,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test3>\n"
            },
            "teardown": {
                "duration": 0.0015818389947526157,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005264530045678839,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004408289969433099,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0017302409978583455,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006203310040291399,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2960359880089527,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testFiniteGradientAtDifficultPoints>\n"
            },
            "teardown": {
                "duration": 0.002166758000385016,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testNormalSurvivalFunction",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005864919949090108,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0671894550032448,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testNormalSurvivalFunction>\n"
            },
            "teardown": {
                "duration": 0.0022652959887636825,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testSampleLikeArgsGetDistDType",
            "lineno": 58,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004410859983181581,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.25233804900199175,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testSampleLikeArgsGetDistDType>\n"
            },
            "teardown": {
                "duration": 0.002681009005755186,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043751900375355035,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005082819989183918,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_session>\n"
            },
            "teardown": {
                "duration": 0.001789278001524508,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testDeterminism",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005858340009581298,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.0688677620055387,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeterminism>\n"
            },
            "teardown": {
                "duration": 0.002462596006807871,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testEmptyBatches",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.000448125007096678,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018301791002159007,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testEmptyBatches>\n"
            },
            "teardown": {
                "duration": 0.0016496410098625347,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testExecuteMultipleWithoutError",
            "lineno": 112,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003873800014844164,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12187166800140403,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testExecuteMultipleWithoutError>\n"
            },
            "teardown": {
                "duration": 0.002358212004764937,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testThrowDeterminismError",
            "lineno": 60,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004671850037993863,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05245161600760184,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testThrowDeterminismError>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'Svd' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/svd_test.py\", line 72, in testThrowDeterminismError\n      self.evaluate(linalg_ops.svd(matrix))\nNode: 'Svd'\nDetected at node 'Svd' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/svd_test.py\", line 72, in testThrowDeterminismError\n      self.evaluate(linalg_ops.svd(matrix))\nNode: 'Svd'\n2 root error(s) found.\n  (0) UNIMPLEMENTED: Determinism is not yet supported for SVD of matrices with 1 column.\n\t [[{{node Svd}}]]\n\t [[Svd/_5]]\n  (1) UNIMPLEMENTED: Determinism is not yet supported for SVD of matrices with 1 column.\n\t [[{{node Svd}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'Svd':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/svd_test.py\", line 72, in testThrowDeterminismError\n    self.evaluate(linalg_ops.svd(matrix))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg_ops.py\", line 548, in svd\n    s, u, v = gen_linalg_ops.svd(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_linalg_ops.py\", line 2421, in svd\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'Svd' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/svd_test.py\", line 72, in testThrowDeterminismError\n      self.evaluate(linalg_ops.svd(matrix))\nNode: 'Svd'\nDetected at node 'Svd' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/svd_test.py\", line 72, in testThrowDeterminismError\n      self.evaluate(linalg_ops.svd(matrix))\nNode: 'Svd'\n2 root error(s) found.\n  (0) UNIMPLEMENTED: Determinism is not yet supported for SVD of matrices with 1 column.\n\t [[{{node Svd}}]]\n\t [[Svd/_5]]\n  (1) UNIMPLEMENTED: Determinism is not yet supported for SVD of matrices with 1 column.\n\t [[{{node Svd}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'Svd':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/svd_test.py\", line 72, in testThrowDeterminismError\n    self.evaluate(linalg_ops.svd(matrix))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg_ops.py\", line 548, in svd\n    s, u, v = gen_linalg_ops.svd(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_linalg_ops.py\", line 2421, in svd\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999409.8276856,
                        "msecs": 827.0,
                        "relativeCreated": 342699.5611190796,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0022392240061890334,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004106289998162538,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004036659956909716,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015886720066191629,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005759819905506447,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041918100032489747,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0013726549950661138,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039417399966623634,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003419839922571555,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001813777009374462,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithForwarding",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005769550043623894,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24971717399603222,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTensorScatterUpdateWithForwarding>\n"
            },
            "teardown": {
                "duration": 0.001789999005268328,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithStrings",
            "lineno": 138,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005144050082890317,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021989504995872267,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorScatterUpdate]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
                        "lineno": 150,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 11518,
                        "message": "in tensor_scatter_update"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testTensorScatterUpdateWithStrings>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.tensor_scatter_update_test.ScatterNdTensorTest testMethod=testTensorScatterUpdateWithStrings>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testTensorScatterUpdateWithStrings(self):\n        indices = constant_op.constant([[4], [3], [1], [7]])\n        updates = constant_op.constant([\"there\", \"there\", \"there\", \"12\"],\n                                       dtype=dtypes.string)\n        tensor = constant_op.constant([\n            \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\n        ],\n            dtype=dtypes.string)\n        timer = tensorflow_op_timer()\n        with timer:\n>           updated = array_ops.tensor_scatter_update(tensor, indices, updates)\n\nsrc/tensorflow_tests_reduced/tensor_scatter_update_test.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py:11518: in tensor_scatter_update\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorScatterUpdate]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.002767735000816174,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSub",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004608309973264113,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07562899000186007,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdateAddSub>\n"
            },
            "teardown": {
                "duration": 0.002485463992343284,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSubGradients",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006113799900049344,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0510403140069684,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdateAddSubGradients>\n"
            },
            "teardown": {
                "duration": 0.002040888008195907,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateMinMax",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044526100100483745,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0683871600049315,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdateMinMax>\n"
            },
            "teardown": {
                "duration": 0.002186017998610623,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices1D",
            "lineno": 158,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00040272400656249374,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025946909008780494,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testUpdateRepeatedIndices1D>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/tensor_scatter_update_test.py', 159, 'Skipped: Duplicate indices scatter is non-deterministic on GPU')"
            },
            "teardown": {
                "duration": 0.002133919988409616,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices2D",
            "lineno": 173,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003695210034493357,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026127534001716413,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testUpdateRepeatedIndices2D>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/tensor_scatter_update_test.py', 174, 'Skipped: Duplicate indices scatter is non-deterministic on GPU')"
            },
            "teardown": {
                "duration": 0.0014059060049476102,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004302340094000101,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037363500450737774,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014975049998611212,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testDeterminism",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045444701390806586,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05213083399576135,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testDeterminism>\n"
            },
            "teardown": {
                "duration": 0.0024529059883207083,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithForwarding",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004806700017070398,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022929894999833778,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testTensorScatterUpdateWithForwarding>\n"
            },
            "teardown": {
                "duration": 0.0014684089983347803,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithStrings",
            "lineno": 138,
            "outcome": "failed",
            "setup": {
                "duration": 0.0003978549939347431,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02042253599211108,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorScatterUpdate]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
                        "lineno": 150,
                        "message": ""
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 11518,
                        "message": "in tensor_scatter_update"
                    },
                    {
                        "path": "../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "stdout": "ITEM <TestCaseFunction testTensorScatterUpdateWithStrings>\n",
                "longrepr": "self = <src.tensorflow_tests_reduced.tensor_scatter_update_test.ScatterNdTensorDeterminismTest testMethod=testTensorScatterUpdateWithStrings>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testTensorScatterUpdateWithStrings(self):\n        indices = constant_op.constant([[4], [3], [1], [7]])\n        updates = constant_op.constant([\"there\", \"there\", \"there\", \"12\"],\n                                       dtype=dtypes.string)\n        tensor = constant_op.constant([\n            \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\n        ],\n            dtype=dtypes.string)\n        timer = tensorflow_op_timer()\n        with timer:\n>           updated = array_ops.tensor_scatter_update(tensor, indices, updates)\n\nsrc/tensorflow_tests_reduced/tensor_scatter_update_test.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_array_ops.py:11518: in tensor_scatter_update\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:GPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:GPU:0, /job:localhost/replica:0/task:0/device:CPU:0]. [Op:TensorScatterUpdate]\n\n../miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0025846380012808368,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSub",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044444200466386974,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06886961399868596,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdateAddSub>\n"
            },
            "teardown": {
                "duration": 0.00230770799680613,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSubGradients",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.000493970001116395,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05119299699435942,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdateAddSubGradients>\n"
            },
            "teardown": {
                "duration": 0.0020629920036299154,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateMinMax",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005156289989827201,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06710921799822245,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testUpdateMinMax>\n"
            },
            "teardown": {
                "duration": 0.002288564995978959,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices1D",
            "lineno": 158,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00047584300045855343,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026023905011243187,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testUpdateRepeatedIndices1D>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/tensor_scatter_update_test.py', 159, 'Skipped: Duplicate indices scatter is non-deterministic on GPU')"
            },
            "teardown": {
                "duration": 0.0021940229926258326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices2D",
            "lineno": 173,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004333539982326329,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026010154993855394,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction testUpdateRepeatedIndices2D>\n",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/tensor_scatter_update_test.py', 174, 'Skipped: Duplicate indices scatter is non-deterministic on GPU')"
            },
            "teardown": {
                "duration": 0.001524156003142707,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039694999577477574,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037752299977000803,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0018206730019301176,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::testInt32Basic",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006937860016478226,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009500225991359912,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testInt32Basic>\n"
            },
            "teardown": {
                "duration": 0.001833956004702486,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003764120046980679,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004165029968135059,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0019087360124103725,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::testConvertSingleVariable",
            "lineno": 169,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006355749937938526,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025311796998721547,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction testConvertSingleVariable>\n",
                "stderr": "WARNING:tensorflow:From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/convert_to_constants.py:943: extract_sub_graph (from tensorflow.python.framework.graph_util_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/convert_to_constants.py:943: extract_sub_graph (from tensorflow.python.framework.graph_util_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683999411.3277183,
                        "msecs": 327.0,
                        "relativeCreated": 344199.5937824249,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.001494869007728994,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0003945620119338855,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003958489978685975,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001640465998207219,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_non_singular",
            "lineno": 87,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006664259999524802,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01157494800281711,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_assert_non_singular>\n"
            },
            "teardown": {
                "duration": 0.0017768210091162473,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_positive_definite",
            "lineno": 82,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034452200634405017,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010978761987644248,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_assert_positive_definite>\n"
            },
            "teardown": {
                "duration": 0.0013339709985302761,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_self_adjoint",
            "lineno": 92,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034556700848042965,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014457668992690742,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_assert_self_adjoint>\n"
            },
            "teardown": {
                "duration": 0.0014714239950990304,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_is_x_flags",
            "lineno": 175,
            "outcome": "passed",
            "setup": {
                "duration": 0.00040915700083132833,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010807712009409443,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_is_x_flags>\n"
            },
            "teardown": {
                "duration": 0.001385046009090729,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_dynamic",
            "lineno": 151,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034002200118266046,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11262385400186758,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_negative_batch_shape_raises_dynamic>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/add/_43]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 243, in __init__\n    self._check_batch_shape_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 425, in _check_batch_shape_possibly_add_asserts\n    check_ops.assert_non_negative(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 622, in assert_non_negative\n    return assert_less_equal(zero, x, data=data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/add/_43]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 243, in __init__\n    self._check_batch_shape_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 425, in _check_batch_shape_possibly_add_asserts\n    check_ops.assert_non_negative(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 622, in assert_non_negative\n    return assert_less_equal(zero, x, data=data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999411.4988275,
                        "msecs": 498.0,
                        "relativeCreated": 344370.70298194885,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0024156150029739365,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_static",
            "lineno": 123,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004200490075163543,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012854202999733388,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_negative_batch_shape_raises_static>\n"
            },
            "teardown": {
                "duration": 0.0015859709965297952,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_dynamic",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.00036930399073753506,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09049744899675716,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_negative_num_rows_raises_dynamic>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/zeros/_35]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 225, in __init__\n    self._check_domain_range_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 379, in _check_domain_range_possibly_add_asserts\n    check_ops.assert_non_negative(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 622, in assert_non_negative\n    return assert_less_equal(zero, x, data=data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/zeros/_35]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_non_negative_1/assert_less_equal/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 225, in __init__\n    self._check_domain_range_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 379, in _check_domain_range_possibly_add_asserts\n    check_ops.assert_non_negative(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 622, in assert_non_negative\n    return assert_less_equal(zero, x, data=data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999411.6052048,
                        "msecs": 605.0,
                        "relativeCreated": 344477.0803451538,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.002156585003831424,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_static",
            "lineno": 109,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004108099965378642,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012476663003326394,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_negative_num_rows_raises_static>\n"
            },
            "teardown": {
                "duration": 0.0014298689930001274,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_dynamic",
            "lineno": 143,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043160098721273243,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10810256699915044,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_non_1d_batch_shape_raises_dynamic>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_rank_2/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_2/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_rank_2/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_2/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be a 1-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [1] [Received shape: ] []\n\t [[{{node LinearOperatorZeros/assert_rank_2/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/add/_43]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be a 1-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [1] [Received shape: ] []\n\t [[{{node LinearOperatorZeros/assert_rank_2/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_rank_2/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 243, in __init__\n    self._check_batch_shape_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 421, in _check_batch_shape_possibly_add_asserts\n    check_ops.assert_rank(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1243, in assert_rank\n    assert_op = _assert_rank_condition(x, rank, static_condition,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1156, in _assert_rank_condition\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_rank_2/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_2/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_rank_2/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_2/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be a 1-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [1] [Received shape: ] []\n\t [[{{node LinearOperatorZeros/assert_rank_2/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/add/_43]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be a 1-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [1] [Received shape: ] []\n\t [[{{node LinearOperatorZeros/assert_rank_2/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_rank_2/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 243, in __init__\n    self._check_batch_shape_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 421, in _check_batch_shape_possibly_add_asserts\n    check_ops.assert_rank(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1243, in assert_rank\n    assert_op = _assert_rank_condition(x, rank, static_condition,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1156, in _assert_rank_condition\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999411.737607,
                        "msecs": 737.0,
                        "relativeCreated": 344609.4825267792,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0021840209956280887,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_static",
            "lineno": 115,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005458749947138131,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011736947009922005,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_non_1d_batch_shape_raises_static>\n"
            },
            "teardown": {
                "duration": 0.0017159300041384995,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_batch_shape_raises_static",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003953709965571761,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012623476999578997,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_non_integer_batch_shape_raises_static>\n"
            },
            "teardown": {
                "duration": 0.0016246719897026196,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_num_rows_raises_static",
            "lineno": 103,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004093300085514784,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01359725499060005,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_non_integer_num_rows_raises_static>\n"
            },
            "teardown": {
                "duration": 0.0014982629945734516,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_dynamic",
            "lineno": 127,
            "outcome": "passed",
            "setup": {
                "duration": 0.00034725099976640195,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07646093099901918,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_non_scalar_num_rows_raises_dynamic>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_rank_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_1/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_rank_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_1/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be a 0-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [0] [Received shape: ] [1]\n\t [[{{node LinearOperatorZeros/assert_rank_1/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/zeros/_35]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be a 0-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [0] [Received shape: ] [1]\n\t [[{{node LinearOperatorZeros/assert_rank_1/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_rank_1/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 225, in __init__\n    self._check_domain_range_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 375, in _check_domain_range_possibly_add_asserts\n    check_ops.assert_rank(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1243, in assert_rank\n    assert_op = _assert_rank_condition(x, rank, static_condition,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1156, in _assert_rank_condition\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_rank_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_1/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_rank_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_1/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be a 0-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [0] [Received shape: ] [1]\n\t [[{{node LinearOperatorZeros/assert_rank_1/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/zeros/_35]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be a 0-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [0] [Received shape: ] [1]\n\t [[{{node LinearOperatorZeros/assert_rank_1/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_rank_1/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 225, in __init__\n    self._check_domain_range_possibly_add_asserts()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 375, in _check_domain_range_possibly_add_asserts\n    check_ops.assert_rank(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1243, in assert_rank\n    assert_op = _assert_rank_condition(x, rank, static_condition,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 1156, in _assert_rank_condition\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999411.868415,
                        "msecs": 868.0,
                        "relativeCreated": 344740.29064178467,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0017049160087481141,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_static",
            "lineno": 97,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004086989938514307,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013629484004923142,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_non_scalar_num_rows_raises_static>\n"
            },
            "teardown": {
                "duration": 0.0015928070060908794,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_ref_type_shape_args_raises",
            "lineno": 193,
            "outcome": "passed",
            "setup": {
                "duration": 0.00037981699279043823,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023206408994155936,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_ref_type_shape_args_raises>\n"
            },
            "teardown": {
                "duration": 0.0015587689995300025,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00039195999852381647,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043321300472598523,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0015796709922142327,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_dynamic",
            "lineno": 165,
            "outcome": "passed",
            "setup": {
                "duration": 0.00039148799260146916,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07706283700827044,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_wrong_matrix_dimensions_raises_dynamic>\n",
                "stderr": "ERROR:tensorflow:Graph execution error:\n\nDetected at node 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n      self.evaluate(operator.matmul(x))\nNode: 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert'\nDetected at node 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n      self.evaluate(operator.matmul(x))\nNode: 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Dimensions are not compatible.  shape[-2] of argument to be the same as this operator] [Condition x == y did not hold element-wise:] [x (LinearOperatorZeros/matmul/strided_slice:0) = ] [3] [y (LinearOperatorZeros/matmul/LinearOperatorZeros/domain_dimension_tensor/strided_slice:0) = ] [2]\n\t [[{{node LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert}}]]\n\t [[LinearOperatorZeros/matmul/zeros/_33]]\n  (1) INVALID_ARGUMENT: assertion failed: [Dimensions are not compatible.  shape[-2] of argument to be the same as this operator] [Condition x == y did not hold element-wise:] [x (LinearOperatorZeros/matmul/strided_slice:0) = ] [3] [y (LinearOperatorZeros/matmul/LinearOperatorZeros/domain_dimension_tensor/strided_slice:0) = ] [2]\n\t [[{{node LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n    self.evaluate(operator.matmul(x))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator.py\", line 688, in matmul\n    return self._matmul(x, adjoint=adjoint, adjoint_arg=adjoint_arg)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 310, in _matmul\n    aps = linear_operator_util.assert_compatible_matrix_dimensions(self, x)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_util.py\", line 234, in assert_compatible_matrix_dimensions\n    assert_same_dd = check_ops.assert_equal(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 726, in assert_equal\n    return _binary_assert('==', 'assert_equal', math_ops.equal, np.equal, x, y,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n\n",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n      self.evaluate(operator.matmul(x))\nNode: 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert'\nDetected at node 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert' defined at (most recent call last):\n    File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n      sys.exit(console_main())\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n      code = main()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n      return self.run(*args, **kwds)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n      self._callTestMethod(testMethod)\n    File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n      self.evaluate(operator.matmul(x))\nNode: 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Dimensions are not compatible.  shape[-2] of argument to be the same as this operator] [Condition x == y did not hold element-wise:] [x (LinearOperatorZeros/matmul/strided_slice:0) = ] [3] [y (LinearOperatorZeros/matmul/LinearOperatorZeros/domain_dimension_tensor/strided_slice:0) = ] [2]\n\t [[{{node LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert}}]]\n\t [[LinearOperatorZeros/matmul/zeros/_33]]\n  (1) INVALID_ARGUMENT: assertion failed: [Dimensions are not compatible.  shape[-2] of argument to be the same as this operator] [Condition x == y did not hold element-wise:] [x (LinearOperatorZeros/matmul/strided_slice:0) = ] [3] [y (LinearOperatorZeros/matmul/LinearOperatorZeros/domain_dimension_tensor/strided_slice:0) = ] [2]\n\t [[{{node LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert':\n  File \"/home/frasermince/miniconda3/bin/pytest\", line 8, in <module>\n    sys.exit(console_main())\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 190, in console_main\n    code = main()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 650, in __call__\n    return self.run(*args, **kwds)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 591, in run\n    self._callTestMethod(testMethod)\n  File \"/home/frasermince/miniconda3/lib/python3.10/unittest/case.py\", line 549, in _callTestMethod\n    method()\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n    self.evaluate(operator.matmul(x))\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator.py\", line 688, in matmul\n    return self._matmul(x, adjoint=adjoint, adjoint_arg=adjoint_arg)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 310, in _matmul\n    aps = linear_operator_util.assert_compatible_matrix_dimensions(self, x)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linear_operator_util.py\", line 234, in assert_compatible_matrix_dimensions\n    assert_same_dd = check_ops.assert_equal(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 726, in assert_equal\n    return _binary_assert('==', 'assert_equal', math_ops.equal, np.equal, x, y,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683999411.9883776,
                        "msecs": 988.0,
                        "relativeCreated": 344860.25309562683,
                        "thread": 140098741187072,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 28273
                    }
                ]
            },
            "teardown": {
                "duration": 0.0023969289904925972,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_static",
            "lineno": 159,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004060200008098036,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012462967992178164,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_wrong_matrix_dimensions_raises_static>\n"
            },
            "teardown": {
                "duration": 0.0017688039952190593,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_zeros_matmul",
            "lineno": 182,
            "outcome": "passed",
            "setup": {
                "duration": 0.0003783489955822006,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011994476997642778,
                "outcome": "passed",
                "stdout": "ITEM <TestCaseFunction test_zeros_matmul>\n"
            },
            "teardown": {
                "duration": 0.0018564249912742525,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00043673398613464087,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042462299461476505,
                "outcome": "skipped",
                "stdout": "ITEM <TestCaseFunction test_session>\n",
                "longrepr": "('/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.03494385500380304,
                "outcome": "passed"
            }
        }
    ],
    "warnings": [
        {
            "message": "the imp module is deprecated in favour of importlib and slated for removal in Python 3.12; see the module's documentation for alternative uses",
            "category": "DeprecationWarning",
            "when": "collect",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/autograph/core/converter_testing.py",
            "lineno": 18
        },
        {
            "message": "Casting complex values to real discards the imaginary part",
            "category": "ComplexWarning",
            "when": "runtest",
            "filename": "/home/frasermince/portability/src/tensorflow_tests_reduced/cast_test.py",
            "lineno": 51
        },
        {
            "message": "Casting complex values to real discards the imaginary part",
            "category": "ComplexWarning",
            "when": "runtest",
            "filename": "/home/frasermince/portability/src/tensorflow_tests_reduced/cast_test.py",
            "lineno": 51
        },
        {
            "message": "Casting complex values to real discards the imaginary part",
            "category": "ComplexWarning",
            "when": "runtest",
            "filename": "/home/frasermince/portability/src/tensorflow_tests_reduced/cast_test.py",
            "lineno": 51
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "The algorithm does not converge.  Roundoff error is detected\n  in the extrapolation table.  It is assumed that the requested tolerance\n  cannot be achieved, and that the returned result (if full_output = 1) is \n  the best which can be obtained.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The integral is probably divergent, or slowly convergent.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The maximum number of subdivisions (50) has been achieved.\n  If increasing the limit yields no improvement it is advised to analyze \n  the integrand in order to determine the difficulties.  If the position of a \n  local difficulty can be determined (singularity, discontinuity) one will \n  probably gain from splitting up the interval and calling the integrator \n  on the subranges.  Perhaps a special-purpose integrator should be used.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The algorithm does not converge.  Roundoff error is detected\n  in the extrapolation table.  It is assumed that the requested tolerance\n  cannot be achieved, and that the returned result (if full_output = 1) is \n  the best which can be obtained.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The integral is probably divergent, or slowly convergent.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The maximum number of subdivisions (50) has been achieved.\n  If increasing the limit yields no improvement it is advised to analyze \n  the integrand in order to determine the difficulties.  If the position of a \n  local difficulty can be determined (singularity, discontinuity) one will \n  probably gain from splitting up the interval and calling the integrator \n  on the subranges.  Perhaps a special-purpose integrator should be used.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "invalid value encountered in reduce",
            "category": "RuntimeWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/numpy/core/fromnumeric.py",
            "lineno": 86
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Exception in thread Thread-1 (update_thread)\n\nTraceback (most recent call last):\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 1378, in _do_call\n    return fn(*args)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 1361, in _run_fn\n    return self._call_tf_sessionrun(options, feed_dict, fetch_list,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 1454, in _call_tf_sessionrun\n    return tf_session.TF_SessionRun_wrapper(self._session, options, feed_dict,\ntensorflow.python.framework.errors_impl.CancelledError: Run call was cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 3486, in assertRaisesWithPredicateMatch\n    yield\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/run_test.py\", line 1394, in update_thread\n    sess.run(c)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 968, in run\n    result = self._run(None, fetches, feed_dict, options_ptr,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 1191, in _run\n    results = self._do_run(handle, final_targets, final_fetches,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 1371, in _do_run\n    return self._do_call(_run_fn, feeds, fetches, targets, options,\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/client/session.py\", line 1397, in _do_call\n    raise type(e)(node_def, op, message)  # pylint: disable=no-value-for-parameter\ntensorflow.python.framework.errors_impl.CancelledError: Graph execution error:\n\nRun call was cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/home/frasermince/miniconda3/lib/python3.10/threading.py\", line 1016, in _bootstrap_inner\n    self.run()\n  File \"/home/frasermince/miniconda3/lib/python3.10/threading.py\", line 953, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/run_test.py\", line 1389, in update_thread\n    with self.assertRaisesWithPredicateMatch(\n  File \"/home/frasermince/miniconda3/lib/python3.10/contextlib.py\", line 153, in __exit__\n    self.gen.throw(typ, value, traceback)\n  File \"/home/frasermince/miniconda3/lib/python3.10/site-packages/tensorflow/python/framework/test_util.py\", line 3490, in assertRaisesWithPredicateMatch\n    raise AssertionError(\"Exception of type %s: %s\" %\nAssertionError: Exception of type <class 'tensorflow.python.framework.errors_impl.CancelledError'>: Graph execution error:\n\nRun call was cancelled\n",
            "category": "PytestUnhandledThreadExceptionWarning",
            "when": "runtest",
            "filename": "/home/frasermince/miniconda3/lib/python3.10/site-packages/_pytest/threadexception.py",
            "lineno": 73
        }
    ]
}